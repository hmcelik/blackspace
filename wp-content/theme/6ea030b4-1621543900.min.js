!(function (a, b) {
  "function" == typeof define && define.amd
    ? define("ev-emitter/ev-emitter", b)
    : "object" == typeof module && module.exports
    ? (module.exports = b())
    : (a.EvEmitter = b());
})("undefined" == typeof window ? this : window, function () {
  function a() {}
  var b = a.prototype;
  return (
    (b.on = function (a, b) {
      if (a && b) {
        var c = (this._events = this._events || {}),
          d = (c[a] = c[a] || []);
        return -1 == d.indexOf(b) && d.push(b), this;
      }
    }),
    (b.once = function (a, b) {
      if (a && b) {
        this.on(a, b);
        var c = (this._onceEvents = this._onceEvents || {}),
          d = (c[a] = c[a] || {});
        return (d[b] = !0), this;
      }
    }),
    (b.off = function (a, b) {
      var c = this._events && this._events[a];
      if (c && c.length) {
        var d = c.indexOf(b);
        return -1 != d && c.splice(d, 1), this;
      }
    }),
    (b.emitEvent = function (a, b) {
      var c = this._events && this._events[a];
      if (c && c.length) {
        (c = c.slice(0)), (b = b || []);
        for (
          var d = this._onceEvents && this._onceEvents[a], e = 0;
          e < c.length;
          e++
        ) {
          var f = c[e],
            g = d && d[f];
          g && (this.off(a, f), delete d[f]), f.apply(this, b);
        }
        return this;
      }
    }),
    (b.allOff = function () {
      delete this._events, delete this._onceEvents;
    }),
    a
  );
}),
  (function (a, b) {
    "use strict";
    "function" == typeof define && define.amd
      ? define(["ev-emitter/ev-emitter"], function (c) {
          return b(a, c);
        })
      : "object" == typeof module && module.exports
      ? (module.exports = b(a, require("ev-emitter")))
      : (a.imagesLoaded = b(a, a.EvEmitter));
  })("undefined" == typeof window ? this : window, function (b, c) {
    function f(a, b) {
      for (var c in b) a[c] = b[c];
      return a;
    }
    function g(b) {
      if (Array.isArray(b)) return b;
      var c = "object" == typeof b && "number" == typeof b.length;
      return c ? a.call(b) : [b];
    }
    function j(a, b, c) {
      if (!(this instanceof j)) return new j(a, b, c);
      var d = a;
      return (
        "string" == typeof a && (d = document.querySelectorAll(a)),
        d
          ? ((this.elements = g(d)),
            (this.options = f({}, this.options)),
            "function" == typeof b ? (c = b) : f(this.options, b),
            c && this.on("always", c),
            this.getImages(),
            l && (this.jqDeferred = new l.Deferred()),
            void setTimeout(this.check.bind(this)))
          : void m.error("Bad element for imagesLoaded " + (d || a))
      );
    }
    function i(a) {
      this.img = a;
    }
    function k(a, b) {
      (this.url = a), (this.element = b), (this.img = new Image());
    }
    var l = b.jQuery,
      m = b.console,
      a = Array.prototype.slice;
    (j.prototype = Object.create(c.prototype)),
      (j.prototype.options = {}),
      (j.prototype.getImages = function () {
        (this.images = []), this.elements.forEach(this.addElementImages, this);
      }),
      (j.prototype.addElementImages = function (a) {
        "IMG" == a.nodeName && this.addImage(a),
          !0 === this.options.background && this.addElementBackgroundImages(a);
        var b = a.nodeType;
        if (b && d[b]) {
          for (var c, e = a.querySelectorAll("img"), f = 0; f < e.length; f++)
            (c = e[f]), this.addImage(c);
          if ("string" == typeof this.options.background) {
            var g = a.querySelectorAll(this.options.background);
            for (f = 0; f < g.length; f++) {
              var h = g[f];
              this.addElementBackgroundImages(h);
            }
          }
        }
      });
    var d = { 1: !0, 9: !0, 11: !0 };
    return (
      (j.prototype.addElementBackgroundImages = function (a) {
        var b = getComputedStyle(a);
        if (b)
          for (
            var c, d = /url\((['"])?(.*?)\1\)/gi, e = d.exec(b.backgroundImage);
            null !== e;

          )
            (c = e && e[2]),
              c && this.addBackground(c, a),
              (e = d.exec(b.backgroundImage));
      }),
      (j.prototype.addImage = function (a) {
        var b = new i(a);
        this.images.push(b);
      }),
      (j.prototype.addBackground = function (a, b) {
        var c = new k(a, b);
        this.images.push(c);
      }),
      (j.prototype.check = function () {
        function a(a, c, d) {
          setTimeout(function () {
            b.progress(a, c, d);
          });
        }
        var b = this;
        return (
          (this.progressedCount = 0),
          (this.hasAnyBroken = !1),
          this.images.length
            ? void this.images.forEach(function (b) {
                b.once("progress", a), b.check();
              })
            : void this.complete()
        );
      }),
      (j.prototype.progress = function (a, b, c) {
        this.progressedCount++,
          (this.hasAnyBroken = this.hasAnyBroken || !a.isLoaded),
          this.emitEvent("progress", [this, a, b]),
          this.jqDeferred &&
            this.jqDeferred.notify &&
            this.jqDeferred.notify(this, a),
          this.progressedCount == this.images.length && this.complete(),
          this.options.debug && m && m.log("progress: " + c, a, b);
      }),
      (j.prototype.complete = function () {
        var a = this.hasAnyBroken ? "fail" : "done";
        if (
          ((this.isComplete = !0),
          this.emitEvent(a, [this]),
          this.emitEvent("always", [this]),
          this.jqDeferred)
        ) {
          var b = this.hasAnyBroken ? "reject" : "resolve";
          this.jqDeferred[b](this);
        }
      }),
      (i.prototype = Object.create(c.prototype)),
      (i.prototype.check = function () {
        var a = this.getIsImageComplete();
        return a
          ? void this.confirm(0 !== this.img.naturalWidth, "naturalWidth")
          : ((this.proxyImage = new Image()),
            this.proxyImage.addEventListener("load", this),
            this.proxyImage.addEventListener("error", this),
            this.img.addEventListener("load", this),
            this.img.addEventListener("error", this),
            void (this.proxyImage.src = this.img.src));
      }),
      (i.prototype.getIsImageComplete = function () {
        return this.img.complete && this.img.naturalWidth;
      }),
      (i.prototype.confirm = function (a, b) {
        (this.isLoaded = a), this.emitEvent("progress", [this, this.img, b]);
      }),
      (i.prototype.handleEvent = function (a) {
        var b = "on" + a.type;
        this[b] && this[b](a);
      }),
      (i.prototype.onload = function () {
        this.confirm(!0, "onload"), this.unbindEvents();
      }),
      (i.prototype.onerror = function () {
        this.confirm(!1, "onerror"), this.unbindEvents();
      }),
      (i.prototype.unbindEvents = function () {
        this.proxyImage.removeEventListener("load", this),
          this.proxyImage.removeEventListener("error", this),
          this.img.removeEventListener("load", this),
          this.img.removeEventListener("error", this);
      }),
      (k.prototype = Object.create(i.prototype)),
      (k.prototype.check = function () {
        this.img.addEventListener("load", this),
          this.img.addEventListener("error", this),
          (this.img.src = this.url);
        var a = this.getIsImageComplete();
        a &&
          (this.confirm(0 !== this.img.naturalWidth, "naturalWidth"),
          this.unbindEvents());
      }),
      (k.prototype.unbindEvents = function () {
        this.img.removeEventListener("load", this),
          this.img.removeEventListener("error", this);
      }),
      (k.prototype.confirm = function (a, b) {
        (this.isLoaded = a),
          this.emitEvent("progress", [this, this.element, b]);
      }),
      (j.makeJQueryPlugin = function (a) {
        (a = a || b.jQuery),
          a &&
            ((l = a),
            (l.fn.imagesLoaded = function (a, b) {
              var c = new j(this, a, b);
              return c.jqDeferred.promise(l(this));
            }));
      }),
      j.makeJQueryPlugin(),
      j
    );
  });
jQuery.easing.jswing = jQuery.easing.swing;
var pow = Math.pow;
jQuery.extend(jQuery.easing, {
  def: "easeOutExpo",
  easeInExpo: function (a) {
    return 0 === a ? 0 : pow(2, 10 * a - 10);
  },
  easeOutExpo: function (a) {
    return 1 === a ? 1 : 1 - pow(2, -10 * a);
  },
  easeInOutExpo: function (a) {
    return 0 === a
      ? 0
      : 1 === a
      ? 1
      : 0.5 > a
      ? pow(2, 20 * a - 10) / 2
      : (2 - pow(2, -20 * a + 10)) / 2;
  },
});
if (window.$us === undefined) {
  window.$us = {};
}
$us.mobileNavOpened = 0;
$us.header = {
  isVertical: jQuery.noop,
  isHorizontal: jQuery.noop,
  isFixed: jQuery.noop,
  isTransparent: jQuery.noop,
  isHidden: jQuery.noop,
  isStickyEnabled: jQuery.noop,
  isStickyAutoHideEnabled: jQuery.noop,
  isSticky: jQuery.noop,
  isStickyAutoHidden: jQuery.noop,
  getScrollDirection: jQuery.noop,
  getAdminBarHeight: jQuery.noop,
  getHeight: jQuery.noop,
  getCurrentHeight: jQuery.noop,
  getScrollTop: jQuery.noop,
};
jQuery.fn.usMod = function (mod, value) {
  if (this.length == 0) {
    return this;
  }
  if (value === !1) {
    this.get(0).className = this.get(0).className.replace(
      new RegExp("(^| )" + mod + "_[a-zA-Z0-9_-]+( |$)"),
      "$2"
    );
    return this;
  }
  var pcre = new RegExp("^.*?" + mod + "_([a-zA-Z0-9_-]+).*?$"),
    arr;
  if (value === undefined) {
    return (arr = pcre.exec(this.get(0).className)) ? arr[1] : !1;
  } else {
    this.usMod(mod, !1).get(0).className += " " + mod + "_" + value;
    return this;
  }
};
$us.toBool = function (value) {
  if (typeof value == "string") {
    return (
      value == "true" || value == "True" || value == "TRUE" || value == "1"
    );
  }
  if (typeof value == "boolean") {
    return value;
  }
  return !!parseInt(value);
};
$us.getScript = function (url, callback) {
  if (!$us.ajaxLoadJs) {
    callback();
    return !1;
  }
  if ($us.loadedScripts === undefined) {
    $us.loadedScripts = {};
    $us.loadedScriptsFunct = {};
  }
  if ($us.loadedScripts[url] === "loaded") {
    callback();
    return;
  } else if ($us.loadedScripts[url] === "loading") {
    $us.loadedScriptsFunct[url].push(callback);
    return;
  }
  $us.loadedScripts[url] = "loading";
  $us.loadedScriptsFunct[url] = [];
  $us.loadedScriptsFunct[url].push(callback);
  var complete = function () {
    for (var i = 0; i < $us.loadedScriptsFunct[url].length; i++) {
      if (typeof $us.loadedScriptsFunct[url][i] === "function") {
        $us.loadedScriptsFunct[url][i]();
      }
    }
    $us.loadedScripts[url] = "loaded";
  };
  var options = { dataType: "script", cache: !0, url: url, complete: complete };
  return jQuery.ajax(options);
};
$us.detectIE = function () {
  var ua = window.navigator.userAgent;
  var msie = ua.indexOf("MSIE ");
  if (msie > 0) {
    return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
  }
  var trident = ua.indexOf("Trident/");
  if (trident > 0) {
    var rv = ua.indexOf("rv:");
    return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
  }
  var edge = ua.indexOf("Edge/");
  if (edge > 0) {
    return parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10);
  }
  return !1;
};
$us.getAnimationName = function (animationName, defaultAnimationName) {
  if (jQuery.easing.hasOwnProperty(animationName)) {
    return animationName;
  }
  return defaultAnimationName ? defaultAnimationName : jQuery.easing._default;
};
$us.timeout = function (fn, delay) {
  var start = new Date().getTime(),
    handle = new Object();
  function loop() {
    var current = new Date().getTime(),
      delta = current - start;
    delta >= delay
      ? fn.call()
      : (handle.value = window.requestAnimationFrame(loop));
  }
  handle.value = window.requestAnimationFrame(loop);
  return handle;
};
$us.clearTimeout = function (handle) {
  if (handle) {
    window.cancelAnimationFrame(handle.value);
  }
};
$us.debounce = function (fn, wait, immediate) {
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;
  function later() {
    var last = Date.now() - timestamp;
    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = fn.apply(context, args);
        context = args = null;
      }
    }
  }
  var debounced = function () {
    context = this;
    args = arguments;
    timestamp = Date.now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = fn.apply(context, args);
      context = args = null;
    }
    return result;
  };
  debounced.prototype = {
    clear: function () {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
    },
    flush: function () {
      if (timeout) {
        result = fn.apply(context, args);
        context = args = null;
        clearTimeout(timeout);
        timeout = null;
      }
    },
  };
  return debounced;
};
$us.mixins = {};
$us.mixins.Events = {
  on: function (eventType, handler) {
    if (this.$$events === undefined) {
      this.$$events = {};
    }
    if (this.$$events[eventType] === undefined) {
      this.$$events[eventType] = [];
    }
    this.$$events[eventType].push(handler);
    return this;
  },
  off: function (eventType, handler) {
    if (this.$$events === undefined || this.$$events[eventType] === undefined) {
      return this;
    }
    if (handler !== undefined) {
      var handlerPos = jQuery.inArray(handler, this.$$events[eventType]);
      if (handlerPos != -1) {
        this.$$events[eventType].splice(handlerPos, 1);
      }
    } else {
      this.$$events[eventType] = [];
    }
    return this;
  },
  trigger: function (eventType, extraParameters) {
    if (
      this.$$events === undefined ||
      this.$$events[eventType] === undefined ||
      this.$$events[eventType].length == 0
    ) {
      return this;
    }
    var params =
      arguments.length > 2 || !jQuery.isArray(extraParameters)
        ? Array.prototype.slice.call(arguments, 1)
        : extraParameters;
    params.unshift(this);
    for (var index = 0; index < this.$$events[eventType].length; index++) {
      this.$$events[eventType][index].apply(
        this.$$events[eventType][index],
        params
      );
    }
    return this;
  },
};
if (
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  )
) {
  jQuery.isMobile = !0;
} else {
  jQuery.isMobile =
    navigator.platform == "MacIntel" && navigator.maxTouchPoints > 1;
  jQuery("html").toggleClass("ios-touch", !!jQuery.isMobile);
}
jQuery("html").toggleClass("no-touch", !jQuery.isMobile);
jQuery("html").toggleClass("ie11", $us.detectIE() == 11);
!(function ($) {
  $us.$window = $(window);
  $us.$document = $(document);
  $us.$html = $("html");
  $us.$body = $(".l-body:first");
  $us.$htmlBody = $us.$html.add($us.$body);
  $us.$canvas = $(".l-canvas:first");
})(jQuery);
!(function ($, undefined) {
  "use strict";
  function USCanvas(options) {
    var defaults = { disableEffectsWidth: 900, backToTopDisplay: 100 };
    this.options = $.extend({}, defaults, options || {});
    this.$header = $(".l-header", $us.$canvas);
    this.$main = $(".l-main", $us.$canvas);
    this.$sections = $(".l-section", $us.$canvas);
    this.$firstSection = this.$sections.first();
    this.$firstStickySection = this.$sections.filter(
      ".type_sticky:first:visible"
    );
    this.$secondSection = this.$sections.eq(1);
    this.$fullscreenSections = this.$sections.filter(".height_full");
    this.$topLink = $(".w-toplink");
    this.type = $us.$canvas.usMod("type");
    this._headerPos = this.$header.usMod("pos");
    this.headerPos = this._headerPos;
    this.headerInitialPos = $us.$body.usMod("headerinpos");
    this.headerBg = this.$header.usMod("bg");
    this.rtl = $us.$body.hasClass("rtl");
    this.isScrolling = !1;
    this.isAndroid = /Android/i.test(navigator.userAgent);
    if (this.isStickySection()) {
      if (!!window.IntersectionObserver) {
        this.observer = new IntersectionObserver(
          function (e) {
            e[0].target.classList.toggle(
              "is_sticky",
              e[0].intersectionRatio === 1
            );
          }.bind(this),
          { threshold: [0, 1] }
        ).observe(this.$firstStickySection[0]);
      }
    }
    if ($us.$body.hasClass("us_iframe")) {
      $("a:not([target])").each(function () {
        $(this).attr("target", "_parent");
      });
      jQuery(function ($) {
        var $framePreloader = $(
          ".l-popup-box-content .g-preloader",
          window.parent.document
        );
        $framePreloader.hide();
      });
    }
    $us.$window
      .on("scroll", this._events.scroll.bind(this))
      .on("resize load", this._events.resize.bind(this));
    $us.timeout(this._events.resize.bind(this), 25);
    $us.timeout(this._events.resize.bind(this), 75);
  }
  USCanvas.prototype = {
    isStickySection: function () {
      return !!this.$firstStickySection.length;
    },
    hasStickySection: function () {
      if (this.isStickySection()) {
        return this.$firstStickySection.hasClass("is_sticky");
      }
      return !1;
    },
    getHeightStickySection: function () {
      return this.isStickySection()
        ? Math.ceil(this.$firstStickySection.outerHeight(!0))
        : 0;
    },
    getHeightFirstSection: function () {
      return this.$firstSection.length
        ? parseInt(this.$firstSection.outerHeight(!0))
        : 0;
    },
    _events: {
      scroll: function () {
        var scrollTop = parseInt($us.$window.scrollTop());
        this.$topLink.toggleClass(
          "active",
          scrollTop >= (this.winHeight * this.options.backToTopDisplay) / 100
        );
        if (this.isAndroid) {
          if (this.pid) {
            $us.clearTimeout(this.pid);
          }
          this.isScrolling = !0;
          this.pid = $us.timeout(
            function () {
              this.isScrolling = !1;
            }.bind(this),
            100
          );
        }
      },
      resize: function () {
        this.winHeight = parseInt($us.$window.height());
        this.winWidth = parseInt($us.$window.width());
        $us.$body.toggleClass(
          "disable_effects",
          this.winWidth < this.options.disableEffectsWidth
        );
        var ieVersion = $us.detectIE();
        if (
          ieVersion !== !1 &&
          ieVersion == 11 &&
          this.$fullscreenSections.length > 0 &&
          !this.isScrolling
        ) {
          this.$fullscreenSections.each(
            function (index, section) {
              var $section = $(section),
                sectionHeight = this.winHeight,
                isFirstSection = index == 0 && $section.is(this.$firstSection);
              if (isFirstSection) {
                sectionHeight -= $section.offset().top;
              } else {
                sectionHeight -= $us.header.getCurrentHeight();
              }
              if ($section.hasClass("valign_center")) {
                var $sectionH = $section.find(".l-section-h"),
                  sectionTopPadding = parseInt($section.css("padding-top")),
                  contentHeight = $sectionH.outerHeight(),
                  topMargin;
                $sectionH.css("margin-top", "");
                var sectionOverlapped =
                  isFirstSection &&
                  $us.header.isFixed() &&
                  !$us.header.isTransparent() &&
                  $us.header.isHorizontal();
                if (sectionOverlapped) {
                  topMargin = Math.max(
                    0,
                    (sectionHeight - sectionTopPadding - contentHeight) / 2
                  );
                } else {
                  topMargin = Math.max(
                    0,
                    (sectionHeight - contentHeight) / 2 - sectionTopPadding
                  );
                }
                $sectionH.css("margin-top", topMargin || "");
              }
            }.bind(this)
          );
          $us.$canvas.trigger("contentChange");
        }
        if ($us.$body.hasClass("us_iframe")) {
          var $frameContent = $(".l-popup-box-content", window.parent.document),
            outerHeight = $us.$body.outerHeight(!0);
          if (outerHeight > 0 && $(window.parent).height() > outerHeight) {
            $frameContent.css("height", outerHeight);
          } else {
            $frameContent.css("height", "");
          }
        }
        this._events.scroll.call(this);
      },
    },
  };
  $us.canvas = new USCanvas($us.canvasOptions || {});
})(jQuery);
!(function () {
  jQuery.fn.resetInlineCSS = function () {
    for (var index = 0; index < arguments.length; index++) {
      this.css(arguments[index], "");
    }
    return this;
  };
  jQuery.fn.clearPreviousTransitions = function () {
    var prevTimers = (this.data("animation-timers") || "").split(",");
    if (prevTimers.length >= 2) {
      this.resetInlineCSS("transition");
      prevTimers.map(clearTimeout);
      this.removeData("animation-timers");
    }
    return this;
  };
  jQuery.fn.performCSSTransition = function (
    css,
    duration,
    onFinish,
    easing,
    delay
  ) {
    duration = duration || 250;
    delay = delay || 25;
    easing = easing || "ease";
    var $this = this,
      transition = [];
    this.clearPreviousTransitions();
    for (var attr in css) {
      if (!css.hasOwnProperty(attr)) {
        continue;
      }
      transition.push(attr + " " + duration / 1000 + "s " + easing);
    }
    transition = transition.join(", ");
    $this.css({ transition: transition });
    var timer1 = setTimeout(function () {
      $this.css(css);
    }, delay);
    var timer2 = setTimeout(function () {
      $this.resetInlineCSS("transition");
      if (typeof onFinish == "function") {
        onFinish();
      }
    }, duration + delay);
    this.data("animation-timers", timer1 + "," + timer2);
  };
  jQuery.fn.slideDownCSS = function (duration, onFinish, easing, delay) {
    if (this.length == 0) {
      return;
    }
    var $this = this;
    this.clearPreviousTransitions();
    this.resetInlineCSS("padding-top", "padding-bottom");
    var timer1 = setTimeout(function () {
      var paddingTop = parseInt($this.css("padding-top")),
        paddingBottom = parseInt($this.css("padding-bottom"));
      $this.css({
        visibility: "hidden",
        position: "absolute",
        height: "auto",
        "padding-top": 0,
        "padding-bottom": 0,
        display: "block",
      });
      var height = $this.height();
      $this.css({
        overflow: "hidden",
        height: "0px",
        opacity: 0,
        visibility: "",
        position: "",
      });
      $this.performCSSTransition(
        {
          opacity: 1,
          height: height + paddingTop + paddingBottom,
          "padding-top": paddingTop,
          "padding-bottom": paddingBottom,
        },
        duration,
        function () {
          $this.resetInlineCSS("overflow").css("height", "auto");
          if (typeof onFinish == "function") {
            onFinish();
          }
        },
        easing,
        delay
      );
    }, 25);
    this.data("animation-timers", timer1 + ",null");
  };
  jQuery.fn.slideUpCSS = function (duration, onFinish, easing, delay) {
    if (this.length == 0) {
      return;
    }
    this.clearPreviousTransitions();
    this.css({
      height: this.outerHeight(),
      overflow: "hidden",
      "padding-top": this.css("padding-top"),
      "padding-bottom": this.css("padding-bottom"),
    });
    var $this = this;
    this.performCSSTransition(
      { height: 0, opacity: 0, "padding-top": 0, "padding-bottom": 0 },
      duration,
      function () {
        $this
          .resetInlineCSS("overflow", "padding-top", "padding-bottom")
          .css({ display: "none" });
        if (typeof onFinish == "function") {
          onFinish();
        }
      },
      easing,
      delay
    );
  };
  jQuery.fn.fadeInCSS = function (duration, onFinish, easing, delay) {
    if (this.length == 0) {
      return;
    }
    this.clearPreviousTransitions();
    this.css({ opacity: 0, display: "block" });
    this.performCSSTransition(
      { opacity: 1 },
      duration,
      onFinish,
      easing,
      delay
    );
  };
  jQuery.fn.fadeOutCSS = function (duration, onFinish, easing, delay) {
    if (this.length == 0) {
      return;
    }
    var $this = this;
    this.performCSSTransition(
      { opacity: 0 },
      duration,
      function () {
        $this.css("display", "none");
        if (typeof onFinish == "function") {
          onFinish();
        }
      },
      easing,
      delay
    );
  };
})();
jQuery(function ($) {
  "use strict";
  if (document.cookie.indexOf("us_cookie_notice_accepted=true") !== -1) {
    $(".l-cookie").remove();
  } else {
    $(document).on("click", "#us-set-cookie", function (e) {
      e.preventDefault();
      e.stopPropagation();
      var d = new Date();
      d.setFullYear(d.getFullYear() + 1);
      document.cookie =
        "us_cookie_notice_accepted=true; expires=" +
        d.toUTCString() +
        "; path=/;" +
        (location.protocol === "https:" ? " secure;" : "");
      $(".l-cookie").remove();
    });
  }
  if ($("a[ref=magnificPopup][class!=direct-link]").length != 0) {
    $us.getScript(
      $us.templateDirectoryUri + "/common/js/vendor/magnific-popup.js",
      function () {
        $("a[ref=magnificPopup][class!=direct-link]").magnificPopup({
          type: "image",
          removalDelay: 300,
          mainClass: "mfp-fade",
          fixedContentPos: !0,
        });
      }
    );
  }
  jQuery(".l-section-img").each(function () {
    var $this = $(this),
      img = new Image(),
      bgImg = $this.css("background-image") || "";
    if (bgImg.match(/url\(['"]*(.*?)['"]*\)/i)) {
      img.onload = function () {
        if (!$this.hasClass("loaded")) {
          $this.addClass("loaded");
        }
      };
      img.src = bgImg.replace(/url\(['"]*(.*?)['"]*\)/i, "$1");
    } else {
      $this.addClass("loaded");
    }
  });
  var $usSectionVideoContainer = $(".l-section-video");
  if ($usSectionVideoContainer.length) {
    $(window).on("resize load", function () {
      $usSectionVideoContainer.each(function () {
        var $container = $(this);
        if (!$container.data("video-disable-width")) {
          return !1;
        }
        if (
          window.innerWidth < parseInt($container.data("video-disable-width"))
        ) {
          $container.addClass("hidden");
        } else {
          $container.removeClass("hidden");
        }
      });
    });
  }
  (function () {
    var $footer = $(".l-footer");
    if (
      $us.$body.hasClass("footer_reveal") &&
      $footer.length &&
      $footer.html().trim().length
    ) {
      var usFooterReveal = function () {
        var footerHeight = $footer.innerHeight();
        if (
          window.innerWidth >
          parseInt($us.canvasOptions.columnsStackingWidth) - 1
        ) {
          $us.$canvas.css("margin-bottom", Math.round(footerHeight) - 1);
        } else {
          $us.$canvas.css("margin-bottom", "");
        }
      };
      usFooterReveal();
      $us.$window.on("resize load", function () {
        usFooterReveal();
      });
    }
  })();
  var $usYTVimeoVideoContainer = $(".with_youtube, .with_vimeo");
  if ($usYTVimeoVideoContainer.length) {
    $(window).on("resize load", function () {
      $usYTVimeoVideoContainer.each(function () {
        var $container = $(this),
          $frame = $container.find("iframe").first(),
          cHeight = $container.innerHeight(),
          cWidth = $container.innerWidth(),
          fWidth = "",
          fHeight = "";
        if (cWidth / cHeight < 16 / 9) {
          fWidth = cHeight * (16 / 9);
          fHeight = cHeight;
        } else {
          fWidth = cWidth;
          fHeight = fWidth * (9 / 16);
        }
        $frame.css({ width: Math.round(fWidth), height: Math.round(fHeight) });
      });
    });
  }
});
(function ($, undefined) {
  "use strict";
  function USWaypoints() {
    this.waypoints = [];
    $us.$canvas.on("contentChange", this._countAll.bind(this));
    $us.$window
      .on("resize load", this._events.resize.bind(this))
      .on("scroll scroll.waypoints", this._events.scroll.bind(this));
    $us.timeout(this._events.resize.bind(this), 75);
    $us.timeout(this._events.scroll.bind(this), 75);
  }
  USWaypoints.prototype = {
    _events: {
      scroll: function () {
        var scrollTop = parseInt($us.$window.scrollTop());
        scrollTop = scrollTop >= 0 ? scrollTop : 0;
        for (var i = 0; i < this.waypoints.length; i++) {
          if (this.waypoints[i].scrollPos < scrollTop) {
            this.waypoints[i].fn(this.waypoints[i].$elm);
            this.waypoints.splice(i, 1);
            i--;
          }
        }
      },
      resize: function () {
        $us.timeout(
          function () {
            this._countAll.call(this);
            this._events.scroll.call(this);
          }.bind(this),
          150
        );
        this._countAll.call(this);
        this._events.scroll.call(this);
      },
    },
    add: function ($elm, offset, fn) {
      $elm = $elm instanceof $ ? $elm : $($elm);
      if ($elm.length == 0) {
        return;
      }
      if (typeof offset != "string" || offset.indexOf("%") == -1) {
        offset = parseInt(offset);
      }
      var waypoint = { $elm: $elm, offset: offset, fn: fn };
      this._count(waypoint);
      this.waypoints.push(waypoint);
    },
    _count: function (waypoint) {
      var elmTop = waypoint.$elm.offset().top,
        winHeight = $us.$window.height();
      if (typeof waypoint.offset == "number") {
        waypoint.scrollPos = elmTop - winHeight + waypoint.offset;
      } else {
        waypoint.scrollPos =
          elmTop - winHeight + (winHeight * parseInt(waypoint.offset)) / 100;
      }
    },
    _countAll: function () {
      for (var i = 0; i < this.waypoints.length; i++) {
        this._count(this.waypoints[i]);
      }
    },
  };
  $us.waypoints = new USWaypoints();
})(jQuery);
(function () {
  var lastTime = 0,
    vendors = ["ms", "moz", "webkit", "o"];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
    window.cancelAnimationFrame =
      window[vendors[x] + "CancelAnimationFrame"] ||
      window[vendors[x] + "CancelRequestAnimationFrame"];
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (callback, element) {
      var currTime = new Date().getTime(),
        timeToCall = Math.max(0, 16 - (currTime - lastTime)),
        id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
  }
})();
if ($us.$body.hasClass("single-format-video")) {
  figure = $us.$body.find("figure.wp-block-embed div.wp-block-embed__wrapper");
  if (figure.length) {
    figure.each(function () {
      if (this.firstElementChild === null) {
        this.remove();
      }
    });
  }
}
!(function ($, undefined) {
  "use strict";
  $us.ToggleMoreContent = function (container) {
    this.init(container);
  };
  $us.ToggleMoreContent.prototype = {
    init: function (container) {
      this.$container = $(container);
      this.$firstElm = $("> *:first", this.$container);
      this.toggleHeight = this.$container.data("toggle-height") || 200;
      this.$container.on(
        "click",
        ".toggle-show-more, .toggle-show-less",
        this._events.elmToggleShowMore.bind(this)
      );
      if (!this.$container.closest(".owl-carousel").length) {
        this.initHeightCheck.call(this);
      }
    },
    initHeightCheck: function () {
      var height = this.$firstElm.css("height", this.toggleHeight).height();
      this.$firstElm.css("height", "");
      var elmHeight = this.$firstElm.height();
      if (elmHeight && elmHeight <= height) {
        $(".toggle-links", this.$container).hide();
        this.$firstElm.css("height", "");
        this.$container.removeClass("with_show_more_toggle");
      } else {
        $(".toggle-links", this.$container).show();
        this.$firstElm.css("height", this.toggleHeight);
      }
    },
    _isVisible: function () {
      if (!this.$container.length) {
        return !1;
      }
      var w = window,
        d = document,
        rect = this.$container[0].getBoundingClientRect(),
        containerPosition = {
          top: w.pageYOffset + rect.top,
          left: w.pageXOffset + rect.left,
          right: w.pageXOffset + rect.right,
          bottom: w.pageYOffset + rect.bottom,
        },
        windowPosition = {
          top: w.pageYOffset,
          left: w.pageXOffset,
          right: w.pageXOffset + d.documentElement.clientWidth,
          bottom: w.pageYOffset + d.documentElement.clientHeight,
        };
      return (
        containerPosition.bottom > windowPosition.top &&
        containerPosition.top < windowPosition.bottom &&
        containerPosition.right > windowPosition.left &&
        containerPosition.left < windowPosition.right
      );
    },
    _events: {
      elmToggleShowMore: function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.$container.toggleClass(
          "show_content",
          $(e.target).hasClass("toggle-show-more")
        );
        $us.timeout(
          function () {
            $us.$canvas.trigger("contentChange");
            if ($.isMobile && !this._isVisible()) {
              $us.$htmlBody
                .stop(!0, !1)
                .scrollTop(
                  this.$container.offset().top - $us.header.getCurrentHeight()
                );
            }
          }.bind(this),
          1
        );
      },
    },
  };
  $.fn.usToggleMoreContent = function () {
    return this.each(function () {
      $(this).data("usToggleMoreContent", new $us.ToggleMoreContent(this));
    });
  };
  $("[data-toggle-height]").usToggleMoreContent();
})(jQuery);
!(function ($, undefined) {
  "use strict";
  if ($us.detectIE() == 11) {
    if ($(".w-post-elm.has_ratio").length && !$(".w-grid").length) {
      $us.getScript(
        $us.templateDirectoryUri + "/common/js/vendor/objectFitPolyfill.js",
        function () {
          objectFitPolyfill();
        }
      );
    }
    $us.getScript(
      $us.templateDirectoryUri + "/common/js/vendor/css-vars-ponyfill.js",
      function () {
        cssVars({});
      }
    );
  }
})(jQuery);
!(function ($, undefined) {
  $us.$window.on("us.wpopup.afterShow", function (_, WPopup) {
    if (
      WPopup instanceof $us.WPopup &&
      $("video.wp-video-shortcode", WPopup.$box).length
    ) {
      var handle = $us.timeout(function () {
        $us.clearTimeout(handle);
        window.dispatchEvent(new Event("resize"));
      }, 1);
    }
  });
})(jQuery);
!(function ($, undefined) {
  "use strict";
  if ($us.detectIE() == 11 && $(".w-image.has_ratio").length) {
    $us.getScript(
      $us.templateDirectoryUri + "/common/js/vendor/objectFitPolyfill.js",
      function () {
        objectFitPolyfill();
      }
    );
  }
})(jQuery);
!(function ($) {
  "use strict";
  function USScroll(options) {
    var defaults = {
      attachOnInit:
        '\
				.menu-item a[href*="#"],\
				.menu-item[href*="#"],\
				a.w-btn[href*="#"]:not([onclick]),\
				.w-text a[href*="#"],\
				.vc_icon_element a[href*="#"],\
				.vc_custom_heading a[href*="#"],\
				a.w-grid-item-anchor[href*="#"],\
				.w-toplink,\
				.w-image a[href*="#"]:not([onclick]),\
				.w-iconbox a[href*="#"],\
				.w-comments-title a[href*="#"],\
				a.smooth-scroll[href*="#"]',
      buttonActiveClass: "active",
      menuItemActiveClass: "current-menu-item",
      menuItemAncestorActiveClass: "current-menu-ancestor",
      animationDuration: $us.canvasOptions.scrollDuration,
      animationEasing: $us.getAnimationName("easeInOutExpo"),
      endAnimationEasing: $us.getAnimationName("easeOutExpo"),
    };
    this.options = $.extend({}, defaults, options || {});
    this.blocks = {};
    this.isScrolling = !1;
    this._events = {
      cancel: this.cancel.bind(this),
      scroll: this.scroll.bind(this),
      resize: this.resize.bind(this),
    };
    this._canvasTopOffset = 0;
    $us.$window.on("resize load", $us.debounce(this._events.resize, 10));
    $us.timeout(this._events.resize, 75);
    $us.$window.on("scroll", this._events.scroll);
    $us.timeout(this._events.scroll, 75);
    if (this.options.attachOnInit) {
      this.attach(this.options.attachOnInit);
    }
    $us.$canvas.on("contentChange", this._countAllPositions.bind(this));
    if (document.location.hash && document.location.hash.indexOf("#!") == -1) {
      var hash = document.location.hash,
        scrollPlace = this.blocks[hash] !== undefined ? hash : undefined;
      if (scrollPlace === undefined) {
        try {
          var $target = $(hash);
          if ($target.length != 0) {
            scrollPlace = $target;
          }
        } catch (error) {}
      }
      if (scrollPlace !== undefined) {
        var keepScrollPositionTimer = setInterval(
          function () {
            this.scrollTo(scrollPlace);
            if (document.readyState !== "loading") {
              clearInterval(keepScrollPositionTimer);
            }
          }.bind(this),
          100
        );
        var clearHashEvents = function () {
          $us.$window.off(
            "load touchstart mousewheel DOMMouseScroll touchstart",
            clearHashEvents
          );
          $us.timeout(
            function () {
              $us.canvas._events.resize.call($us.canvas);
              this._countAllPositions();
              if ($us.hasOwnProperty("waypoints")) {
                $us.waypoints._countAll();
              }
              this.scrollTo(scrollPlace);
            }.bind(this),
            100
          );
        }.bind(this);
        $us.$window.on(
          "load touchstart mousewheel DOMMouseScroll touchstart",
          clearHashEvents
        );
      }
    }
    this.headerHeight = 0;
    this._hasHeaderTransitionEnd = !1;
    $us.header.on(
      "transitionEnd",
      function (header) {
        this.headerHeight =
          header.getCurrentHeight() - header.getAdminBarHeight();
        this._hasHeaderTransitionEnd = !0;
      }.bind(this)
    );
  }
  USScroll.prototype = {
    _countPosition: function (hash) {
      var $target = this.blocks[hash].target,
        targetTop = $target.offset().top,
        state = $us.$body.usMod("state");
      this.blocks[hash].top = Math.ceil(targetTop - this._canvasTopOffset);
    },
    _countAllPositions: function () {
      this._canvasTopOffset = $us.$canvas.offset().top;
      for (var hash in this.blocks) {
        if (this.blocks[hash]) {
          this._countPosition(hash);
        }
      }
    },
    _indicatePosition: function (activeHash) {
      for (var hash in this.blocks) {
        if (!this.blocks[hash]) {
          continue;
        }
        var block = this.blocks[hash];
        if (block.buttons !== undefined) {
          block.buttons.toggleClass(
            this.options.buttonActiveClass,
            hash === activeHash
          );
        }
        if (block.menuItems !== undefined) {
          block.menuItems.toggleClass(
            this.options.menuItemActiveClass,
            hash === activeHash
          );
        }
        if (block.menuAncestors !== undefined) {
          block.menuAncestors.removeClass(
            this.options.menuItemAncestorActiveClass
          );
        }
      }
      if (
        this.blocks[activeHash] !== undefined &&
        this.blocks[activeHash].menuAncestors !== undefined
      ) {
        this.blocks[activeHash].menuAncestors.addClass(
          this.options.menuItemAncestorActiveClass
        );
      }
    },
    attach: function (anchors) {
      var locationPattern = new RegExp(
        "^" +
          location.pathname.replace(
            /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,
            "\\$&"
          ) +
          "#"
      );
      var $anchors = $(anchors);
      if ($anchors.length == 0) {
        return;
      }
      $anchors.each(
        function (index, anchor) {
          var $anchor = $(anchor),
            href = $anchor.attr("href"),
            hash = $anchor.prop("hash");
          if (hash.indexOf("#!") != -1) {
            return;
          }
          if (
            !(
              href.charAt(0) == "#" ||
              (href.charAt(0) == "/" && locationPattern.test(href)) ||
              href.indexOf(location.host + location.pathname + "#") > -1
            )
          ) {
            return;
          }
          if (hash != "" && hash != "#") {
            if (this.blocks[hash] === undefined) {
              var $target = $(hash),
                $type = "";
              if ($target.length == 0) {
                return;
              }
              if (
                $target.hasClass("g-cols") &&
                $target.parent().children().length == 1
              ) {
                $target = $target.closest(".l-section");
              }
              if ($target.hasClass("w-tabs-section")) {
                var $newTarget = $target.closest(".w-tabs");
                if (!$newTarget.hasClass("accordion")) {
                  $target = $newTarget;
                }
                $type = "tab";
              } else if ($target.hasClass("w-tabs")) {
                $type = "tabs";
              }
              this.blocks[hash] = { target: $target, type: $type };
              this._countPosition(hash);
            }
            if (
              $anchor.parent().length > 0 &&
              $anchor.parent().hasClass("menu-item")
            ) {
              var $menuIndicator = $anchor.closest(".menu-item");
              this.blocks[hash].menuItems = (
                this.blocks[hash].menuItems || $()
              ).add($menuIndicator);
              var $menuAncestors = $menuIndicator.parents(
                ".menu-item-has-children"
              );
              if ($menuAncestors.length > 0) {
                this.blocks[hash].menuAncestors = (
                  this.blocks[hash].menuAncestors || $()
                ).add($menuAncestors);
              }
            } else {
              this.blocks[hash].buttons = (
                this.blocks[hash].buttons || $()
              ).add($anchor);
            }
          }
          $anchor.on(
            "click",
            function (event) {
              event.preventDefault();
              this.scrollTo(hash, !0);
              if (typeof this.blocks[hash] !== "undefined") {
                var block = this.blocks[hash];
                if ($.inArray(block.type, ["tab", "tabs"]) !== -1) {
                  var $linkedSection = block.target.find(
                    '.w-tabs-section[id="' + hash.substr(1) + '"]'
                  );
                  if (block.type === "tabs") {
                    $linkedSection = block.target.find(".w-tabs-section:first");
                  } else if (block.target.hasClass("w-tabs-section")) {
                    $linkedSection = block.target;
                  }
                  if ($linkedSection.length) {
                    $linkedSection
                      .find(".w-tabs-section-header")
                      .trigger("click");
                  }
                } else if (
                  block.menuItems !== undefined &&
                  $.inArray($us.$body.usMod("state"), [
                    "mobiles",
                    "tablets",
                  ]) !== -1 &&
                  $us.$body.hasClass("header-show")
                ) {
                  $us.$body.removeClass("header-show");
                }
              }
            }.bind(this)
          );
        }.bind(this)
      );
    },
    getPlacePosition: function (place) {
      var data = { newY: 0, type: "" };
      if (place === "" || place === "#") {
        data.newY = 0;
        data.placeType = "top";
      } else if (this.blocks[place] !== undefined) {
        this._countPosition(place);
        data.newY = this.blocks[place].top;
        data.placeType = "hash";
        place = this.blocks[place].target;
      } else if (place instanceof $) {
        if (place.hasClass("w-tabs-section")) {
          var newPlace = place.closest(".w-tabs");
          if (!newPlace.hasClass("accordion")) {
            place = newPlace;
          }
        }
        data.newY = Math.floor(place.offset().top - this._canvasTopOffset);
        data.placeType = "element";
      } else {
        data.newY = Math.floor(place - this._canvasTopOffset);
      }
      if ($us.header.isHorizontal() && $us.canvas.hasStickySection()) {
        data.newY -= $us.canvas.getHeightStickySection();
      }
      return data;
    },
    scrollTo: function (place, animate) {
      var offset = this.getPlacePosition.call(this, place),
        indicateActive = function () {
          if (offset.type === "hash") {
            this._indicatePosition(place);
          } else {
            this.scroll();
          }
        }.bind(this);
      if (animate) {
        if (
          navigator.userAgent.match(/iPad/i) != null &&
          $(".us_iframe").length &&
          offset.type == "hash"
        ) {
          $(place)[0].scrollIntoView({ behavior: "smooth", block: "start" });
        }
        var scrollTop = parseInt($us.$window.scrollTop()),
          scrollDirections = scrollTop < offset.newY ? "down" : "up";
        if (scrollTop === offset.newY) {
          return;
        }
        if (
          !this.isScrolling &&
          $us.header.isHorizontal() &&
          !this._hasHeaderTransitionEnd
        ) {
          $us.header.trigger("transitionEnd");
          this._hasHeaderTransitionEnd = !0;
        }
        var animateOptions = {
          duration: this.options.animationDuration,
          easing: this.options.animationEasing,
          start: function () {
            this.isScrolling = !0;
          }.bind(this),
          complete: function () {
            this.cancel.call(this);
          }.bind(this),
          always: function () {
            this.isScrolling = !1;
            indicateActive();
          }.bind(this),
          step: function (now, fx) {
            var newY = this.getPlacePosition(place).newY;
            if ($us.header.isHorizontal() && $us.header.isStickyEnabled()) {
              newY -= this.headerHeight;
            }
            if (fx.end !== newY) {
              $us.$htmlBody
                .stop(!0, !1)
                .animate(
                  { scrollTop: newY + "px" },
                  $.extend(animateOptions, {
                    easing: this.options.endAnimationEasing,
                  })
                );
            }
          }.bind(this),
        };
        $us.$htmlBody
          .stop(!0, !1)
          .animate({ scrollTop: offset.newY + "px" }, animateOptions);
        $us.$window.on(
          "keydown mousewheel DOMMouseScroll touchstart",
          this._events.cancel
        );
      } else {
        if ($us.header.isStickyEnabled()) {
          $us.header.trigger("transitionEnd");
          offset.newY -= this.headerHeight;
        }
        $us.$htmlBody.stop(!0, !1).scrollTop(offset.newY);
        indicateActive();
      }
    },
    cancel: function () {
      $us.$htmlBody.stop(!0, !1);
      $us.$window.off(
        "keydown mousewheel DOMMouseScroll touchstart",
        this._events.cancel
      );
      this.isScrolling = !1;
    },
    scroll: function () {
      var scrollTop = $us.header.getScrollTop();
      scrollTop = scrollTop >= 0 ? scrollTop : 0;
      if (!this.isScrolling) {
        var activeHash;
        for (var hash in this.blocks) {
          if (!this.blocks[hash]) {
            continue;
          }
          var top = this.blocks[hash].top,
            $target = this.blocks[hash].target;
          if (!$us.header.isHorizontal()) {
            top -= $us.header.getAdminBarHeight();
          } else {
            if ($us.header.isStickyEnabled()) {
              top -= this.headerHeight;
            }
            if ($us.canvas.hasStickySection()) {
              top -= $us.canvas.getHeightStickySection();
            }
          }
          if (scrollTop >= top && scrollTop <= top + $target.outerHeight(!1)) {
            activeHash = hash;
          }
        }
        $us.debounce(this._indicatePosition.bind(this, activeHash), 1)();
      }
    },
    resize: function () {
      $us.timeout(
        function () {
          this._countAllPositions();
          this.scroll();
        }.bind(this),
        150
      );
      this._countAllPositions();
      this.scroll();
    },
  };
  $(function () {
    $us.scroll = new USScroll($us.scrollOptions || {});
  });
})(jQuery);
(function ($) {
  "use strict";
  var USAnimate = function (container) {
    this.$container = $(container);
    this.$items = $(
      ".animate_fade, .animate_afc, .animate_afl, .animate_afr, .animate_aft, " +
        ".animate_afb, .animate_wfc, .animate_hfc",
      this.$container
    ).not(".animate_off_autostart");
    this.$items.each(function (_, item) {
      var $item = $(item);
      if ($item.data("_animate_inited") || $item.is(".animate_off_autostart")) {
        return;
      }
      $item.data("_animate_inited", !0);
      $us.waypoints.add($item, "12%", function ($elm) {
        if (!$elm.hasClass("animate_start")) {
          $us.timeout(function () {
            $elm.addClass("animate_start");
          }, 20);
        }
      });
    });
  };
  window.USAnimate = USAnimate;
  new USAnimate(document);
  $(".wpb_animate_when_almost_visible").each(function () {
    $us.waypoints.add($(this), "12%", function ($elm) {
      if (!$elm.hasClass("wpb_start_animation")) {
        $us.timeout(function () {
          $elm.addClass("wpb_start_animation");
        }, 20);
      }
    });
  });
})(jQuery);
!(function ($) {
  "use strict";
  $us.CommnentsForm = function (container, options) {
    this.init(container, options);
  };
  $us.CommnentsForm.prototype = {
    init: function (container, options) {
      this.$container = $(container);
      this.$form = this.$container.find("form.comment-form");
      if (!this.$form.length) {
        return;
      }
      this.$jsonContainer = this.$container.find(".us-comments-json");
      if (!this.$jsonContainer.length) {
        return;
      }
      this.jsonData = this.$jsonContainer[0].onclick() || {};
      this.$jsonContainer.remove();
      this.$fields = {
        content: {
          field: this.$form.find("textarea"),
          msg: this.jsonData.no_content_msg || "Please enter a Message",
        },
        name: {
          field: this.$form.find('.for_text input[type="text"]'),
          msg: this.jsonData.no_name_msg || "Please enter your Name",
        },
        email: {
          field: this.$form.find('.for_email input[type="email"]'),
          msg:
            this.jsonData.no_email_msg || "Please enter a valid email address.",
        },
      };
      this._events = { formSubmit: this.formSubmit.bind(this) };
      this.$form.on("submit", this._events.formSubmit);
    },
    formSubmit: function (event) {
      this.$form.find(".w-form-row.check_wrong").removeClass("check_wrong");
      this.$form.find(".w-form-state").html("");
      for (var i in this.$fields) {
        if (this.$fields[i].field.length == 0) {
          continue;
        }
        if (
          this.$fields[i].field.val() == "" &&
          this.$fields[i].field.attr("data-required")
        ) {
          this.$fields[i].field
            .closest(".w-form-row")
            .toggleClass("check_wrong");
          this.$fields[i].field
            .closest(".w-form-row")
            .find(".w-form-row-state")
            .html(this.$fields[i].msg);
          event.preventDefault();
        }
      }
    },
  };
  $.fn.CommnentsForm = function (options) {
    return this.each(function () {
      $(this).data("CommnentsForm", new $us.CommnentsForm(this, options));
    });
  };
  $(function () {
    $(".w-post-elm.post_comments.layout_comments_template").CommnentsForm();
    $(".l-section.for_comments").CommnentsForm();
  });
})(jQuery);
!(function ($) {
  var USCounterNumber = function (container) {
    this.$container = $(container);
    this.initialString = this.$container.html() + "";
    this.finalString = this.$container.data("final") + "";
    this.format = this.getFormat(this.initialString, this.finalString);
    if (this.format.decMark) {
      var pattern = new RegExp("[^0-9/" + this.format.decMark + "]+", "g");
      this.initial = parseFloat(
        this.initialString
          .replace(pattern, "")
          .replace(this.format.decMark, ".")
      );
      this.final = parseFloat(
        this.finalString.replace(pattern, "").replace(this.format.decMark, ".")
      );
    } else {
      this.initial = parseInt(this.initialString.replace(/[^0-9]+/g, ""));
      this.final = parseInt(this.finalString.replace(/[^0-9]+/g, ""));
    }
    if (this.format.accounting) {
      if (this.initialString.length > 0 && this.initialString[0] == "(") {
        this.initial = -this.initial;
      }
      if (this.finalString.length > 0 && this.finalString[0] == "(") {
        this.final = -this.final;
      }
    }
  };
  USCounterNumber.prototype = {
    step: function (now) {
      var value = (1 - now) * this.initial + this.final * now,
        intPart =
          Math[this.format.decMark ? "floor" : "round"](value).toString(),
        result = "";
      if (this.format.zerofill) {
        intPart = "0".repeat(this.format.intDigits - intPart.length) + intPart;
      }
      if (this.format.groupMark) {
        if (this.format.indian) {
          result += intPart.replace(
            /(\d)(?=(\d\d)+\d$)/g,
            "$1" + this.format.groupMark
          );
        } else {
          result += intPart.replace(
            /\B(?=(\d{3})+(?!\d))/g,
            this.format.groupMark
          );
        }
      } else {
        result += intPart;
      }
      if (this.format.decMark) {
        var decimalPart = (value % 1)
          .toFixed(this.format.decDigits)
          .substring(2);
        result += this.format.decMark + decimalPart;
      }
      if (this.format.accounting && result.length > 0 && result[0] == "-") {
        result = "(" + result.substring(1) + ")";
      }
      this.$container.html(result);
    },
    getFormat: function (initial, final) {
      var iFormat = this._getFormat(initial),
        fFormat = this._getFormat(final),
        format = $.extend({}, iFormat, fFormat);
      if (format.groupMark == format.decMark) {
        delete format.groupMark;
      }
      return format;
    },
    _getFormat: function (str) {
      var marks = str.replace(/[0-9\(\)\-]+/g, ""),
        format = {};
      if (str.charAt(0) == "(") {
        format.accounting = !0;
      }
      if (/^0[0-9]/.test(str)) {
        format.zerofill = !0;
      }
      str = str.replace(/[\(\)\-]/g, "");
      if (marks.length != 0) {
        if (marks.length > 1) {
          format.groupMark = marks.charAt(0);
          if (marks.charAt(0) != marks.charAt(marks.length - 1)) {
            format.decMark = marks.charAt(marks.length - 1);
          }
          if (
            str.split(format.groupMark).length > 2 &&
            str.split(format.groupMark)[1].length == 2
          ) {
            format.indian = !0;
          }
        } else {
          format[
            str.length - 1 - str.indexOf(marks) == 3 && marks !== "."
              ? "groupMark"
              : "decMark"
          ] = marks;
        }
        if (format.decMark) {
          format.decDigits = str.length - str.indexOf(format.decMark) - 1;
        }
      }
      if (format.zerofill) {
        format.intDigits =
          str.replace(/[^\d]+/g, "").length - (format.decDigits || 0);
      }
      return format;
    },
  };
  var USCounterText = function (container) {
    this.$container = $(container);
    this.initial = this.$container.text() + "";
    this.final = this.$container.data("final") + "";
    this.partsStates = this.getStates(this.initial, this.final);
    this.len = 1 / (this.partsStates.length - 1);
    this.curState = 0;
  };
  USCounterText.prototype = {
    step: function (now) {
      var state = Math.round(Math.max(0, now / this.len));
      if (state == this.curState) {
        return;
      }
      this.$container.html(this.partsStates[state]);
      this.curState = state;
    },
    getStates: function (initial, final) {
      var dist = [],
        i,
        j;
      for (i = 0; i <= initial.length; i++) {
        dist[i] = [i];
      }
      for (j = 1; j <= final.length; j++) {
        dist[0][j] = j;
        for (i = 1; i <= initial.length; i++) {
          dist[i][j] =
            initial[i - 1] === final[j - 1]
              ? dist[i - 1][j - 1]
              : Math.min(dist[i - 1][j], dist[i][j - 1], dist[i - 1][j - 1]) +
                1;
        }
      }
      var states = [final];
      for (i = initial.length, j = final.length; i > 0 || j > 0; i--, j--) {
        var min = dist[i][j];
        if (i > 0) {
          min = Math.min(min, dist[i - 1][j], j > 0 ? dist[i - 1][j - 1] : min);
        }
        if (j > 0) {
          min = Math.min(min, dist[i][j - 1]);
        }
        if (min >= dist[i][j]) {
          continue;
        }
        if (min == dist[i][j - 1]) {
          states.unshift(
            states[0].substring(0, j - 1) + states[0].substring(j)
          );
          i++;
        } else if (min == dist[i - 1][j - 1]) {
          states.unshift(
            states[0].substring(0, j - 1) +
              initial[i - 1] +
              states[0].substring(j)
          );
        } else if (min == dist[i - 1][j]) {
          states.unshift(
            states[0].substring(0, j) + initial[i - 1] + states[0].substring(j)
          );
          j++;
        }
      }
      return states;
    },
  };
  var USCounter = function (container) {
    this.$container = $(container);
    this.parts = [];
    this.duration = parseInt(this.$container.data("duration") || 2000);
    this.$container.find(".w-counter-value-part").each(
      function (index, part) {
        var $part = $(part);
        if ($part.html() + "" == $part.data("final") + "") {
          return;
        }
        var type = $part.usMod("type");
        if (type == "number") {
          this.parts.push(new USCounterNumber($part));
        } else {
          this.parts.push(new USCounterText($part));
        }
      }.bind(this)
    );
    if (window.$us !== undefined && window.$us.scroll !== undefined) {
      $us.waypoints.add(this.$container, "15%", this.animate.bind(this));
    } else {
      this.animate();
    }
  };
  USCounter.prototype = {
    animate: function (duration) {
      this.$container
        .css("w-counter", 0)
        .animate(
          { "w-counter": 1 },
          { duration: this.duration, step: this.step.bind(this) }
        );
    },
    step: function (now) {
      for (var i = 0; i < this.parts.length; i++) {
        this.parts[i].step(now);
      }
    },
  };
  $.fn.wCounter = function (options) {
    return this.each(function () {
      $(this).data("wItext", new USCounter(this, options));
    });
  };
  $(function () {
    $(".w-counter").wCounter();
  });
})(jQuery);
(function ($) {
  "use strict";
  $.fn.wDropdown = function () {
    return this.each(function () {
      var $this = $(this),
        $list = $this.find(".w-dropdown-list"),
        $current = $this.find(".w-dropdown-current"),
        $currentAnchor = $current.find("a"),
        $anchors = $this.find("a"),
        openEventName = "click",
        closeEventName =
          "mouseup touchstart mousewheel DOMMouseScroll touchstart",
        justOpened = !1;
      if ($this.hasClass("open_on_hover")) {
        openEventName = "mouseenter";
        closeEventName = "mouseleave";
      }
      var closeList = function () {
        $this.removeClass("opened");
        $us.$window.off(closeEventName, closeListEvent);
      };
      var closeListEvent = function (e) {
        if (
          closeEventName != "mouseleave" &&
          $this.has(e.target).length !== 0
        ) {
          return;
        }
        e.stopPropagation();
        e.preventDefault();
        closeList();
      };
      var openList = function () {
        $this.addClass("opened");
        if (closeEventName == "mouseleave") {
          $this.on(closeEventName, closeListEvent);
        } else {
          $us.$window.on(closeEventName, closeListEvent);
        }
        justOpened = !0;
        $us.timeout(function () {
          justOpened = !1;
        }, 500);
      };
      var openListEvent = function (e) {
        if (
          openEventName == "click" &&
          $this.hasClass("opened") &&
          !justOpened
        ) {
          closeList();
          return;
        }
        openList();
      };
      $current.on(openEventName, openListEvent);
      $anchors.on("focus.upsolution", function () {
        openList();
      });
      $this.on("keydown", function (e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode == 9) {
          var $target = $(e.target) || {},
            index = $anchors.index($target);
          if (e.shiftKey) {
            if (index === 0) {
              closeList();
            }
          } else {
            if (index === $anchors.length - 1) {
              closeList();
            }
          }
        }
      });
    });
  };
  $(function () {
    $(".w-dropdown").wDropdown();
  });
})(jQuery);
jQuery(function ($) {
  $(".w-form.for_cform").each(function () {
    var $form = $(this),
      $submitBtn = $form.find(".w-btn"),
      $resultField = $form.find(".w-form-message"),
      options = $form.find(".w-form-json")[0].onclick(),
      $dateField = $form.find(".w-form-row.for_date input"),
      jQueryDatePickerPath = $form.data("jquery-ui"),
      pickerOptions = {},
      $requiredCheckboxes = $form.find(".for_checkboxes.required");
    $form.find(".w-form-json").remove();
    if ($dateField.length) {
      if (jQueryDatePickerPath !== undefined) {
        $us.getScript(jQueryDatePickerPath, function () {
          pickerOptions = $.extend(pickerOptions, options["jquery-ui-locale"]);
          initDateFields();
        });
      } else {
        initDateFields();
      }
      function initDateFields() {
        $dateField.each(function () {
          pickerOptions.dateFormat = $(this).data("date-format");
          pickerOptions.onClose = function () {
            $(this).closest(".w-form-row").removeClass("focused");
          };
          $(this).datepicker(pickerOptions);
        });
      }
    }
    $form.submit(function (event) {
      event.preventDefault();
      if ($submitBtn.hasClass("loading")) {
        return;
      }
      $resultField.usMod("type", !1).html("");
      var errors = 0;
      $form.find('[data-required="true"]').each(function () {
        var $input = $(this),
          isEmpty = $input.is('[type="checkbox"]')
            ? !$input.is(":checked")
            : $input.val() == "",
          $row = $input.closest(".w-form-row");
        if ($row.hasClass("for_checkboxes")) {
          return !0;
        }
        $row.toggleClass("check_wrong", isEmpty);
        if (isEmpty) {
          errors++;
        }
      });
      if ($requiredCheckboxes.length) {
        $requiredCheckboxes.each(function () {
          var $input = $(this).find('input[type="checkbox"]'),
            $row = $input.closest(".w-form-row"),
            isEmpty = !$input.is(":checked") ? !0 : !1;
          $row.toggleClass("check_wrong", isEmpty);
          if (isEmpty) {
            errors++;
          }
        });
      }
      if (errors !== 0) {
        return;
      }
      $submitBtn.addClass("loading");
      $.ajax({
        type: "POST",
        url: options.ajaxurl,
        dataType: "json",
        data: $form.serialize(),
        success: function (result) {
          if (result.success) {
            $resultField.usMod("type", "success").html(result.data);
            $form.find(".w-form-row.check_wrong").removeClass("check_wrong");
            $form.find(".w-form-row.not-empty").removeClass("not-empty");
            $form
              .find('input[type="text"], input[type="email"], textarea')
              .val("");
            $form[0].reset();
            $form.trigger("usCformSuccess");
          } else {
            $form.find(".w-form-row.check_wrong").removeClass("check_wrong");
            if (result.data && typeof result.data == "object") {
              for (var fieldName in result.data) {
                if (fieldName == "empty_message") {
                  $resultField.usMod("type", "error");
                  continue;
                }
                if (!result.data.hasOwnProperty(fieldName)) {
                  continue;
                }
                fieldName = result.data[fieldName].name;
                var $input = $form.find('[name="' + fieldName + '"]');
                $input.closest(".w-form-row").addClass("check_wrong");
              }
            } else {
              $resultField.usMod("type", "error").html(result.data);
            }
          }
        },
        complete: function () {
          $submitBtn.removeClass("loading");
        },
      });
    });
  });
});
jQuery(function ($) {
  $(
    'input[type="text"], input[type="email"], input[type="tel"], input[type="number"], input[type="date"], input[type="search"], input[type="url"], input[type="password"], textarea'
  ).each(function (index, input) {
    var $input = $(input),
      $row = $input.closest(".w-form-row");
    if ($input.attr("type") == "hidden") {
      return;
    }
    $row.toggleClass("not-empty", $input.val() != "");
    $input.on("input change", function () {
      $row.toggleClass("not-empty", $input.val() != "");
    });
  });
  $(document).on(
    "focus",
    ".w-form-row-field input, .w-form-row-field textarea",
    function () {
      $(this).closest(".w-form-row").addClass("focused");
    }
  );
  $(document).on(
    "blur",
    ".w-form-row:not(.for_date) input, .w-form-row-field textarea",
    function () {
      $(this).closest(".w-form-row").removeClass("focused");
    }
  );
});
!(function ($) {
  "use strict";
  $us.WFlipBox = function (container) {
    this.$container = $(container);
    this.$front = this.$container.find(".w-flipbox-front");
    this.$frontH = this.$container.find(".w-flipbox-front-h");
    this.$back = this.$container.find(".w-flipbox-back");
    this.$backH = this.$container.find(".w-flipbox-back-h");
    this.$xFlank = this.$container.find(".w-flipbox-xflank");
    this.$yFlank = this.$container.find(".w-flipbox-yflank");
    this.$btn = this.$container.find(".w-btn");
    if (!!window.MSInputMethodContext && !!document.documentMode) {
      this.$container
        .usMod("animation", "cardflip")
        .find(".w-flipbox-h")
        .css({
          "transition-duration": "0s",
          "-webkit-transition-duration": "0s",
        });
    }
    var isWebkit = "WebkitAppearance" in document.documentElement.style;
    if (
      isWebkit &&
      this.$container.usMod("animation") === "cubeflip" &&
      this.$btn.length
    ) {
      this.$container.usMod("animation", "cubetilt");
    }
    var animation = this.$container.usMod("animation"),
      direction = this.$container.usMod("direction");
    this.forceSquare =
      animation == "cubeflip" &&
      ["ne", "se", "sw", "nw"].indexOf(direction) != -1;
    this.autoSize = this.$front[0].style.height == "" && !this.forceSquare;
    this.centerContent = this.$container.usMod("valign") == "center";
    if (this._events === undefined) {
      this._events = {};
    }
    $.extend(this._events, { resize: this.resize.bind(this) });
    if (this.centerContent || this.autoSize) {
      this.padding = parseInt(this.$front.css("padding-top"));
    }
    if (this.centerContent || this.forceSquare || this.autoSize) {
      $us.$window.bind("resize load", this._events.resize);
      this.resize();
    }
    this.makeHoverable(".w-btn");
    $us.timeout(
      function () {
        this.$back.css("display", "");
        this.$yFlank.css("display", "");
        this.$xFlank.css("display", "");
        this.resize();
      }.bind(this),
      250
    );
  };
  $us.WFlipBox.prototype = {
    resize: function () {
      var width = this.$container.width(),
        height;
      if (this.autoSize || this.centerContent) {
        var frontContentHeight = this.$frontH.height(),
          backContentHeight = this.$backH.height();
      }
      if (this.forceSquare || this.autoSize) {
        height = this.forceSquare
          ? width
          : Math.max(frontContentHeight, backContentHeight) + 2 * this.padding;
        this.$front.css("height", height + "px");
      } else {
        height = this.$container.height();
      }
      if (this.centerContent) {
        this.$front.css(
          "padding-top",
          Math.max(this.padding, (height - frontContentHeight) / 2)
        );
        this.$back.css(
          "padding-top",
          Math.max(this.padding, (height - backContentHeight) / 2)
        );
      }
    },
    makeHoverable: function (exclude) {
      if (this._events === undefined) {
        this._events = {};
      }
      if (jQuery.isMobile) {
        this._events.touchHoverStart = function () {
          this.$container.toggleClass("hover");
        }.bind(this);
        this.$container.on("touchstart", this._events.touchHoverStart);
        if (exclude) {
          this._events.touchHoverPrevent = function (e) {
            e.stopPropagation();
          };
          this.$container
            .find(exclude)
            .on("touchstart", this._events.touchHoverPrevent);
        }
      } else {
        this._mouseInside = !1;
        this._focused = !1;
        $.extend(this._events, {
          mouseHoverStart: function () {
            this.$container.addClass("hover");
            this._mouseInside = !0;
          }.bind(this),
          mouseHoverEnd: function () {
            if (!this._focused) {
              this.$container.removeClass("hover");
            }
            this._mouseInside = !1;
          }.bind(this),
          focus: function () {
            this.$container.addClass("hover");
            this._focused = !0;
          }.bind(this),
          blur: function () {
            if (!this._mouseInside) {
              this.$container.removeClass("hover");
            }
            this._focused = !1;
          }.bind(this),
        });
        this.$container.on("mouseenter", this._events.mouseHoverStart);
        this.$container.on("mouseleave", this._events.mouseHoverEnd);
        this.$focusable = this.$container.find("a").addBack("a");
        this.$focusable.on("focus", this._events.focus);
        this.$focusable.on("blur", this._events.blur);
      }
    },
  };
  $.fn.wFlipBox = function (options) {
    return this.each(function () {
      $(this).data("wFlipBox", new $us.WFlipBox(this, options));
    });
  };
  $(function () {
    $(".w-flipbox").wFlipBox();
  });
})(jQuery);
!(function ($) {
  "use strict";
  $us.WMapsGeocodesCounter = 0;
  $us.WMapsGeocodesRunning = !1;
  $us.WMapsCurrentGeocode = 0;
  $us.WMapsGeocodesMax = 5;
  $us.WMapsGeocodesStack = {};
  $us.WMapsRunGeoCode = function () {
    if ($us.WMapsCurrentGeocode <= $us.WMapsGeocodesCounter) {
      $us.WMapsGeocodesRunning = !0;
      if ($us.WMapsGeocodesStack[$us.WMapsCurrentGeocode] != null) {
        $us.WMapsGeocodesStack[$us.WMapsCurrentGeocode]();
      }
    } else {
      $us.WMapsGeocodesRunning = !1;
    }
  };
  $us.WMaps = function (container, options) {
    this.$container = $(container);
    if (this.$container.data("mapInit") == 1) {
      return;
    }
    this.$container.data("mapInit", 1);
    var $jsonContainer = this.$container.find(".w-map-json"),
      jsonOptions = $jsonContainer[0].onclick() || {},
      $jsonStyleContainer = this.$container.find(".w-map-style-json"),
      jsonStyleOptions,
      shouldRunGeoCode = !1;
    $jsonContainer.remove();
    if ($jsonStyleContainer.length) {
      jsonStyleOptions = $jsonStyleContainer[0].onclick() || {};
      $jsonStyleContainer.remove();
    }
    var defaults = {};
    this.options = $.extend({}, defaults, jsonOptions, options);
    this._events = { redraw: this.redraw.bind(this) };
    var gmapsOptions = {
      el: "#" + this.$container.attr("id"),
      lat: 0,
      lng: 0,
      zoom: this.options.zoom,
      type: this.options.type,
      height: this.options.height + "px",
      width: "100%",
      mapTypeId: google.maps.MapTypeId[this.options.maptype],
    };
    if (this.options.hideControls) {
      gmapsOptions.disableDefaultUI = !0;
    }
    if (this.options.disableZoom) {
      gmapsOptions.scrollwheel = !1;
    }
    if (this.options.disableDragging && !$us.$html.hasClass("no-touch")) {
      gmapsOptions.draggable = !1;
    }
    if (this.options.mapBgColor) {
      gmapsOptions.backgroundColor = this.options.mapBgColor;
    }
    this.GMapsObj = new GMaps(gmapsOptions);
    if (jsonStyleOptions != null && jsonStyleOptions != {}) {
      this.GMapsObj.map.setOptions({ styles: jsonStyleOptions });
    }
    var matches = this.options.address.match(
        /^(-?\d+.\d+)\s?,?\s?(-?\d+.\d+)$/
      ),
      that = this;
    if (matches) {
      this.options.latitude = matches[1];
      this.options.longitude = matches[2];
      this.GMapsObj.setCenter(this.options.latitude, this.options.longitude);
    } else {
      var mapGeoCode = function () {
        GMaps.geocode({
          address: that.options.address,
          callback: function (results, status) {
            if (status == "OK") {
              var latlng = results[0].geometry.location;
              that.options.latitude = latlng.lat();
              that.options.longitude = latlng.lng();
              that.GMapsObj.setCenter(
                that.options.latitude,
                that.options.longitude
              );
              $us.WMapsCurrentGeocode++;
              $us.WMapsRunGeoCode();
            } else if (status == "OVER_QUERY_LIMIT") {
              $us.timeout(function () {
                $us.WMapsRunGeoCode();
              }, 2000);
            }
          },
        });
      };
      shouldRunGeoCode = !0;
      $us.WMapsGeocodesStack[$us.WMapsGeocodesCounter] = mapGeoCode;
      $us.WMapsGeocodesCounter++;
    }
    $.each(this.options.markers, function (i, val) {
      var markerOptions = {};
      if (
        that.options.icon != null ||
        that.options.markers[i].marker_img != null
      ) {
        var url, size, width, height;
        if (that.options.markers[i].marker_img != null) {
          url = that.options.markers[i].marker_img[0];
          width = parseInt(that.options.markers[i].marker_size[0]);
          height = parseInt(that.options.markers[i].marker_size[1]);
          size = new google.maps.Size(width, height);
        } else {
          url = that.options.icon.url;
          size = new google.maps.Size(
            that.options.icon.size[0],
            that.options.icon.size[1]
          );
        }
        markerOptions.icon = { url: url, size: size, scaledSize: size };
      }
      if (that.options.markers[i] != null) {
        var matches = that.options.markers[i].address.match(
          /^(-?\d+.\d+)\s?,?\s?(-?\d+.\d+)$/
        );
        if (matches) {
          markerOptions.lat = matches[1];
          markerOptions.lng = matches[2];
          if (that.options.markers[i].html) {
            markerOptions.infoWindow = {
              content: that.options.markers[i].html,
            };
          }
          var marker = that.GMapsObj.addMarker(markerOptions);
          if (that.options.markers[i].infowindow) {
            marker.infoWindow.open(that.GMapsObj.map, marker);
          }
        } else {
          var markerGeoCode = function () {
            GMaps.geocode({
              address: that.options.markers[i].address,
              callback: function (results, status) {
                if (status == "OK") {
                  var latlng = results[0].geometry.location;
                  markerOptions.lat = latlng.lat();
                  markerOptions.lng = latlng.lng();
                  markerOptions.infoWindow = {
                    content: that.options.markers[i].html,
                  };
                  var marker = that.GMapsObj.addMarker(markerOptions);
                  if (that.options.markers[i].infowindow) {
                    marker.infoWindow.open(that.GMapsObj.map, marker);
                  }
                  $us.WMapsCurrentGeocode++;
                  $us.WMapsRunGeoCode();
                } else if (status == "OVER_QUERY_LIMIT") {
                  $us.timeout(function () {
                    $us.WMapsRunGeoCode();
                  }, 2000);
                }
              },
            });
          };
          shouldRunGeoCode = !0;
          $us.WMapsGeocodesStack[$us.WMapsGeocodesCounter] = markerGeoCode;
          $us.WMapsGeocodesCounter++;
        }
      }
    });
    if (shouldRunGeoCode && !$us.WMapsGeocodesRunning) {
      $us.WMapsRunGeoCode();
    }
    $us.$canvas.on("contentChange", this._events.redraw);
    $us.$window.on("load", this._events.redraw);
  };
  $us.WMaps.prototype = {
    redraw: function () {
      if (this.$container.is(":hidden")) {
        return;
      }
      this.GMapsObj.refresh();
      if (this.options.latitude != null && this.options.longitude != null) {
        this.GMapsObj.setCenter(this.options.latitude, this.options.longitude);
      }
    },
  };
  $.fn.wMaps = function (options) {
    return this.each(function () {
      $(this).data("wMaps", new $us.WMaps(this, options));
    });
  };
  $(function () {
    var $wMap = $(".w-map.provider_google");
    if ($wMap.length) {
      $us.getScript(
        $us.templateDirectoryUri + "/common/js/vendor/gmaps.js",
        function () {
          $wMap.wMaps();
        }
      );
    }
  });
})(jQuery);
(function ($, undefined) {
  "use strict";
  $us.WGrid = function (container, options) {
    this.init(container, options);
  };
  $us.WGrid.prototype = {
    init: function (container, options) {
      this.$container = $(container);
      this.$filters = $(".g-filters-item", this.$container);
      this.$items = $(".w-grid-item", this.$container);
      this.$list = $(".w-grid-list", this.$container);
      this.$loadmore = $(".g-loadmore", this.$container);
      this.$pagination = $("> .pagination", this.$container);
      this.$preloader = $(".w-grid-preloader", this.$container);
      this.$style = $("> style:first", this.$container);
      this.loading = !1;
      this.changeUpdateState = !1;
      this.gridFilter = null;
      this.curFilterTaxonomy = "";
      this.paginationType = this.$pagination.length
        ? "regular"
        : this.$loadmore.length
        ? "ajax"
        : "none";
      this.filterTaxonomyName = this.$list.data("filter_taxonomy_name")
        ? this.$list.data("filter_taxonomy_name")
        : "category";
      if (this.$container.data("gridInit") == 1) {
        return;
      }
      this.$container.data("gridInit", 1);
      var $jsonContainer = $(".w-grid-json", this.$container);
      if ($jsonContainer.length && $jsonContainer.is("[onclick]")) {
        this.ajaxData = $jsonContainer[0].onclick() || {};
        this.ajaxUrl = this.ajaxData.ajax_url || "";
        $jsonContainer.remove();
      } else {
        this.ajaxData = {};
        this.ajaxUrl = "";
      }
      this.carouselSettings = this.ajaxData.carousel_settings;
      this.breakpoints = this.ajaxData.carousel_breakpoints || {};
      if ($us.detectIE() == 11) {
        $us.getScript(
          $us.templateDirectoryUri + "/common/js/vendor/objectFitPolyfill.js",
          function () {
            objectFitPolyfill();
          }
        );
      }
      if (this.$list.hasClass("owl-carousel")) {
        $us.getScript(
          $us.templateDirectoryUri + "/common/js/vendor/owl.carousel.js",
          function () {
            this.carouselOptions = {
              autoHeight: this.carouselSettings.autoHeight,
              autoplay: this.carouselSettings.autoplay,
              autoplayHoverPause: !0,
              autoplayTimeout: this.carouselSettings.timeout,
              center: this.carouselSettings.center,
              dots: this.carouselSettings.dots,
              items: parseInt(this.carouselSettings.items),
              loop: this.carouselSettings.loop,
              mouseDrag: !jQuery.isMobile,
              nav: this.carouselSettings.nav,
              navElement: "div",
              navText: ["", ""],
              responsive: {},
              rewind: !this.carouselSettings.loop,
              stagePadding: 0,
              rtl: $(".l-body").hasClass("rtl"),
              slideBy: this.carouselSettings.slideby,
              slideTransition: this.carouselSettings.transition,
              smartSpeed: this.carouselSettings.speed,
            };
            if (this.carouselSettings.smooth_play == 1) {
              this.carouselOptions.slideTransition = "linear";
              this.carouselOptions.autoplaySpeed =
                this.carouselSettings.timeout;
              this.carouselOptions.slideBy = 1;
            }
            if (this.carouselSettings.carousel_fade) {
              $.extend(this.carouselOptions, {
                animateOut: "fadeOut",
                animateIn: "fadeIn",
              });
            }
            $.each(
              this.breakpoints,
              function (breakpointWidth, breakpointArgs) {
                if (
                  breakpointArgs !== undefined &&
                  breakpointArgs.items !== undefined
                ) {
                  this.carouselOptions.responsive[breakpointWidth] =
                    breakpointArgs;
                  this.carouselOptions.responsive[breakpointWidth].items =
                    parseInt(breakpointArgs.items);
                }
              }.bind(this)
            );
            this.$list
              .on("initialized.owl.carousel", function (e) {
                var $list = $(this);
                $("[data-toggle-height]", e.currentTarget).each(function (
                  _,
                  item
                ) {
                  var usToggle = $(item).data("usToggleMoreContent");
                  if (usToggle instanceof $us.ToggleMoreContent) {
                    usToggle.initHeightCheck();
                    $us.timeout(function () {
                      $list.trigger("refresh.owl.carousel");
                    }, 1);
                  }
                });
                if (
                  $.isMobile &&
                  $list.closest(".w-tabs-section.active").length
                ) {
                  $us.timeout(function () {
                    $list.trigger("refresh.owl.carousel");
                  }, 50);
                }
              })
              .on("mousedown.owl.core", function () {
                var $target = $(this);
                if (
                  $("[data-toggle-height]", $target).length &&
                  !jQuery.isMobile
                ) {
                  var owlCarousel = $target.data("owl.carousel");
                  owlCarousel.$stage.off("mousedown.owl.core");
                }
              });
            this.$list.owlCarousel(this.carouselOptions);
          }.bind(this)
        );
      }
      if (this.$container.hasClass("popup_page")) {
        if (this.ajaxData == undefined) {
          return;
        }
        this.lightboxTimer = null;
        this.$lightboxOverlay = this.$container.find(".l-popup-overlay");
        this.$lightboxWrap = this.$container.find(".l-popup-wrap");
        this.$lightboxBox = this.$container.find(".l-popup-box");
        this.$lightboxContent = this.$container.find(".l-popup-box-content");
        this.$lightboxContentPreloader =
          this.$lightboxContent.find(".g-preloader");
        this.$lightboxContentFrame = this.$container.find(
          ".l-popup-box-content-frame"
        );
        this.$lightboxNextArrow = this.$container.find(
          ".l-popup-arrow.to_next"
        );
        this.$lightboxPrevArrow = this.$container.find(
          ".l-popup-arrow.to_prev"
        );
        this.$container.find(".l-popup-closer").click(
          function () {
            this.hideLightbox();
          }.bind(this)
        );
        this.$container.find(".l-popup-box").click(
          function () {
            this.hideLightbox();
          }.bind(this)
        );
        this.$container.find(".l-popup-box-content").click(
          function (e) {
            e.stopPropagation();
          }.bind(this)
        );
        this.originalURL = window.location.href;
        this.lightboxOpened = !1;
        if (this.$list.hasClass("owl-carousel")) {
          $us.getScript(
            $us.templateDirectoryUri + "/common/js/vendor/owl.carousel.js",
            function () {
              this.initLightboxAnchors();
            }.bind(this)
          );
        } else {
          this.initLightboxAnchors();
        }
        $(window).on(
          "resize",
          function () {
            if (
              this.lightboxOpened &&
              $us.$window.width() < $us.canvasOptions.disableEffectsWidth
            ) {
              this.hideLightbox();
            }
          }.bind(this)
        );
      }
      if (this.$list.hasClass("owl-carousel")) {
        return;
      }
      if (this.paginationType != "none" || this.$filters.length) {
        if (this.ajaxData == undefined) {
          return;
        }
        this.templateVars = this.ajaxData.template_vars || {};
        if (this.filterTaxonomyName) {
          this.initialFilterTaxonomy = this.$list.data(
            "filter_default_taxonomies"
          )
            ? this.$list.data("filter_default_taxonomies").split(",")
            : "";
          this.curFilterTaxonomy = this.initialFilterTaxonomy;
        }
        this.curPage = this.ajaxData.current_page || 1;
        this.perpage = this.ajaxData.perpage || this.$items.length;
        this.infiniteScroll = this.ajaxData.infinite_scroll || 0;
      }
      if (this.$container.hasClass("with_isotope")) {
        $us.getScript(
          $us.templateDirectoryUri + "/common/js/vendor/isotope.js",
          function () {
            this.$list.imagesLoaded(
              function () {
                var smallestItemSelector,
                  isotopeOptions = {
                    itemSelector: ".w-grid-item",
                    layoutMode: this.$container.hasClass("isotope_fit_rows")
                      ? "fitRows"
                      : "masonry",
                    isOriginLeft: !$(".l-body").hasClass("rtl"),
                    transitionDuration: 0,
                  };
                if (this.$list.find(".size_1x1").length) {
                  smallestItemSelector = ".size_1x1";
                } else if (this.$list.find(".size_1x2").length) {
                  smallestItemSelector = ".size_1x2";
                } else if (this.$list.find(".size_2x1").length) {
                  smallestItemSelector = ".size_2x1";
                } else if (this.$list.find(".size_2x2").length) {
                  smallestItemSelector = ".size_2x2";
                }
                if (smallestItemSelector) {
                  smallestItemSelector = smallestItemSelector || ".w-grid-item";
                  isotopeOptions.masonry = {
                    columnWidth: smallestItemSelector,
                  };
                }
                this.$list.on(
                  "layoutComplete",
                  function () {
                    if (window.USAnimate) {
                      $(
                        ".w-grid-item.animate_off_autostart",
                        this.$list
                      ).removeClass("animate_off_autostart");
                      new USAnimate(this.$list);
                    }
                    $us.$window.trigger("scroll.waypoints");
                  }.bind(this)
                );
                this.$list.isotope(isotopeOptions);
                if (this.paginationType == "ajax") {
                  this.initAjaxPagination();
                }
                $us.$canvas.on(
                  "contentChange",
                  function () {
                    this.$list.imagesLoaded(
                      function () {
                        this.$list.isotope("layout");
                      }.bind(this)
                    );
                  }.bind(this)
                );
              }.bind(this)
            );
          }.bind(this)
        );
      } else if (this.paginationType == "ajax") {
        this.initAjaxPagination();
      }
      this.$filters.each(
        function (index, filter) {
          var $filter = $(filter),
            taxonomy = $filter.data("taxonomy");
          $filter.on(
            "click",
            function () {
              if (taxonomy != this.curFilterTaxonomy) {
                if (this.loading) {
                  return;
                }
                this.setState(1, taxonomy);
                this.$filters.removeClass("active");
                $filter.addClass("active");
              }
            }.bind(this)
          );
        }.bind(this)
      );
      if (this.$container.closest(".l-main").length) {
        $us.$body
          .on("us_grid.updateState", this._events.updateState.bind(this))
          .on("us_grid.updateOrderBy", this._events.updateOrderBy.bind(this));
      }
      this.$list.on(
        "click",
        "[ref=magnificPopup]",
        this._events.initMagnificPopup.bind(this)
      );
    },
    _events: {
      updateState: function (e, params, page, gridFilter) {
        if (
          !this.$container.is('[data-filterable="true"]') ||
          !this.$container.hasClass("used_by_grid_filter")
        ) {
          return;
        }
        page = page || 1;
        this.changeUpdateState = !0;
        this.gridFilter = gridFilter;
        if (this.ajaxData === undefined) {
          this.ajaxData = {};
        }
        if (!this.hasOwnProperty("templateVars")) {
          this.templateVars = this.ajaxData.template_vars || { query_args: {} };
        }
        this.templateVars.us_grid_filter_params = params;
        if (this.templateVars.query_args !== !1) {
          this.templateVars.query_args.paged = page;
        }
        this.templateVars.filters_args = gridFilter.filtersArgs || {};
        this.setState(page);
        if (
          this.paginationType === "regular" &&
          /page(=|\/)/.test(location.href)
        ) {
          var url = location.href.replace(
            /(page(=|\/))(\d+)(\/?)/,
            "$1" + page + "$2"
          );
          history.replaceState(document.title, document.title, url);
        }
      },
      updateOrderBy: function (e, orderby, page, gridOrder) {
        if (
          !this.$container.is('[data-filterable="true"]') ||
          !this.$container.hasClass("used_by_grid_order")
        ) {
          return;
        }
        page = page || 1;
        this.changeUpdateState = !0;
        if (!this.hasOwnProperty("templateVars")) {
          this.templateVars = this.ajaxData.template_vars || { query_args: {} };
        }
        if (this.templateVars.query_args !== !1) {
          this.templateVars.query_args.paged = page;
        }
        this.templateVars.grid_orderby = orderby;
        this.setState(page);
      },
      initMagnificPopup: function (e) {
        e.stopPropagation();
        e.preventDefault();
        var $target = $(e.currentTarget);
        if ($target.data("magnificPopup") === undefined) {
          $target.magnificPopup({ type: "image", mainClass: "mfp-fade" });
          $target.trigger("click");
        }
      },
    },
    initLightboxAnchors: function () {
      this.$anchors = this.$list.find(".w-grid-item-anchor");
      this.$anchors.on(
        "click",
        function (e) {
          var $clicked = $(e.target),
            $item = $clicked.closest(".w-grid-item"),
            $anchor = $item.find(".w-grid-item-anchor"),
            itemUrl = $anchor.attr("href");
          if (!$item.hasClass("custom-link")) {
            if ($us.$window.width() >= $us.canvasOptions.disableEffectsWidth) {
              e.stopPropagation();
              e.preventDefault();
              this.openLightboxItem(itemUrl, $item);
            }
          }
        }.bind(this)
      );
    },
    initAjaxPagination: function () {
      this.$loadmore.on(
        "click",
        function () {
          if (this.curPage < this.ajaxData.max_num_pages) {
            this.setState(this.curPage + 1);
          }
        }.bind(this)
      );
      if (this.infiniteScroll) {
        $us.waypoints.add(
          this.$loadmore,
          "-70%",
          function () {
            if (!this.loading) {
              this.$loadmore.click();
            }
          }.bind(this)
        );
      }
    },
    setState: function (page, taxonomy) {
      if (this.loading && !this.changeUpdateState) {
        return;
      }
      if (
        page !== 1 &&
        this.paginationType == "ajax" &&
        this.none !== undefined &&
        this.none == !0
      ) {
        return;
      }
      this.none = !1;
      this.loading = !0;
      var $none = this.$container.find("> .w-grid-none");
      if ($none.length) {
        $none.hide();
      }
      if (this.$filters.length && !this.changeUpdateState) {
        taxonomy = taxonomy || this.curFilterTaxonomy;
        if (taxonomy == "*") {
          taxonomy = this.initialFilterTaxonomy;
        }
        if (taxonomy != "") {
          var newTaxArgs = {
              taxonomy: this.filterTaxonomyName,
              field: "slug",
              terms: taxonomy,
            },
            taxQueryFound = !1;
          if (this.templateVars.query_args.tax_query == undefined) {
            this.templateVars.query_args.tax_query = [];
          } else {
            $.each(
              this.templateVars.query_args.tax_query,
              function (index, taxArgs) {
                if (
                  taxArgs != null &&
                  taxArgs.taxonomy == this.filterTaxonomyName
                ) {
                  this.templateVars.query_args.tax_query[index] = newTaxArgs;
                  taxQueryFound = !0;
                  return !1;
                }
              }.bind(this)
            );
          }
          if (!taxQueryFound) {
            this.templateVars.query_args.tax_query.push(newTaxArgs);
          }
        } else if (this.templateVars.query_args.tax_query != undefined) {
          $.each(
            this.templateVars.query_args.tax_query,
            function (index, taxArgs) {
              if (
                taxArgs != null &&
                taxArgs.taxonomy == this.filterTaxonomyName
              ) {
                this.templateVars.query_args.tax_query[index] = null;
                return !1;
              }
            }.bind(this)
          );
        }
      }
      this.templateVars.query_args.paged = page;
      if (this.paginationType == "ajax") {
        if (page == 1) {
          this.$loadmore.addClass("done");
        } else {
          this.$loadmore.addClass("loading");
        }
        if (!this.infiniteScroll) {
          this.prevScrollTop = $us.$window.scrollTop();
        }
      }
      if (this.paginationType != "ajax" || page == 1) {
        this.$preloader.addClass("active");
        if (this.$list.data("isotope")) {
          this.$list.isotope("remove", this.$container.find(".w-grid-item"));
          this.$list.isotope("layout");
        } else {
          this.$container.find(".w-grid-item").remove();
        }
      }
      this.ajaxData.template_vars = JSON.stringify(this.templateVars);
      var isotope = this.$list.data("isotope");
      if (isotope && page == 1) {
        this.$list.html("");
        isotope.remove(isotope.items);
        isotope.reloadItems();
      }
      if (this.xhr !== undefined) {
        this.xhr.abort();
      }
      this.xhr = $.ajax({
        type: "post",
        url: this.ajaxData.ajax_url,
        data: this.ajaxData,
        success: function (html) {
          var $result = $(html),
            $container = $(".w-grid-list", $result),
            $pagination = $(".pagination > *", $result),
            $items = $container.children(),
            smallestItemSelector;
          $container.imagesLoaded(
            function () {
              this.beforeAppendItems($items);
              $items.appendTo(this.$list);
              $container.html("");
              var $sliders = $items.find(".w-slider");
              this.afterAppendItems($items);
              if (isotope) {
                isotope.insert($items);
                isotope.reloadItems();
              }
              if ($sliders.length) {
                $us.getScript(
                  $us.templateDirectoryUri + "/common/js/vendor/royalslider.js",
                  function () {
                    $sliders.each(
                      function (index, slider) {
                        $(slider)
                          .wSlider()
                          .find(".royalSlider")
                          .data("royalSlider")
                          .ev.on("rsAfterInit", function () {
                            if (isotope) {
                              this.$list.isotope("layout");
                            }
                          });
                      }.bind(this)
                    );
                  }.bind(this)
                );
              }
              if (isotope) {
                if (this.$list.find(".size_1x1").length) {
                  smallestItemSelector = ".size_1x1";
                } else if (this.$list.find(".size_1x2").length) {
                  smallestItemSelector = ".size_1x2";
                } else if (this.$list.find(".size_2x1").length) {
                  smallestItemSelector = ".size_2x1";
                } else if (this.$list.find(".size_2x2").length) {
                  smallestItemSelector = ".size_2x2";
                }
                if (isotope.options.masonry) {
                  isotope.options.masonry.columnWidth =
                    smallestItemSelector || ".w-grid-item";
                }
                this.$list.isotope("layout");
                this.$list.trigger("layoutComplete");
              }
              if (this.paginationType == "ajax") {
                if ($items.find(".w-tabs").length > 0) {
                  $(".w-tabs", $items).each(function () {
                    $(this).wTabs();
                  });
                }
                if (page == 1) {
                  var $jsonContainer = $result.find(".w-grid-json");
                  if ($jsonContainer.length) {
                    var ajaxData = $jsonContainer[0].onclick() || {};
                    this.ajaxData.max_num_pages =
                      ajaxData.max_num_pages || this.ajaxData.max_num_pages;
                  } else {
                    this.ajaxData.max_num_pages = 1;
                  }
                }
                if (
                  this.templateVars.query_args.paged >=
                    this.ajaxData.max_num_pages ||
                  !$items.length
                ) {
                  this.$loadmore.addClass("done");
                } else {
                  this.$loadmore.removeClass("done");
                  this.$loadmore.removeClass("loading");
                }
                if (this.infiniteScroll) {
                  $us.waypoints.add(
                    this.$loadmore,
                    "-70%",
                    function () {
                      if (!this.loading) {
                        this.$loadmore.click();
                      }
                    }.bind(this)
                  );
                } else if (
                  Math.round(this.prevScrollTop) !=
                  Math.round($us.$window.scrollTop())
                ) {
                  $us.$window.scrollTop(this.prevScrollTop);
                }
                if ($us.detectIE() == 11) {
                  objectFitPolyfill();
                }
              } else if (
                this.paginationType === "regular" &&
                this.changeUpdateState
              ) {
                $("a[href]", $pagination).each(function (_, item) {
                  var $item = $(item),
                    pathname = location.pathname.replace(
                      /((\/page.*)?)\/$/,
                      ""
                    );
                  $item.attr("href", pathname + $item.attr("href"));
                });
                this.$pagination.html($pagination);
              }
              if (this.$container.hasClass("popup_page")) {
                $.each(
                  $items,
                  function (index, item) {
                    var $loadedItem = $(item),
                      $anchor = $loadedItem.find(".w-grid-item-anchor"),
                      itemUrl = $anchor.attr("href");
                    if (!$loadedItem.hasClass("custom-link")) {
                      $anchor.click(
                        function (e) {
                          if (
                            $us.$window.width() >=
                            $us.canvasOptions.disableEffectsWidth
                          ) {
                            e.stopPropagation();
                            e.preventDefault();
                            this.openLightboxItem(itemUrl, $loadedItem);
                          }
                        }.bind(this)
                      );
                    }
                  }.bind(this)
                );
              }
              if (
                this.changeUpdateState &&
                $result.find(".w-grid-none").length
              ) {
                if (!$none.length) {
                  this.$container.prepend($result.find(".w-grid-none"));
                } else {
                  $none.show();
                }
                this.none = !0;
              }
              if (this.changeUpdateState && this.gridFilter) {
                var $jsonData = $result.filter(
                  ".w-grid-filter-json-data:first"
                );
                if ($jsonData.length) {
                  this.gridFilter.trigger(
                    "us_grid_filter.update-items-amount",
                    $jsonData[0].onclick() || {}
                  );
                }
                $jsonData.remove();
              }
              var customStyles =
                $("style#grid-post-content-css", $result).html() || "";
              if (customStyles) {
                if (!this.$style.length) {
                  this.$style = $("<style></style>");
                  this.$container.append(this.$style);
                }
                this.$style.text(this.$style.text() + customStyles);
              }
              $us.$canvas.resize();
              this.$preloader.removeClass("active");
              if (
                window.USAnimate &&
                this.$container.is(".with_css_animation")
              ) {
                new USAnimate(this.$container);
              }
            }.bind(this)
          );
          this.loading = !1;
        }.bind(this),
        error: function () {
          this.$loadmore.removeClass("loading");
        }.bind(this),
      });
      this.curPage = page;
      this.curFilterTaxonomy = taxonomy;
    },
    _hasScrollbar: function () {
      return (
        document.documentElement.scrollHeight >
        document.documentElement.clientHeight
      );
    },
    _getScrollbarSize: function () {
      if ($us.scrollbarSize === undefined) {
        var scrollDiv = document.createElement("div");
        scrollDiv.style.cssText =
          "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
        document.body.appendChild(scrollDiv);
        $us.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
      }
      return $us.scrollbarSize;
    },
    openLightboxItem: function (itemUrl, $item) {
      this.showLightbox();
      var $nextItem = $item
          .nextAll("article:visible:not(.custom-link)")
          .first(),
        $prevItem = $item.prevAll("article:visible:not(.custom-link)").first();
      if ($nextItem.length != 0) {
        this.$lightboxNextArrow.show();
        this.$lightboxNextArrow.attr(
          "title",
          $nextItem.find(".w-grid-item-title").text()
        );
        this.$lightboxNextArrow.off("click").click(
          function (e) {
            var $nextItemAnchor = $nextItem.find(".w-grid-item-anchor"),
              nextItemUrl = $nextItemAnchor.attr("href");
            e.stopPropagation();
            e.preventDefault();
            this.openLightboxItem(nextItemUrl, $nextItem);
          }.bind(this)
        );
      } else {
        this.$lightboxNextArrow.attr("title", "");
        this.$lightboxNextArrow.hide();
      }
      if ($prevItem.length != 0) {
        this.$lightboxPrevArrow.show();
        this.$lightboxPrevArrow.attr(
          "title",
          $prevItem.find(".w-grid-item-title").text()
        );
        this.$lightboxPrevArrow.off("click").on(
          "click",
          function (e) {
            var $prevItemAnchor = $prevItem.find(".w-grid-item-anchor"),
              prevItemUrl = $prevItemAnchor.attr("href");
            e.stopPropagation();
            e.preventDefault();
            this.openLightboxItem(prevItemUrl, $prevItem);
          }.bind(this)
        );
      } else {
        this.$lightboxPrevArrow.attr("title", "");
        this.$lightboxPrevArrow.hide();
      }
      if (itemUrl.indexOf("?") !== -1) {
        this.$lightboxContentFrame.attr("src", itemUrl + "&us_iframe=1");
      } else {
        this.$lightboxContentFrame.attr("src", itemUrl + "?us_iframe=1");
      }
      if (history.replaceState) {
        history.replaceState(null, null, itemUrl);
      }
      this.$lightboxContentFrame.off("load").on(
        "load",
        function () {
          this.lightboxContentLoaded();
        }.bind(this)
      );
    },
    lightboxContentLoaded: function () {
      this.$lightboxContentPreloader.css("display", "none");
      this.$lightboxContentFrame
        .contents()
        .find("body")
        .off("keyup.usCloseLightbox")
        .on(
          "keyup.usCloseLightbox",
          function (e) {
            if (e.key === "Escape") {
              this.hideLightbox();
            }
          }.bind(this)
        );
    },
    showLightbox: function () {
      clearTimeout(this.lightboxTimer);
      this.$lightboxOverlay.appendTo($us.$body).show();
      this.$lightboxWrap.appendTo($us.$body).show();
      this.lightboxOpened = !0;
      this.$lightboxContentPreloader.css("display", "block");
      $us.$html.addClass("usoverlay_fixed");
      if (!$.isMobile) {
        this.windowHasScrollbar = this._hasScrollbar();
        if (this.windowHasScrollbar && this._getScrollbarSize()) {
          $us.$html.css("margin-right", this._getScrollbarSize());
        }
      }
      this.lightboxTimer = setTimeout(
        function () {
          this.afterShowLightbox();
        }.bind(this),
        25
      );
    },
    afterShowLightbox: function () {
      clearTimeout(this.lightboxTimer);
      this.$container.on(
        "keyup",
        function (e) {
          if (this.$container.hasClass("popup_page")) {
            if (e.key === "Escape") {
              this.hideLightbox();
            }
          }
        }.bind(this)
      );
      this.$lightboxOverlay.addClass("active");
      this.$lightboxBox.addClass("active");
      $us.$canvas.trigger("contentChange");
      $us.$window.trigger("resize");
    },
    hideLightbox: function () {
      clearTimeout(this.lightboxTimer);
      this.lightboxOpened = !1;
      this.$lightboxOverlay.removeClass("active");
      this.$lightboxBox.removeClass("active");
      if (history.replaceState) {
        history.replaceState(null, null, this.originalURL);
      }
      this.lightboxTimer = setTimeout(
        function () {
          this.afterHideLightbox();
        }.bind(this),
        500
      );
    },
    afterHideLightbox: function () {
      this.$container.off("keyup");
      clearTimeout(this.lightboxTimer);
      this.$lightboxOverlay.appendTo(this.$container).hide();
      this.$lightboxWrap.appendTo(this.$container).hide();
      this.$lightboxContentFrame.attr("src", "about:blank");
      $us.$html.removeClass("usoverlay_fixed");
      if (!$.isMobile) {
        if (this.windowHasScrollbar) {
          $us.$html.css("margin-right", "");
        }
      }
    },
    beforeAppendItems: function ($items) {
      if ($("[data-toggle-height]", $items).length) {
        var handle = $us.timeout(function () {
          $("[data-toggle-height]", $items).usToggleMoreContent();
          $us.clearTimeout(handle);
        }, 1);
      }
    },
    afterAppendItems: function ($items) {},
  };
  $.fn.wGrid = function (options) {
    return this.each(function () {
      $(this).data("wGrid", new $us.WGrid(this, options));
    });
  };
  $(function () {
    $(".w-grid").wGrid();
  });
  $(".w-grid-list").each(function () {
    var $list = $(this);
    if (!$list.find("[ref=magnificPopupGrid]").length) {
      return;
    }
    $us.getScript(
      $us.templateDirectoryUri + "/common/js/vendor/magnific-popup.js",
      function () {
        var delegateStr = "a[ref=magnificPopupGrid]:visible",
          popupOptions;
        if ($list.hasClass("owl-carousel")) {
          delegateStr = ".owl-item:not(.cloned) a[ref=magnificPopupGrid]";
        }
        popupOptions = {
          type: "image",
          delegate: delegateStr,
          gallery: {
            enabled: !0,
            navigateByImgClick: !0,
            preload: [0, 1],
            tPrev: $us.langOptions.magnificPopup.tPrev,
            tNext: $us.langOptions.magnificPopup.tNext,
            tCounter: $us.langOptions.magnificPopup.tCounter,
          },
          removalDelay: 300,
          mainClass: "mfp-fade",
          fixedContentPos: !0,
          callbacks: {
            beforeOpen: function () {
              var owlCarousel = $list.data("owl.carousel");
              if (owlCarousel && owlCarousel.settings.autoplay) {
                $list.trigger("stop.owl.autoplay");
              }
            },
            beforeClose: function () {
              var owlCarousel = $list.data("owl.carousel");
              if (owlCarousel && owlCarousel.settings.autoplay) {
                $list.trigger("play.owl.autoplay");
              }
            },
          },
        };
        $list.magnificPopup(popupOptions);
        if ($list.hasClass("owl-carousel")) {
          $list.on("initialized.owl.carousel", function (initEvent) {
            var $currentList = $(initEvent.currentTarget),
              items = {};
            $(".owl-item:not(.cloned)", $currentList).each(function (_, item) {
              var $item = $(item),
                id = $item.find("[data-id]").data("id");
              if (!items.hasOwnProperty(id)) {
                items[id] = $item;
              }
            });
            $currentList.on("click", ".owl-item.cloned", function (e) {
              e.preventDefault();
              e.stopPropagation();
              var $target = $(e.currentTarget),
                id = $target.find("[data-id]").data("id");
              if (items.hasOwnProperty(id)) {
                $("a[ref=magnificPopupGrid]", items[id]).trigger("click");
              }
            });
          });
        }
      }
    );
  });
})(jQuery);
(function ($, undefined) {
  "use strict";
  $us.WGridFilter = function (container, options) {
    this.init(container, options);
  };
  $.extend($us.WGridFilter.prototype, $us.mixins.Events, {
    init: function (container, options) {
      this.defaultOptions = {
        filterPrefix: "filter",
        gridNotFoundMessage: !1,
        gridPaginationSelector: ".w-grid-pagination",
        gridSelector: '.w-grid[data-filterable="true"]:first',
        layout: "hor",
        mobileWidth: 600,
      };
      this.options = $.extend(this.defaultOptions, options);
      this.filtersArgs = {};
      this.$container = $(container);
      this.$filtersItem = $(".w-filter-item", this.$container);
      this.$grid = $(this.options.gridSelector, $us.$canvas.find(".l-main"));
      if (this.$container.is("[onclick]")) {
        $.extend(this.options, this.$container[0].onclick() || {});
        this.$container.removeAttr("onclick");
      }
      var $filtersArgs = this.$container.find(
        ".w-filter-json-filters-args:first"
      );
      if ($filtersArgs.length) {
        this.filtersArgs = $filtersArgs[0].onclick() || {};
        $filtersArgs.remove();
      }
      if (!this.$grid.length && this.options.gridNotFoundMessage) {
        this.$container.prepend(
          '<div class="w-filter-message">' +
            this.options.gridNotFoundMessage +
            "</div>"
        );
      }
      this.$grid.addClass("used_by_grid_filter");
      this.$container
        .on("click", ".w-filter-opener", this._events.filterOpener.bind(this))
        .on(
          "click",
          ".w-filter-list-closer, .w-filter-list-panel > a",
          this._events.filterListCloser.bind(this)
        );
      this.$filtersItem
        .on("change", "input, select", this._events.changeFilter.bind(this))
        .on("click", ".w-filter-item-reset", this._events.resetItem.bind(this));
      $(this.options.gridPaginationSelector, this.$grid).on(
        "click",
        ".page-numbers",
        this._events.loadPageNumber.bind(this)
      );
      $us.$window.on(
        "resize load",
        $us.debounce(this._events.resize.bind(this), 100)
      );
      this.on("changeItemValue", this._events.toggleItemValue.bind(this));
      if (this.$container.hasClass("show_on_click")) {
        this.$filtersItem.on(
          "click",
          ".w-filter-item-title",
          this._events.showItem.bind(this)
        );
        $(document).mouseup(this._events.hideItem.bind(this));
      }
      $("form.woocommerce-ordering", $us.$canvas)
        .off("change", "select.orderby")
        .on(
          "change",
          "select.orderby",
          this._events.woocommerceOrdering.bind(this)
        );
      this.checkItemValues.call(this);
      this.$container.toggleClass("active", this.$filtersItem.is(".has_value"));
      this.on(
        "us_grid_filter.update-items-amount",
        this._events.updateItemsAmount.bind(this)
      );
      this._events.resize.call(this);
    },
    isMobile: function () {
      return parseInt($us.$window.width()) < parseInt(this.options.mobileWidth);
    },
    _events: {
      changeFilter: function (e) {
        var $target = $(e.currentTarget),
          $item = $target.closest(".w-filter-item"),
          uiType = $item.data("ui_type");
        $item.removeClass("disabled");
        this.$filtersItem.not($item).addClass("disabled");
        if (["radio", "checkbox"].indexOf(uiType) !== -1) {
          if (uiType === "radio") {
            $(".w-filter-item-value", $item).removeClass("selected");
          }
          $target
            .closest(".w-filter-item-value")
            .toggleClass("selected", $target.is(":checked "));
        } else if (uiType === "range") {
          var $inputs = $("input[type!=hidden]", $item),
            rangeValues = [];
          $inputs.each(function (i, input) {
            var $input = $(input),
              value = input.value || 0;
            if (
              !value &&
              $input.hasClass("type_" + ["min", "max"][i]) &&
              rangeValues.length == i
            ) {
              value = $input.attr("placeholder") || 0;
            }
            value = parseInt(value);
            rangeValues.push(!isNaN(value) ? value : 0);
          });
          rangeValues = rangeValues.join("-");
          $('input[type="hidden"]', $item).val(
            rangeValues !== "0-0" ? rangeValues : ""
          );
        }
        var value = this.getValue();
        $us.debounce(this.URLSearchParams.bind(this, value), 1)();
        this.triggerGrid("us_grid.updateState", [value, 1, this]);
        this.trigger("changeItemValue", $item);
        this.$container.toggleClass(
          "active",
          this.$filtersItem.is(".has_value")
        );
      },
      loadPageNumber: function (e) {
        e.stopPropagation();
        e.preventDefault();
        var $target = $(e.currentTarget),
          href = $target.attr("href") || "",
          matches = href.match(/page(=|\/)(\d+)(\/?)/) || [],
          page = parseInt(matches[2] || 1);
        history.replaceState(document.title, document.title, href);
        this.triggerGrid("us_grid.updateState", [this.getValue(), page, this]);
      },
      resetItem: function (e) {
        var $item = $(e.currentTarget).closest(".w-filter-item"),
          uiType = $item.data("ui_type");
        if (!uiType) {
          return;
        }
        if ("checkbox|radio".indexOf(uiType) !== -1) {
          $("input:checked", $item).prop("checked", !1);
          $('input[value="*"]:first', $item).each(function (_, input) {
            $(input)
              .prop("checked", !0)
              .closest(".w-filter-item")
              .addClass("selected");
          });
        }
        if (uiType === "range") {
          $("input", $item).val("");
        }
        if (uiType === "dropdown") {
          $("option", $item).prop("selected", !1);
        }
        $(".w-filter-item-value", $item).removeClass("selected");
        this.trigger("changeItemValue", $item);
        this.$container.toggleClass(
          "active",
          this.$filtersItem.is(".has_value")
        );
        var value = this.getValue();
        $us.debounce(this.URLSearchParams.bind(this, value), 1)();
        this.URLSearchParams(value);
        this.triggerGrid("us_grid.updateState", [value, 1, this]);
      },
      toggleItemValue: function (_, item) {
        var $item = $(item),
          title = "",
          hasValue = !1,
          uiType = $item.data("ui_type"),
          $selected = $('input:not([value="*"]):checked', $item);
        if (!uiType) {
          return;
        }
        if ("checkbox|radio".indexOf(uiType) !== -1) {
          hasValue = $selected.length;
          if (this.options.layout == "hor") {
            var title = "";
            if ($selected.length === 1) {
              title +=
                ": " +
                $selected.nextAll(".w-filter-item-value-label:first").text();
            } else if ($selected.length > 1) {
              title += ": " + $selected.length;
            }
          }
        }
        if (uiType === "dropdown") {
          var value = $("select:first", $item).val();
          hasValue = value !== "*" ? !!value : "";
        }
        if (uiType === "range") {
          var value = $('input[type="hidden"]:first', $item).val();
          hasValue = !!value;
          if (this.options.layout == "hor" && value) {
            title += ": " + value;
          }
        }
        $item.toggleClass("has_value", !!hasValue);
        $("> .w-filter-item-title:first > span", item).html(title);
      },
      resize: function () {
        this.$container.usMod("state", this.isMobile() ? "mobile" : "desktop");
        if (!this.isMobile()) {
          $us.$body.removeClass("us_filter_open");
          this.$container.removeClass("open");
        }
      },
      filterOpener: function () {
        $us.$body.addClass("us_filter_open");
        this.$container.addClass("open");
      },
      filterListCloser: function () {
        $us.$body.removeClass("us_filter_open");
        this.$container.removeClass("open");
      },
      showItem: function (e) {
        var $target = $(e.currentTarget),
          $item = $target.closest(".w-filter-item");
        $item.addClass("show");
      },
      hideItem: function (e) {
        if (!this.$filtersItem.hasClass("show")) {
          return;
        }
        this.$filtersItem.filter(".show").each(function (_, item) {
          var $item = $(item);
          if (!$item.is(e.target) && $item.has(e.target).length === 0) {
            $item.removeClass("show");
          }
        });
      },
      woocommerceOrdering: function (e) {
        e.stopPropagation();
        var $form = $(e.currentTarget).closest("form");
        $('input[name^="' + this.options.filterPrefix + '"]', $form).remove();
        $.each(this.getValue().split("&"), function (_, item) {
          var value = item.split("=");
          if (value.length === 2) {
            $form.append(
              '<input type="hidden" name="' +
                value[0] +
                '" value="' +
                value[1] +
                '"/>'
            );
          }
        });
        $form.trigger("submit");
      },
      updateItemsAmount: function (_, data) {
        this.$filtersItem.removeClass("disabled");
        $.each(
          data.taxonomies_query_args || {},
          function (key, items) {
            var $item = this.$filtersItem.filter('[data-source="' + key + '"]'),
              uiType = $item.data("ui_type"),
              showCount = 0;
            $.each(
              items,
              function (value, amount) {
                var disabled = !amount;
                if (!disabled) {
                  showCount++;
                }
                if (uiType === "dropdown") {
                  var $option = $(
                      'select:first option[value="' + value + '"]',
                      $item
                    ),
                    template = $option.data("template") || "";
                  if (template) {
                    template = template
                      .replace("%s", amount ? amount : "")
                      .trim();
                    $option.text(template);
                  }
                  $option
                    .prop("disabled", disabled)
                    .toggleClass("disabled", disabled);
                } else {
                  var $input = $('input[value="' + value + '"]', $item);
                  $input
                    .prop("disabled", disabled)
                    .nextAll(".w-filter-item-value-amount")
                    .text(amount);
                  $input
                    .closest(".w-filter-item-value")
                    .toggleClass("disabled", disabled);
                  if (disabled && $input.is(":checked")) {
                    $input.prop("checked", !1);
                  }
                }
              }.bind(this)
            );
            if (!showCount && this.options.hideDisabledValues) {
              $item.addClass("disabled");
            }
          }.bind(this)
        );
        if (
          data.hasOwnProperty("wc_min_max_price") &&
          data.wc_min_max_price instanceof Object
        ) {
          var $price = this.$filtersItem.filter('[data-source$="|_price"]');
          $.each(data.wc_min_max_price || {}, function (name, value) {
            var $input = $("input.type_" + name, $price);
            $input.attr(
              "placeholder",
              value ? value : $input.attr("aria-label")
            );
          });
        }
        if (!$.isEmptyObject(data)) {
          if (this.handle) {
            $us.clearTimeout(this.handle);
          }
          this.handle = $us.timeout(
            function () {
              $us.debounce(
                this.URLSearchParams.bind(this, this.getValue()),
                1
              )();
              this.checkItemValues.call(this);
            }.bind(this),
            100
          );
        }
      },
    },
    triggerGrid: function (eventType, extraParameters) {
      $us.debounce(function () {
        $us.$body.trigger(eventType, extraParameters);
      }, 10)();
    },
    checkItemValues: function () {
      this.$filtersItem.each(
        function (_, item) {
          this.trigger("changeItemValue", item);
        }.bind(this)
      );
    },
    getValue: function () {
      var value = "",
        filters = {};
      $.each(this.$container.serializeArray(), function (_, filter) {
        if (filter.value === "*" || !filter.value) {
          return;
        }
        if (!filters.hasOwnProperty(filter.name)) {
          filters[filter.name] = [];
        }
        filters[filter.name].push(filter.value);
      });
      for (var k in filters) {
        if (value) {
          value += "&";
        }
        if ($.isArray(filters[k])) {
          value += k + "=" + filters[k].join(",");
        }
      }
      return encodeURI(value);
    },
    URLSearchParams: function (params) {
      var url =
          location.origin +
          location.pathname +
          (location.pathname.slice(-1) != "/" ? "/" : ""),
        search = location.search.replace(
          new RegExp(this.options.filterPrefix + "(.+?)(&|$)", "g"),
          ""
        );
      if (!search || search.substr(0, 1) !== "?") {
        search += "?";
      } else if ("?&".indexOf(search.slice(-1)) === -1) {
        search += "&";
      }
      if (!params && "?&".indexOf(search.slice(-1)) !== -1) {
        search = search.slice(0, -1);
      }
      history.replaceState(
        document.title,
        document.title,
        url + search + params
      );
    },
  });
  $.fn.wGridFilter = function (options) {
    return this.each(function () {
      $(this).data("wGridFilter", new $us.WGridFilter(this, options));
    });
  };
  $(function () {
    $(".w-filter", $us.$canvas).wGridFilter();
  });
})(jQuery);
(function ($, undefined) {
  "use strict";
  $us.WGridOrder = function (container) {
    this.init(container);
  };
  $.extend($us.WGridOrder.prototype, $us.mixins.Events, {
    init: function (container) {
      this.$container = $(container);
      this.$select = $("select", this.$container);
      this.$grid = $(
        '.w-grid[data-filterable="true"]:first',
        $us.$canvas.find(".l-main")
      );
      this.name = this.$select.attr("name") || "order";
      this.$container.on(
        "change",
        "select",
        this._events.changeSelect.bind(this)
      );
      this.$grid.addClass("used_by_grid_order");
    },
    _events: {
      changeSelect: function () {
        var value = this.$select.val() || "",
          matches = location.href.match(/page(=|\/)(\d+)(\/?)/) || [],
          page = parseInt(matches[2] || 1);
        this.URLSearchValue(value);
        this.triggerGrid("us_grid.updateOrderBy", [value, page, this]);
      },
    },
    triggerGrid: function (eventType, extraParameters) {
      $us.debounce(function () {
        $us.$body.trigger(eventType, extraParameters);
      }, 10)();
    },
    URLSearchValue: function (value) {
      var orderby_search = "",
        url =
          location.origin +
          location.pathname +
          (location.pathname.slice(-1) != "/" ? "/" : ""),
        search = location.search
          .replace(new RegExp("[?&]" + this.name + "=[^&#]*(#.*)?$"), "$1")
          .replace(new RegExp("([?&])" + this.name + "=[^&]*&"), "$1");
      if (search && search.substr(0, 1) === "?") {
        search = search.slice(1);
      }
      if (value) {
        orderby_search += this.name + "=" + value;
      }
      if (orderby_search && search) {
        orderby_search += "&";
      }
      orderby_search += search;
      history.replaceState(
        document.title,
        document.title,
        url + (orderby_search ? "?" + orderby_search : "")
      );
    },
  });
  $.fn.wGridOrder = function (options) {
    return this.each(function () {
      $(this).data("wGridOrder", new $us.WGridOrder(this));
    });
  };
  $(function () {
    $(".w-order", $us.$canvas).wGridOrder();
  });
})(jQuery);
!(function ($, undefined) {
  "use strict";
  function USHeader(settings) {
    this.$container = $(".l-header", $us.$canvas);
    this.$showBtn = $(".w-header-show:first", $us.$body);
    this.settings = settings || {};
    this.state = "default";
    this.$elms = {};
    if (this.$container.length === 0) {
      return;
    }
    this.$places = { hidden: $(".l-subheader.for_hidden", this.$container) };
    this._states = {
      sticky: !1,
      sticky_auto_hide: !1,
      scroll_direction: "down",
      vertical_scrollable: !1,
      init_height: this.getHeight(),
    };
    this.pos = this.$container.usMod("pos");
    this.bg = this.$container.usMod("bg");
    this.shadow = this.$container.usMod("shadow");
    this.orientation = $us.$body.usMod("header");
    this.tabletsBreakpoint =
      parseInt(
        settings.tablets &&
          settings.tablets.options &&
          settings.tablets.options.breakpoint
      ) || 900;
    this.mobilesBreakpoint =
      parseInt(
        settings.mobiles &&
          settings.mobiles.options &&
          settings.mobiles.options.breakpoint
      ) || 600;
    $(".l-subheader-cell", this.$container).each(
      function (_, place) {
        var $place = $(place),
          key = $place.parent().parent().usMod("at") + "_" + $place.usMod("at");
        this.$places[key] = $place;
      }.bind(this)
    );
    $("[class*=ush_]", this.$container).each(
      function (_, elm) {
        var $elm = $(elm),
          matches = /(^| )ush_([a-z_]+)_([0-9]+)(\s|$)/.exec(elm.className);
        if (!matches) {
          return;
        }
        var id = matches[2] + ":" + matches[3];
        this.$elms[id] = $elm;
        if ($elm.is(".w-vwrapper, .w-hwrapper")) {
          this.$places[id] = $elm;
        }
      }.bind(this)
    );
    $us.$window
      .on("scroll", $us.debounce(this._events.scroll.bind(this), 10))
      .on("resize load", $us.debounce(this._events.resize.bind(this), 10));
    this.$container.on("contentChange", this._events.contentChange.bind(this));
    this.$showBtn.on("click", this._events.showBtn.bind(this));
    this.on("changeSticky", this._events._changeSticky.bind(this)).on(
      "swichVerticalScrollable",
      this._events._swichVerticalScrollable.bind(this)
    );
    this._events.resize.call(this);
    if (this.isStickyAutoHideEnabled()) {
      this.$container.addClass("sticky_auto_hide");
    }
    this.$container.on(
      "transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",
      function () {
        $us.debounce(this.trigger.bind(this, "transitionEnd"), 1)();
      }.bind(this)
    );
  }
  $.extend(USHeader.prototype, $us.mixins.Events, {
    prevScrollTop: 0,
    currentStateIs: function (state) {
      return (
        state &&
        ["default", "tablets", "mobiles"].indexOf(state) !== -1 &&
        this.state === state
      );
    },
    isVertical: function () {
      return this.orientation === "ver";
    },
    isHorizontal: function () {
      return this.orientation === "hor";
    },
    isFixed: function () {
      return this.pos === "fixed";
    },
    isTransparent: function () {
      return this.bg === "transparent";
    },
    _isWithinScrollBoundaries: function (scrollTop) {
      scrollTop = parseInt(scrollTop);
      return (
        scrollTop + window.innerHeight >= $us.$document.height() ||
        scrollTop <= 0
      );
    },
    isHidden: function () {
      return !!$us.header.settings.is_hidden;
    },
    isStickyEnabled: function () {
      return this.settings[this.state].options.sticky || !1;
    },
    isStickyAutoHideEnabled: function () {
      return (
        this.isStickyEnabled() &&
        (this.settings[this.state].options.sticky_auto_hide || !1)
      );
    },
    isSticky: function () {
      return this._states.sticky || !1;
    },
    isStickyAutoHidden: function () {
      return this._states.sticky_auto_hide || !1;
    },
    getScrollDirection: function () {
      return this._states.scroll_direction || "down";
    },
    getAdminBarHeight: function () {
      var $wpAdminBar = $("#wpadminbar", $us.$body);
      return $wpAdminBar.length ? parseInt($wpAdminBar.height()) : 0;
    },
    getHeight: function () {
      var height = 0,
        beforeContent = getComputedStyle(
          this.$container.get(0),
          ":before"
        ).content;
      if (beforeContent && ["none", "auto"].indexOf(beforeContent) === -1) {
        height = beforeContent.replace(/[^+\d]/g, "");
      }
      if (!height) {
        height = this.$container.outerHeight();
      }
      return !isNaN(height) ? parseInt(height) : 0;
    },
    getInitHeight: function () {
      return parseInt(this._states.init_height) || this.getHeight();
    },
    getCurrentHeight: function () {
      var height = 0,
        adminBarHeight = this.getAdminBarHeight();
      if (
        this.isHorizontal() &&
        (!this.currentStateIs("mobiles") ||
          (adminBarHeight && adminBarHeight >= this.getScrollTop()))
      ) {
        height += adminBarHeight;
      }
      if (!this.isStickyAutoHidden()) {
        height += this.getHeight();
      }
      return height;
    },
    getScrollTop: function () {
      return parseInt($us.$window.scrollTop()) || this.prevScrollTop;
    },
    getOffsetTop: function () {
      var top = parseInt(this.$container.css("top"));
      return !isNaN(top) ? top : 0;
    },
    isScrollAtTopPosition: function () {
      return parseInt($us.$window.scrollTop()) === 0;
    },
    setState: function (state) {
      if (this.currentStateIs(state)) {
        return;
      }
      var options = this.settings[state].options || {},
        orientation = options.orientation || "hor",
        pos = $us.toBool(options.sticky) ? "fixed" : "static",
        bg = $us.toBool(options.transparent) ? "transparent" : "solid",
        shadow = options.shadow || "thin";
      if (orientation === "ver") {
        pos = "fixed";
        bg = "solid";
      }
      this._setOrientation(orientation);
      this._setPos(pos);
      this._setBg(bg);
      this._setShadow(shadow);
      this._setLayout(this.settings[state].layout || {});
      $us.$body.usMod("state", (this.state = state));
      if (this.currentStateIs("default")) {
        $us.$body.removeClass("header-show");
      }
      if ($us.nav !== undefined) {
        $us.nav.resize();
      }
      if (this.isStickyAutoHideEnabled()) {
        this.$container.removeClass("down");
      }
    },
    _setPos: function (pos) {
      if (pos === this.pos) {
        return;
      }
      this.$container.usMod("pos", (this.pos = pos));
      if (this.pos === "static") {
        this.trigger("changeSticky", !1);
      }
    },
    _setBg: function (bg) {
      if (bg != this.bg) {
        this.$container.usMod("bg", (this.bg = bg));
      }
    },
    _setShadow: function (shadow) {
      if (shadow != this.shadow) {
        this.$container.usMod("shadow", (this.shadow = shadow));
      }
    },
    _setLayout: function (layout) {
      for (var place in layout) {
        if (!layout[place] || !this.$places[place]) {
          continue;
        }
        this._placeElements(layout[place], this.$places[place]);
      }
    },
    _setOrientation: function (orientation) {
      if (orientation != this.orientation) {
        $us.$body.usMod("header", (this.orientation = orientation));
      }
    },
    _placeElements: function (elms, $place) {
      for (var i = 0; i < elms.length; i++) {
        var elmId;
        if (typeof elms[i] == "object") {
          elmId = elms[i][0];
          if (!this.$places[elmId] || !this.$elms[elmId]) {
            continue;
          }
          this.$elms[elmId].appendTo($place);
          this._placeElements(elms[i].shift(), this.$places[elmId]);
        } else {
          elmId = elms[i];
          if (!this.$elms[elmId]) {
            continue;
          }
          this.$elms[elmId].appendTo($place);
        }
      }
    },
    _isVerticalScrollable: function () {
      if (!this.isVertical()) {
        return;
      }
      if (this.currentStateIs("default") && this.isFixed()) {
        this.$container.addClass("scrollable");
        var headerHeight = this.getHeight(),
          canvasHeight = parseInt($us.canvas.winHeight),
          documentHeight = parseInt($us.$document.height());
        this.$container.removeClass("scrollable");
        if (headerHeight > canvasHeight) {
          this.trigger("swichVerticalScrollable", !0);
        } else if (this._states.vertical_scrollable) {
          this.trigger("swichVerticalScrollable", !1);
        }
        if (headerHeight > documentHeight) {
          this.$container.css({ position: "absolute", top: 0 });
        }
      } else if (this._states.vertical_scrollable) {
        this.trigger("swichVerticalScrollable", !1);
      }
    },
    _events: {
      _swichVerticalScrollable: function (_, state) {
        this.$container.toggleClass(
          "scrollable",
          (this._states.vertical_scrollable = !!state)
        );
        if (!this._states.vertical_scrollable) {
          this.$container.resetInlineCSS("position", "top", "bottom");
          delete this._headerScrollRange;
        }
      },
      _changeSticky: function (_, state) {
        this._states.sticky = !!state;
        var currentHeight = this.getCurrentHeight();
        $us.debounce(
          function () {
            this.$container
              .toggleClass("sticky", this._states.sticky)
              .resetInlineCSS("position", "top", "bottom");
            if (currentHeight == this.getCurrentHeight()) {
              this.trigger("transitionEnd");
            }
          }.bind(this),
          10
        )();
      },
      contentChange: function () {
        this._isVerticalScrollable.call(this);
      },
      showBtn: function (e) {
        if ($us.$body.hasClass("header-show")) {
          return;
        }
        e.stopPropagation();
        $us.$body
          .addClass("header-show")
          .on(
            $.isMobile ? "touchstart" : "click",
            this._events.hideMobileVerticalHeader.bind(this)
          );
      },
      hideMobileVerticalHeader: function (e) {
        if ($.contains(this.$container[0], e.target)) {
          return;
        }
        $us.$body.off(
          $.isMobile ? "touchstart" : "click",
          this._events.hideMobileVerticalHeader.bind(this)
        );
        $us.timeout(function () {
          $us.$body.removeClass("header-show");
        }, 10);
      },
      scroll: function () {
        var scrollTop = this.getScrollTop(),
          headerAbovePosition = $us.canvas.headerInitialPos === "above";
        if (this.prevScrollTop != scrollTop) {
          this._states.scroll_direction =
            this.prevScrollTop <= scrollTop ? "down" : "up";
        }
        this.prevScrollTop = scrollTop;
        if (this.isScrollAtTopPosition()) {
          this._states.scroll_direction = "up";
        }
        if (
          this.isStickyAutoHideEnabled() &&
          this.isSticky() &&
          !this._isWithinScrollBoundaries(scrollTop) &&
          !headerAbovePosition
        ) {
          this._states.sticky_auto_hide = this.getScrollDirection() === "down";
          this.$container.toggleClass("down", this._states.sticky_auto_hide);
        }
        if (!this.isFixed()) {
          return;
        }
        var headerAttachedFirstSection =
          ["bottom", "below"].indexOf($us.canvas.headerInitialPos) !== -1;
        if (
          this.isHorizontal() &&
          (headerAbovePosition ||
            (headerAttachedFirstSection && !this.currentStateIs("default")) ||
            !headerAttachedFirstSection)
        ) {
          if (this.isStickyEnabled()) {
            var scrollBreakpoint =
                parseInt(this.settings[this.state].options.scroll_breakpoint) ||
                100,
              isSticky = scrollTop >= scrollBreakpoint;
            if (isSticky != this.isSticky()) {
              this.trigger("changeSticky", isSticky);
            }
          }
          if (this.isSticky()) {
            $us.debounce(
              function () {
                if (!$us.$window.scrollTop()) {
                  this.trigger("changeSticky", !1);
                }
              }.bind(this),
              1
            )();
          }
        }
        if (
          this.isHorizontal() &&
          headerAttachedFirstSection &&
          !headerAbovePosition &&
          this.currentStateIs("default")
        ) {
          var top =
            $us.canvas.getHeightFirstSection() + this.getAdminBarHeight();
          if ($us.canvas.headerInitialPos == "bottom") {
            top -= this.getInitHeight();
          }
          if (this.isStickyEnabled()) {
            var isSticky = scrollTop >= top;
            if (isSticky != this.isSticky()) {
              $us.debounce(
                function () {
                  this.trigger("changeSticky", isSticky);
                }.bind(this),
                1
              )();
            }
          }
          if (!this.isSticky() && top != this.getOffsetTop()) {
            this.$container.css("top", top);
          }
        }
        var headerHeight = this.getHeight(),
          documentHeight = parseInt($us.$document.height());
        if (
          this.isVertical() &&
          !headerAttachedFirstSection &&
          !headerAbovePosition &&
          !jQuery.isMobile &&
          this._states.vertical_scrollable &&
          documentHeight > headerHeight
        ) {
          var canvasHeight = parseInt($us.canvas.winHeight),
            scrollRangeDiff = headerHeight - canvasHeight,
            cssProps;
          if (this._headerScrollRange === undefined) {
            this._headerScrollRange = [0, scrollRangeDiff];
          }
          if (scrollTop <= this._headerScrollRange[0]) {
            this._headerScrollRange[0] = Math.max(0, scrollTop);
            this._headerScrollRange[1] =
              this._headerScrollRange[0] + scrollRangeDiff;
            cssProps = { position: "fixed", top: this.getAdminBarHeight() };
          } else if (
            this._headerScrollRange[0] < scrollTop &&
            scrollTop < this._headerScrollRange[1]
          ) {
            cssProps = {
              position: "absolute",
              top: this._headerScrollRange[0],
            };
          } else if (this._headerScrollRange[1] <= scrollTop) {
            this._headerScrollRange[1] = Math.min(
              documentHeight - canvasHeight,
              scrollTop
            );
            this._headerScrollRange[0] =
              this._headerScrollRange[1] - scrollRangeDiff;
            cssProps = { position: "fixed", top: canvasHeight - headerHeight };
          }
          if (cssProps) {
            this.$container.css(cssProps);
          }
        }
      },
      resize: function () {
        var newState = "default";
        if (window.innerWidth < this.tabletsBreakpoint) {
          newState =
            window.innerWidth < this.mobilesBreakpoint ? "mobiles" : "tablets";
        }
        this.setState(newState);
        if (this.isFixed() && this.isHorizontal()) {
          this.$container.addClass("notransition");
          $us.timeout(
            function () {
              this.$container.removeClass("notransition");
            }.bind(this),
            50
          );
        }
        this._isVerticalScrollable.call(this);
        this._events.scroll.call(this);
      },
    },
  });
  $us.header = new USHeader($us.headerSettings || {});
})(window.jQuery);
!(function ($) {
  var Horparallax = function (container, options) {
    var that = this;
    this.$window = $(window);
    this.container = $(container);
    if (container.onclick != undefined) {
      options = $.extend(
        {},
        container.onclick() || {},
        typeof options == "object" && options
      );
      this.container.removeProp("onclick");
    }
    options = $.extend(
      {},
      $.fn.horparallax.defaults,
      typeof options == "object" && options
    );
    this.options = options;
    this.bg = this.container.find(options.bgSelector);
    this.containerWidth = this.container.outerWidth();
    this.containerHeight = this.container.outerHeight();
    this.bgWidth = this.bg.outerWidth();
    this.windowHeight = this.$window.height();
    this._frameRate = Math.round(1000 / this.options.fps);
    this.mouseInside = !1;
    if (!("ontouchstart" in window) || !("DeviceOrientationEvent" in window)) {
      this.container
        .mouseenter(function (e) {
          that.mouseInside = !0;
          var offset = that.container.offset(),
            coord = (e.pageX - offset.left) / that.containerWidth;
          that.cancel();
          that._hoverAnimation = !0;
          that._hoverFrom = that.now;
          that._hoverTo = coord;
          that.start(that._hoverTo);
        })
        .mousemove(function (e) {
          if (!that.mouseInside) {
            return;
          }
          if (that._lastFrame + that._frameRate > Date.now()) {
            return;
          }
          var offset = that.container.offset(),
            coord = (e.pageX - offset.left) / that.containerWidth;
          if (that._hoverAnimation) {
            that._hoverTo = coord;
            return;
          }
          that.set(coord);
          that._lastFrame = Date.now();
        })
        .mouseleave(function (e) {
          that.mouseInside = !1;
          that.cancel();
          that.start(that.options.basePoint);
        });
    }
    this.$window.resize(function () {
      that.handleResize();
    });
    this._orientationDriven =
      "ontouchstart" in window && "DeviceOrientationEvent" in window;
    if (this._orientationDriven) {
      this._checkIfVisible();
      window.addEventListener("deviceorientation", function (e) {
        if (!that.visible || that._lastFrame + that._frameRate > Date.now()) {
          return;
        }
        that._deviceOrientationChange(e);
        that._lastFrame = Date.now();
      });
      this.$window.resize(function () {
        that._checkIfVisible();
      });
      this.$window.scroll(function () {
        that._checkIfVisible();
      });
    }
    this.set(this.options.basePoint);
    this._lastFrame = Date.now();
  };
  Horparallax.prototype = {
    _deviceOrientationChange: function (e) {
      var gamma = e.gamma,
        beta = e.beta,
        x,
        y;
      switch (window.orientation) {
        case -90:
          beta = Math.max(-45, Math.min(45, beta));
          x = (beta + 45) / 90;
          break;
        case 90:
          beta = Math.max(-45, Math.min(45, beta));
          x = (45 - beta) / 90;
          break;
        case 180:
          gamma = Math.max(-45, Math.min(45, gamma));
          x = (gamma + 45) / 90;
          break;
        case 0:
        default:
          if (gamma < -90 || gamma > 90) {
            gamma = (Math.abs(e.gamma) / e.gamma) * (180 - Math.abs(e.gamma));
          }
          gamma = Math.max(-45, Math.min(45, gamma));
          x = (45 - gamma) / 90;
          break;
      }
      this.set(x);
    },
    handleResize: function () {
      this.containerWidth = this.container.outerWidth();
      this.containerHeight = this.container.outerHeight();
      this.bgWidth = this.bg.outerWidth();
      this.windowHeight = this.$window.height();
      this.set(this.now);
    },
    _checkIfVisible: function () {
      var scrollTop = this.$window.scrollTop(),
        containerTop = this.container.offset().top;
      this.visible =
        containerTop + this.containerHeight > scrollTop &&
        containerTop < scrollTop + this.windowHeight;
    },
    set: function (x) {
      this.bg.css("left", (this.containerWidth - this.bgWidth) * x);
      this.now = x;
      return this;
    },
    compute: function (from, to, delta) {
      if (this._hoverAnimation) {
        return (this._hoverTo - this._hoverFrom) * delta + this._hoverFrom;
      }
      return (to - from) * delta + from;
    },
    start: function (to) {
      var from = this.now,
        that = this;
      this.container.css("delta", 0).animate(
        { delta: 1 },
        {
          duration: this.options.duration,
          easing: this.options.easing,
          complete: function () {
            that._hoverAnimation = !1;
          },
          step: function (delta) {
            that.set(that.compute(from, to, delta));
          },
          queue: !1,
        }
      );
      return this;
    },
    cancel: function () {
      this._hoverAnimation = !1;
      this.container.stop(!0, !1);
      return this;
    },
  };
  if ($.easing.easeOutElastic == undefined) {
    $.easing.easeOutElastic = function (x, t, b, c, d) {
      var s = 1.70158,
        p = 0,
        a = c;
      if (t == 0) {
        return b;
      }
      if ((t /= d) == 1) {
        return b + c;
      }
      if (!p) {
        p = d * 0.3;
      }
      if (a < Math.abs(c)) {
        a = c;
        var s = p / 4;
      } else {
        var s = (p / (2 * Math.PI)) * Math.asin(c / a);
      }
      return (
        a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +
        c +
        b
      );
    };
  }
  $.fn.horparallax = function (options) {
    return this.each(function () {
      var $this = $(this),
        data = $this.data("horparallax");
      if (!data) {
        $this.data("horparallax", (data = new Horparallax(this, options)));
      }
    });
  };
  $.fn.horparallax.defaults = {
    fps: 60,
    basePoint: 0.5,
    duration: 500,
    bgSelector: ".l-section-img",
    easing: $us.getAnimationName("swing"),
  };
  $.fn.horparallax.Constructor = Horparallax;
  $(function () {
    jQuery(".parallax_hor").horparallax();
  });
})(jQuery);
jQuery(function ($) {
  $(".w-gallery.link_file .w-gallery-list").each(function () {
    $us.getScript(
      $us.templateDirectoryUri + "/common/js/vendor/magnific-popup.js",
      function () {
        $(this).magnificPopup({
          type: "image",
          delegate: "a.w-gallery-item",
          gallery: {
            enabled: !0,
            navigateByImgClick: !0,
            preload: [0, 1],
            tPrev: $us.langOptions.magnificPopup.tPrev,
            tNext: $us.langOptions.magnificPopup.tNext,
            tCounter: $us.langOptions.magnificPopup.tCounter,
          },
          removalDelay: 300,
          mainClass: "mfp-fade",
          fixedContentPos: !0,
        });
      }.bind(this)
    );
  });
  $(".w-gallery.type_masonry").each(function (index, gallery) {
    $us.getScript(
      $us.templateDirectoryUri + "/common/js/vendor/isotope.js",
      function () {
        var $container = $(".w-gallery-list", gallery),
          isotopeOptions = {
            layoutMode: "masonry",
            isOriginLeft: !$("body").hasClass("rtl"),
          };
        if ($container.parents(".w-tabs-section-content-h").length) {
          isotopeOptions.transitionDuration = 0;
        }
        $container.imagesLoaded(function () {
          $container.isotope(isotopeOptions);
          $container.isotope();
        });
        $us.$canvas.on("contentChange", function () {
          $container.imagesLoaded(function () {
            $container.isotope();
          });
        });
      }
    );
  });
});
(function ($) {
  $.fn.wSlider = function () {
    return this.each(function () {
      $us.getScript(
        $us.templateDirectoryUri + "/common/js/vendor/royalslider.js",
        function () {
          var $this = $(this),
            $frame = $this.find(".w-slider-h"),
            $slider = $this.find(".royalSlider"),
            $options = $this.find(".w-slider-json"),
            options = $options[0].onclick() || {};
          if ($this.data("sliderInit") == 1) {
            return;
          }
          $this.data("sliderInit", 1);
          $options.remove();
          if (!$.fn.royalSlider) {
            return;
          }
          if ($this.parent().hasClass("w-post-elm")) {
            options.imageScaleMode = "fill";
          }
          options.usePreloader = !1;
          $slider.royalSlider(options);
          var slider = $slider.data("royalSlider");
          if (options.fullscreen && options.fullscreen.enabled) {
            var rsEnterFullscreen = function () {
              $slider.appendTo($("body"));
              slider.ev.off("rsEnterFullscreen", rsEnterFullscreen);
              slider.ev.on("rsExitFullscreen", rsExitFullscreen);
              slider.updateSliderSize();
            };
            slider.ev.on("rsEnterFullscreen", rsEnterFullscreen);
            var rsExitFullscreen = function () {
              $slider.prependTo($frame);
              slider.ev.off("rsExitFullscreen", rsExitFullscreen);
              slider.ev.on("rsEnterFullscreen", rsEnterFullscreen);
            };
          }
          slider.ev.on("rsAfterContentSet", function () {
            slider.slides.forEach(function (slide) {
              $(slide.content.find("img")[0]).attr(
                "alt",
                slide.caption.attr("data-alt")
              );
            });
          });
          $us.$canvas.on("contentChange", function () {
            $slider.parent().imagesLoaded(function () {
              slider.updateSliderSize();
            });
          });
        }.bind(this)
      );
    });
  };
  $(function () {
    jQuery(".w-slider").wSlider();
  });
})(jQuery);
!(function ($) {
  "use strict";
  $us.WItext = function (container) {
    var defaultOptions = { html_nbsp_char: !0 };
    this.$container = $(container);
    var $parts = this.$container.find(".w-itext-part");
    if ($parts.length === 0) {
      return;
    }
    var options = $.extend(defaultOptions, this.$container[0].onclick() || {});
    this.$container.removeAttr("onclick");
    var type = this.$container.usMod("type");
    this.animateChars =
      type.substring(type.length - "chars".length).toLowerCase() === "chars";
    this.duration = parseInt(options.duration) || 1000;
    this.delay = parseInt(options.delay) || 5000;
    this.dynamicColor = options.dynamicColor || "";
    this.disablePartAnimation = options.disablePartAnimation || !1;
    this.animateDurations = [];
    this.type = this.animateChars
      ? type.substring(0, type.length - "chars".length)
      : type;
    this.nbsp_char = options.html_nbsp_char ? "&nbsp;" : " ";
    this.parts = [];
    $parts.css({ transitionDuration: this.duration + "ms" }).each(
      function (index, part) {
        var part = {
          $node: $(part),
          currentState: 0,
          states: part.onclick() || [],
        };
        part.$node.removeAttr("onclick");
        if (this.dynamicColor) {
          part.$node.css("color", this.dynamicColor);
        }
        this.parts[index] = part;
      }.bind(this)
    );
    var timer = $us.timeout(
      function () {
        this.parts.map(
          function (part) {
            this._events.startAnimate.call(this, part);
          }.bind(this)
        );
        $us.clearTimeout(timer);
      }.bind(this),
      this.delay
    );
  };
  $us.WItext.prototype = {
    _events: {
      startAnimate: function (part) {
        part.currentState =
          part.currentState === part.states.length - 1
            ? 0
            : part.currentState + 1;
        this.render.call(this, part);
      },
      restartAnimate: function (part) {
        $us.timeout(this._events.startAnimate.bind(this, part), this.delay);
      },
      clearAnimation: function (part) {
        var text = part.states[part.currentState].replace(" ", this.nbsp_char);
        part.$node.html(text).css("width", "");
        if (this.type === "typing" && $.trim(text) && text !== this.nbsp_char) {
          part.$node.append('<i class="w-itext-cursor"></i>');
        }
        if (part.curDuration === Math.max.apply(null, this.animateDurations)) {
          this.animateDurations = [];
          this.parts.map(
            function (_part) {
              this._events.restartAnimate.call(this, _part);
            }.bind(this)
          );
        }
      },
    },
    render: function (part) {
      var nextValue = part.states[part.currentState],
        $curSpan = part.$node.wrapInner("<span></span>").children("span"),
        $nextSpan = $('<span class="measure"></span>')
          .html(nextValue.replace(" ", this.nbsp_char))
          .appendTo(part.$node),
        nextWidth = $nextSpan.width(),
        outType = "fadeOut",
        startDelay = 0;
      part.curDuration = this.duration;
      if (this.type === "typing") {
        var oldValue = $.trim($curSpan.text()) + " ",
          removeDuration = Math.floor(part.curDuration / 3);
        startDelay = Math.max.apply(null, [
          startDelay,
          removeDuration * oldValue.length,
        ]);
        for (var i = 0; i < oldValue.length; i++) {
          $curSpan.text(oldValue);
          $us.timeout(
            function () {
              var text = $curSpan.text();
              $curSpan.text(text.substring(0, text.length - 1));
            }.bind(this),
            removeDuration * i
          );
        }
      }
      $us.timeout(
        function () {
          part.$node.addClass("notransition");
          if (!this.disablePartAnimation) {
            part.$node.css("width", part.$node.width());
          }
          $us.timeout(
            function () {
              part.$node.removeClass("notransition");
              if (!this.disablePartAnimation) {
                part.$node.css("width", nextWidth);
              }
            }.bind(this),
            25
          );
          if (this.type !== "typing") {
            $curSpan
              .css({
                position: "absolute",
                top: 0,
                left: 0,
                width: !this.disablePartAnimation ? nextWidth : "",
                transitionDuration: this.duration / 5 + "ms",
              })
              .addClass("animated_" + outType);
          }
          if (!this.disablePartAnimation) {
            $nextSpan.css("width", nextWidth);
          }
          $nextSpan.removeClass("measure").prependTo(part.$node);
          if (this.animateChars) {
            $nextSpan.empty();
            if (this.type === "typing") {
              $nextSpan.append('<span class="w-itext-part-nospan"></span>');
            }
            for (var i = 0; i < nextValue.length; i++) {
              var $char = nextValue[i] !== " " ? nextValue[i] : this.nbsp_char;
              if (this.type !== "typing") {
                $char = $("<span>" + $char + "</span>");
                $char
                  .css("transition-duration", part.curDuration + "ms")
                  .appendTo($nextSpan);
                $char.appendTo($nextSpan);
              }
              $us.timeout(
                function ($char) {
                  if (this.type !== "typing") {
                    $char.addClass("animated_" + this.type);
                  } else {
                    var $text = $("> span:first", $nextSpan);
                    $text.html($text.html() + $char);
                  }
                }.bind(this, $char),
                part.curDuration * i
              );
            }
            if (
              this.type === "typing" &&
              $.trim(nextValue) &&
              nextValue !== this.nbsp_char
            ) {
              $nextSpan.append('<i class="w-itext-cursor"></i>');
            }
            part.curDuration *= nextValue.length + 1;
          } else {
            $nextSpan
              .wrapInner("<span></span>")
              .children("span")
              .css({ "animation-duration": this.duration + "ms" })
              .addClass("animated_" + this.type);
          }
          this.animateDurations.push(part.curDuration);
          $us.timeout(
            this._events.clearAnimation.bind(this, part),
            part.curDuration + Math.floor(this.delay / 3)
          );
        }.bind(this),
        startDelay
      );
    },
  };
  $.fn.wItext = function (options) {
    return this.each(function () {
      $(this).data("wItext", new $us.WItext(this, options));
    });
  };
  $(function () {
    $(".w-itext").wItext();
  });
})(jQuery);
!(function ($) {
  "use strict";
  $us.WLogin = function (container, options) {
    this.init(container, options);
  };
  $us.WLogin.prototype = {
    init: function (container, options) {
      this.$container = $(container);
      if (this.$container.data("loginInit") == 1) {
        return;
      }
      this.$container.data("loginInit", 1);
      this.$submitBtn = this.$container.find(".w-btn");
      this.$username = this.$container.find('.for_text input[type="text"]');
      this.$password = this.$container.find(
        '.for_password input[type="password"]'
      );
      this.$preloader = this.$container.siblings(".g-preloader");
      this.$nonceVal = this.$container.find("#us_login_nonce").val();
      this.$resultField = this.$container.find(".w-form-message");
      this.$jsonContainer = this.$container.find(".w-form-json");
      this.jsonData = this.$jsonContainer[0].onclick() || {};
      this.$jsonContainer.remove();
      this.ajaxUrl = this.jsonData.ajaxurl || "";
      this.loginRedirect = this.jsonData.login_redirect || "";
      this.logoutRedirect =
        this.jsonData.logout_redirect || window.location.href;
      this.use_ajax = !!this.jsonData.use_ajax;
      this._events = { formSubmit: this.formSubmit.bind(this) };
      this.$container.on("submit", this._events.formSubmit);
      if (this.use_ajax) {
        $.ajax({
          type: "post",
          url: this.ajaxUrl,
          data: {
            action: "us_ajax_user_info",
            logout_redirect: this.logoutRedirect,
          },
          success: function (result) {
            if (result.success) {
              this.$container.closest(".w-login").html(result.data);
            } else {
              this.$container.removeClass("hidden");
            }
            this.$preloader.addClass("hidden");
          }.bind(this),
        });
      }
    },
    formSubmit: function (event) {
      event.preventDefault();
      if (this.$submitBtn.hasClass("loading")) {
        return;
      }
      this.$resultField.usMod("type", !1).html("");
      this.$container
        .find(".w-form-row.check_wrong")
        .removeClass("check_wrong");
      this.$container.find(".w-form-state").html("");
      if (this.$container.find('.for_text input[type="text"]').val() == "") {
        this.$username.closest(".w-form-row").toggleClass("check_wrong");
        return;
      }
      this.$submitBtn.addClass("loading");
      $.ajax({
        type: "post",
        url: this.ajaxUrl,
        dataType: "json",
        data: {
          action: "us_ajax_login",
          username: this.$username.val(),
          password: this.$password.val(),
          us_login_nonce: this.$nonceVal,
        },
        success: function (result) {
          if (result.success) {
            document.location.href = this.loginRedirect;
          } else {
            if (result.data.code == "invalid_username") {
              var $rowLog = this.$username.closest(".w-form-row");
              $rowLog.toggleClass("check_wrong");
              $rowLog
                .find(".w-form-row-state")
                .html(result.data.message ? result.data.message : "");
            } else if (
              result.data.code == "incorrect_password" ||
              result.data.code == "empty_password"
            ) {
              var $rowPwd = this.$password.closest(".w-form-row");
              $rowPwd.toggleClass("check_wrong");
              $rowPwd
                .find(".w-form-row-state")
                .html(result.data.message ? result.data.message : "");
            } else {
              this.$resultField
                .usMod("type", "error")
                .html(result.data.message);
            }
            this.$submitBtn.removeClass("loading");
          }
        }.bind(this),
      });
    },
  };
  $.fn.wUsLogin = function (options) {
    return this.each(function () {
      $(this).data("wUsLogin", new $us.WLogin(this, options));
    });
  };
  $(function () {
    $(".w-login > .w-form").wUsLogin();
  });
})(jQuery);
!(function ($) {
  $us.Nav = function (container, options) {
    this.init(container, options);
  };
  $us.mobileNavOpened = 0;
  $us.Nav.prototype = {
    init: function (container, options) {
      this.$nav = $(container);
      if (this.$nav.length == 0) {
        return;
      }
      this.$control = this.$nav.find(".w-nav-control");
      this.$close = this.$nav.find(".w-nav-close");
      this.$items = this.$nav.find(".menu-item");
      this.$list = this.$nav.find(".w-nav-list.level_1");
      this.$subItems = this.$list.find(".menu-item-has-children");
      this.$subAnchors = this.$list.find(
        ".menu-item-has-children > .w-nav-anchor"
      );
      this.$subLists = this.$list.find(".menu-item-has-children > .w-nav-list");
      this.$anchors = this.$nav.find(".w-nav-anchor");
      this.$arrows = $(".w-nav-arrow");
      this.options = this.$nav.find(".w-nav-options:first")[0].onclick() || {};
      if (this.$nav.length == 0) {
        return;
      }
      this.type = this.$nav.usMod("type");
      this.layout = this.$nav.usMod("layout");
      this.mobileOpened = !1;
      if ($.isMobile && this.type == "desktop") {
        this.$list.on("click", '.w-nav-anchor[class*="level_"]', function (e) {
          var $target = $(e.currentTarget),
            $item = $target.closest(".menu-item");
          if (
            $target.usMod("level") > 1 &&
            !$item.hasClass("menu-item-has-children")
          ) {
            $target.parents(".menu-item.opened").removeClass("opened");
          }
        });
      }
      this.$control.on(
        "click",
        function () {
          this.mobileOpened = !this.mobileOpened;
          this.setTabIndex(!0);
          this.$anchors.each(function () {
            if ($(this).attr("href") == undefined) {
              $(this).attr("href", "javascript:void(0)");
            }
          });
          if (this.layout != "dropdown") {
            this.$anchors.removeAttr("tabindex");
          }
          if (this.mobileOpened) {
            $(".l-header .w-nav")
              .not(container)
              .each(function () {
                $(this).trigger("USNavClose");
              });
            this.$control.addClass("active");
            this.$items.filter(".opened").removeClass("opened");
            this.$subLists.resetInlineCSS("display", "height");
            if (this.layout == "dropdown") {
              this.$list.slideDownCSS(250, this._events.contentChanged);
            }
            $us.mobileNavOpened++;
          } else {
            this.$control.removeClass("active");
            if (this.layout == "dropdown") {
              this.$list.slideUpCSS(250, this._events.contentChanged);
            }
            this.setTabIndex();
            if (this.layout != "dropdown") {
              this.$anchors.attr("tabindex", -1);
            }
            $us.mobileNavOpened--;
          }
          $us.$canvas.trigger("contentChange");
        }.bind(this)
      );
      this.$control.on(
        "focusin",
        function (e) {
          if (this.type != "mobile" || this.layout == "dropdown") {
            return;
          }
          this.$anchors.attr("tabindex", -1);
        }.bind(this)
      );
      this.$close.on(
        "click",
        function () {
          this.mobileOpened = !1;
          this.$control.removeClass("active");
          $us.mobileNavOpened--;
          $us.$canvas.trigger("contentChange");
        }.bind(this)
      );
      $us.$document.keyup(
        function (e) {
          if (e.keyCode == 27) {
            if (this.mobileOpened) {
              if (this.layout == "dropdown") {
                this.$list.slideUpCSS(250, this._events.contentChanged);
              }
              this.mobileOpened = !1;
              this.$control.removeClass("active");
              this.setTabIndex();
              if (this.layout != "dropdown") {
                this.$anchors.attr("tabindex", -1);
              }
              $us.mobileNavOpened--;
              $us.$canvas.trigger("contentChange");
            }
          }
        }.bind(this)
      );
      this._events = {
        menuToggler: function ($item, show) {
          if (this.type != "mobile") {
            return;
          }
          var $sublist = $item.children(".w-nav-list");
          if (show) {
            $item.addClass("opened");
            $sublist.slideDownCSS(250, this._events.contentChanged);
          } else {
            $item.removeClass("opened");
            $sublist.slideUpCSS(250, this._events.contentChanged);
          }
        }.bind(this),
        focusHandler: function (e) {
          if (this.type == "mobile") {
            return;
          }
          var $item = $(e.target).closest(".menu-item"),
            $target = $(e.target);
          $item.parents(".menu-item").addClass("opened");
          $item.on("mouseleave", function () {
            $target.blur();
          });
        }.bind(this),
        blurHandler: function (e) {
          if (this.type == "mobile") {
            return;
          }
          var $item = $(e.target).closest(".menu-item");
          $item.parents(".menu-item").removeClass("opened");
        }.bind(this),
        clickHandler: function (e) {
          if (this.type != "mobile") {
            return;
          }
          e.stopPropagation();
          e.preventDefault();
          var $item = $(e.currentTarget).closest(".menu-item"),
            isOpened = $item.hasClass("opened");
          this._events.menuToggler($item, !isOpened);
        }.bind(this),
        keyDownHandler: function (e) {
          if (this.type != "mobile") {
            return;
          }
          var keyCode = e.keyCode || e.which;
          if (keyCode == 13) {
            var $target = $(e.target),
              $item = $target.closest(".menu-item"),
              isOpened = $item.hasClass("opened");
            if (!$target.is(this.$arrows)) {
              return;
            }
            e.stopPropagation();
            e.preventDefault();
            this._events.menuToggler($item, !isOpened);
          }
          if (keyCode == 9) {
            var $target = $(e.target) ? $(e.target) : {},
              i = this.$anchors.index($target),
              isDropdownLayout = this.layout == "dropdown" ? !0 : !1,
              closeMenu = function () {
                if (this.mobileOpened) {
                  if (isDropdownLayout) {
                    this.$list.slideUpCSS(250, this._events.contentChanged);
                  }
                  this.mobileOpened = !1;
                  this.$control.removeClass("active");
                  $us.mobileNavOpened--;
                  $us.$canvas.trigger("contentChange");
                  this.setTabIndex();
                  if (this.layout != "dropdown") {
                    this.$anchors.attr("tabindex", -1);
                  }
                }
              }.bind(this);
            if (e.shiftKey) {
              if (i === this.$anchors.length - 1 && this.layout != "dropdown") {
                this.$anchors.attr("tabindex", -1);
              }
              if (i === 0) {
                closeMenu();
              }
            } else {
              if (i === this.$anchors.length - 1) {
                closeMenu();
              }
            }
          }
        }.bind(this),
        resize: this.resize.bind(this),
        contentChanged: function () {
          if (
            this.type == "mobile" &&
            $us.header.isHorizontal() &&
            $us.canvas.headerPos == "fixed" &&
            this.layout == "fixed"
          ) {
            this.setFixedMobileMaxHeight();
          }
          $us.header.$container.trigger("contentChange");
        }.bind(this),
        close: function () {
          if (
            this.$list != undefined &&
            jQuery.fn.slideUpCSS != undefined &&
            this.mobileOpened &&
            this.type == "mobile"
          ) {
            this.mobileOpened = !1;
            if (this.layout == "dropdown" && this.headerOrientation == "hor") {
              this.$list.slideUpCSS(250);
            }
            $us.mobileNavOpened--;
            $us.$canvas.trigger("contentChange");
          }
        }.bind(this),
      };
      this.$subItems.each(
        function (index) {
          var $item = $(this.$subItems[index]),
            $arrow = $item.find(".w-nav-arrow").first(),
            $subAnchor = $item.find(".w-nav-anchor").first(),
            dropByLabel =
              $item.hasClass("mobile-drop-by_label") ||
              $item.parents(".menu-item").hasClass("mobile-drop-by_label"),
            dropByArrow =
              $item.hasClass("mobile-drop-by_arrow") ||
              $item.parents(".menu-item").hasClass("mobile-drop-by_arrow");
          if (dropByLabel || (this.options.mobileBehavior && !dropByArrow)) {
            $subAnchor.on("click", this._events.clickHandler);
          } else if (
            dropByArrow ||
            (!this.options.mobileBehavior && !dropByLabel)
          ) {
            $arrow.on("click", this._events.clickHandler);
            $arrow.on("click", this._events.keyDownHandler);
          }
        }.bind(this)
      );
      this.$subItems.each(function () {
        var $this = $(this),
          $parentItem = $this.parent().closest(".menu-item");
        if ($parentItem.length == 0 || $parentItem.usMod("columns") === !1) {
          $this.addClass("togglable");
        }
      });
      if (!$us.$html.hasClass("no-touch")) {
        this.$list.find(".menu-item-has-children.togglable > .w-nav-anchor").on(
          "click",
          function (e) {
            if (this.type == "mobile") {
              return;
            }
            e.preventDefault();
            var $this = $(e.currentTarget),
              $item = $this.parent();
            if ($item.hasClass("opened")) {
              return location.assign($this.attr("href"));
            }
            $item.addClass("opened");
            var outsideClickEvent = function (e) {
              if ($.contains($item[0], e.target)) {
                return;
              }
              $item.removeClass("opened");
              $us.$body.off("touchstart", outsideClickEvent);
            };
            $us.$body.on("touchstart", outsideClickEvent);
          }.bind(this)
        );
      }
      $($us.$document).on(
        "mouseup touchend",
        function (e) {
          if (this.mobileOpened && this.type == "mobile") {
            if (
              !this.$control.is(e.target) &&
              this.$control.has(e.target).length === 0 &&
              !this.$list.is(e.target) &&
              this.$list.has(e.target).length === 0
            ) {
              this.mobileOpened = !1;
              this.$control.removeClass("active");
              this.$items.filter(".opened").removeClass("opened");
              this.$subLists.slideUpCSS(250);
              if (
                this.layout == "dropdown" &&
                this.headerOrientation == "hor"
              ) {
                this.$list.slideUpCSS(250);
              }
              $us.mobileNavOpened--;
              $us.$canvas.trigger("contentChange");
            }
          }
        }.bind(this)
      );
      this.$anchors.on("focus.upsolution", this._events.focusHandler);
      this.$anchors.on("blur.upsolution", this._events.blurHandler);
      this.$nav.on("keydown.upsolution", this._events.keyDownHandler);
      this.$anchors.on(
        "click",
        function (e) {
          var $item = $(e.currentTarget).closest(".menu-item"),
            dropByLabel =
              $item.hasClass("mobile-drop-by_label") ||
              $item.parents(".menu-item").hasClass("mobile-drop-by_label"),
            dropByArrow =
              $item.hasClass("mobile-drop-by_arrow") ||
              $item.parents(".menu-item").hasClass("mobile-drop-by_arrow");
          if (this.type != "mobile" || $us.header.isVertical()) {
            return;
          }
          if (
            dropByLabel ||
            (this.options.mobileBehavior &&
              $item.hasClass("menu-item-has-children") &&
              !dropByArrow)
          ) {
            return;
          }
          this.mobileOpened = !1;
          this.$control.removeClass("active");
          if (this.layout == "dropdown") {
            this.$list.slideUpCSS(250);
          }
          $us.mobileNavOpened--;
          $us.$canvas.trigger("contentChange");
        }.bind(this)
      );
      $us.$window.on("resize", $us.debounce(this._events.resize, 5));
      $us.timeout(
        function () {
          this.resize();
          $us.header.$container.trigger("contentChange");
        }.bind(this),
        50
      );
      this.$nav.on("USNavClose", this._events.close);
    },
    setTabIndex: function (add) {
      this.$subItems.each(
        function (index) {
          var $item = $(this.$subItems[index]);
          if (
            $item.hasClass("mobile-drop-by_arrow") ||
            $item.parents(".menu-item").hasClass("mobile-drop-by_arrow") ||
            (!$item.hasClass("mobile-drop-by_label") &&
              !this.options.mobileBehavior)
          ) {
            if (add) {
              $item.find(".w-nav-arrow").attr("tabindex", 0);
            } else {
              $item.find(".w-nav-arrow").removeAttr("tabindex");
            }
          }
        }.bind(this)
      );
    },
    setFixedMobileMaxHeight: function () {
      this.$list.css(
        "max-height",
        $us.canvas.winHeight - $us.header.getCurrentHeight() + "px"
      );
    },
    resize: function () {
      if (this.$nav.length == 0) {
        return;
      }
      var nextType =
        window.innerWidth < this.options.mobileWidth ? "mobile" : "desktop";
      if (
        $us.header.orientation != this.headerOrientation ||
        nextType != this.type
      ) {
        this.$subLists.resetInlineCSS("display", "height");
        if (this.headerOrientation == "hor" && this.type == "mobile") {
          this.$list.resetInlineCSS(
            "display",
            "height",
            "max-height",
            "opacity"
          );
        }
        this.$items.removeClass("opened");
        this.headerOrientation = $us.header.orientation;
        this.type = nextType;
        this.$nav.usMod("type", nextType);
        this.setTabIndex();
        if (this.layout != "dropdown") {
          this.$anchors.removeAttr("tabindex");
        }
      }
      if (
        $us.header.isHorizontal() &&
        this.type == "mobile" &&
        this.layout == "dropdown" &&
        $us.header.isFixed()
      ) {
        this.setFixedMobileMaxHeight();
      }
      this.$list.removeClass("hide_for_mobiles");
    },
  };
  $.fn.usNav = function (options) {
    return this.each(function () {
      $(this).data("usNav", new $us.Nav(this, options));
    });
  };
  $(".l-header .w-nav").usNav();
})(jQuery);
(function ($) {
  "use strict";
  $.fn.usMessage = function () {
    return this.each(function () {
      var $this = $(this),
        $closer = $this.find(".w-message-close");
      $closer.click(function () {
        $this.wrap("<div></div>");
        var $wrapper = $this.parent();
        $wrapper.css({ overflow: "hidden", height: $this.outerHeight(!0) });
        $wrapper.performCSSTransition(
          { height: 0 },
          300,
          function () {
            $wrapper.remove();
            $us.$canvas.trigger("contentChange");
          },
          "cubic-bezier(.4,0,.2,1)"
        );
      });
    });
  };
  $(function () {
    $(".w-message").usMessage();
  });
})(jQuery);
!(function ($) {
  "use strict";
  $us.WLmaps = function (container, options) {
    this.init(container, options);
  };
  $us.WLmaps.prototype = {
    init: function (container, options) {
      this.$container = $(container);
      this.mapId = this.$container.attr("id");
      var $jsonContainer = this.$container.find(".w-map-json"),
        jsonOptions = $jsonContainer[0].onclick() || {},
        defaults = {};
      $jsonContainer.remove();
      this.options = $.extend({}, defaults, jsonOptions, options);
      this._events = { redraw: this.redraw.bind(this) };
      $us.$canvas.on("contentChange", this._events.redraw);
      this.beforeRender();
    },
    beforeRender: function () {
      var matches = this.options.address.match(/^(\d+.\d+)\s?,?\s?(\d+.\d+)$/);
      if (matches) {
        this.center = [matches[1], matches[2]];
        this.renderMap();
      } else {
        this.geocoder(this.options.address);
      }
    },
    redraw: function () {
      if (!this.lmap || this.$container.is(":hidden")) {
        return;
      }
      this.lmap.invalidateSize(!0);
    },
    geocoder: function (request, markerOptions, popup) {
      var endPoint =
          "https://nominatim.openstreetmap.org/search?format=json&limit=1&q=",
        that = this;
      $.getJSON(endPoint + encodeURI(request), function (json) {}).done(
        function (json) {
          if (!json.length) {
            return;
          }
          var bBox = json[0].boundingbox;
          if (!markerOptions) {
            that.center = [bBox[1], bBox[3]];
            that.renderMap();
          } else {
            that.marker = L.marker([bBox[1], bBox[3]], markerOptions).addTo(
              that.lmap
            );
            if (popup) {
              that.marker.bindPopup(popup);
            }
          }
        }
      );
    },
    renderMap: function () {
      var lmapsOptions = { center: this.center, zoom: this.options.zoom };
      if (this.options.hideControls) {
        lmapsOptions.zoomControl = !1;
      }
      if (this.options.disableZoom) {
        lmapsOptions.scrollWheelZoom = !1;
      }
      this.lmap = L.map(this.mapId, lmapsOptions);
      L.tileLayer(this.options.style, {
        attribution:
          '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      }).addTo(this.lmap);
      this.renderMarkers();
      if (this.options.disableDragging && !$us.$html.hasClass("no-touch")) {
        this.lmap.dragging.disable();
      }
    },
    renderMarkers: function () {
      if (this.options.markers.length) {
        var mainOptions = {};
        for (var i = 0; i < this.options.markers.length; i++) {
          if (i == 0) {
            if (this.options.icon != null) {
              var mainMarkerSizes = this.options.icon.size[0],
                markerImg = L.icon({
                  iconUrl: this.options.icon.url,
                  iconSize: mainMarkerSizes,
                });
              markerImg.options.iconAnchor = [
                mainMarkerSizes / 2,
                mainMarkerSizes,
              ];
              markerImg.options.popupAnchor = [0, -mainMarkerSizes];
              mainOptions.icon = markerImg;
            }
            var marker = L.marker(this.center, mainOptions).addTo(this.lmap);
            if (this.options.markers[i].html) {
              if (this.options.markers[i].infowindow) {
                marker.bindPopup(this.options.markers[i].html).openPopup();
              } else {
                marker.bindPopup(this.options.markers[i].html);
              }
            }
          } else {
            var markerOptions = {};
            if (this.options.markers[i].marker_img != null) {
              var markerSizes = this.options.markers[i].marker_size[0],
                markerImg = L.icon({
                  iconUrl: this.options.markers[i].marker_img[0],
                  iconSize: markerSizes,
                });
              markerImg.options.iconAnchor = [markerSizes / 2, markerSizes];
              markerImg.options.popupAnchor = [0, -markerSizes];
              markerOptions.icon = markerImg;
            } else {
              markerOptions = mainOptions;
            }
            var matches = this.options.markers[i].address.match(
              /^(-?\d+.\d+)\s?,?\s?(-?\d+.\d+)$/
            );
            if (matches) {
              this.marker = L.marker(
                [matches[1], matches[2]],
                markerOptions
              ).addTo(this.lmap);
              if (this.options.markers[i].html) {
                this.marker.bindPopup(this.options.markers[i].html);
              }
            } else {
              this.geocoder(
                this.options.markers[i].address,
                markerOptions,
                this.options.markers[i].html
              );
            }
          }
        }
      }
    },
  };
  $.fn.WLmaps = function (options) {
    return this.each(function () {
      $(this).data("wLmaps", new $us.WLmaps(this, options));
    });
  };
  $(function () {
    var $wLmap = $(".w-map.provider_osm");
    if ($wLmap.length) {
      $us.getScript(
        $us.templateDirectoryUri + "/common/js/vendor/leaflet.js",
        function () {
          $wLmap.WLmaps();
        }
      );
    }
  });
})(jQuery);
(function ($, undefined) {
  "use strict";
  $us.PageScroller = function (container, options) {
    this.init(container, options);
  };
  $us.PageScroller.prototype = {
    init: function (container, options) {
      var defaults = {
        coolDown: 100,
        animationDuration: 1000,
        animationEasing: $us.getAnimationName("easeInOutExpo"),
        endAnimationEasing: $us.getAnimationName("easeOutExpo"),
      };
      this.options = $.extend({}, defaults, options);
      this.$container = $(container);
      this._canvasTopOffset = $us.$canvas.offset().top;
      this.activeSection = 0;
      this.sections = [];
      this.initialSections = [];
      this.hiddenSections = [];
      this.currHidden = [];
      this.dots = [];
      this.scrolls = [];
      this.usingDots = !1;
      this.footerReveal = $us.$body.hasClass("footer_reveal");
      this.isTouch =
        "ontouchstart" in window ||
        navigator.msMaxTouchPoints > 0 ||
        navigator.maxTouchPoints;
      this.disableWidth =
        this.$container.data("disablewidth") !== undefined
          ? this.$container.data("disablewidth")
          : 768;
      this.hiddenClasses = {
        "uvc_hidden-xs": [0, 479],
        "uvc_hidden-xsl": [480, 767],
        "uvc_hidden-sm": [768, 991],
        "uvc_hidden-md": [992, 1199],
        "uvc_hidden-ml": [1200, 1823],
        "uvc_hidden-lg": [1824, 99999],
        "vc_hidden-xs": [0, 767],
        "vc_hidden-sm": [768, 991],
        "vc_hidden-md": [992, 1199],
        "vc_hidden-lg": [1200, 99999],
      };
      if (this.$container.data("speed") !== undefined) {
        this.options.animationDuration = this.$container.data("speed");
      }
      this._attachEvents();
      this._events = {
        scroll: this.scroll.bind(this),
        resize: this.resize.bind(this),
      };
      $us.$canvas.on("contentChange", $us.debounce(this._events.resize, 5));
      $us.$window.on(
        "resize",
        function (e, stop) {
          if (stop !== undefined) {
            $us.debounce(this._events.resize, 5);
          }
        }.bind(this)
      );
      $us.$window.on("scroll", $us.debounce(this._events.scroll, 5));
      $us.timeout(this._init.bind(this), 100);
      this.headerHeight = 0;
      $us.header.on(
        "transitionEnd",
        function (header) {
          this.headerHeight =
            header.getCurrentHeight() - header.getAdminBarHeight();
        }.bind(this)
      );
    },
    is_popup: function () {
      return $us.$html.hasClass("usoverlay_fixed");
    },
    _init: function () {
      if (
        $us.canvas.headerPos === "static" &&
        $us.header.isHorizontal() &&
        !$us.header.isTransparent()
      ) {
        $us.canvas.$header.each(
          function () {
            var $section = $us.canvas.$header,
              section = { $section: $section, area: "header" };
            this._countPosition(section);
            this.sections.push(section);
            this.initialSections.push(section);
          }.bind(this)
        );
      }
      $us.$canvas.find("> *:not(.l-header) .l-section").each(
        function (key, elm) {
          if ($(".l-section", elm).length) {
            return;
          }
          var $section = $(elm),
            section = {
              $section: $section,
              hiddenBoundaries: [],
              area: "content",
              isSticky: $section.hasClass("type_sticky"),
            },
            addedWidths = [];
          hidden: for (var i in this.hiddenClasses) {
            if (this.hiddenClasses.hasOwnProperty(i)) {
              var low = this.hiddenClasses[i][0],
                high = this.hiddenClasses[i][1];
              if ($section.hasClass(i)) {
                var addedWidthLength = addedWidths.length,
                  j;
                addedWidths.push([low, high]);
                for (j = 0; j < addedWidthLength; j++) {
                  if (addedWidths[j][0] === low && addedWidths[j][1] === high) {
                    break hidden;
                  }
                }
                section.hiddenBoundaries.push([low, high]);
                if (this.hiddenSections.indexOf(key) === -1) {
                  this.hiddenSections.push(key);
                }
              }
            }
          }
          this._countPosition(section, key);
          this.sections.push(section);
          this.initialSections.push(section);
        }.bind(this)
      );
      this.lastContentSectionIndex = this.sections.length - 1;
      $(".l-footer > .l-section").each(
        function (key, elm) {
          var $section = $(elm),
            section = {
              $section: $section,
              area: "footer",
              isSticky: $section.hasClass("type_sticky"),
            };
          this._countPosition(section, key);
          this.sections.push(section);
          this.initialSections.push(section);
        }.bind(this)
      );
      this.$dotsContainer = this.$container.find(".w-scroller-dots");
      if (this.$dotsContainer.length) {
        this.usingDots = !0;
        this.$firstDot = this.$dotsContainer.find(".w-scroller-dot").first();
        this.redrawDots(!0);
        this.scroll();
      }
    },
    isSectionHidden: function (section) {
      if (
        !this.initialSections[section].hiddenBoundaries ||
        !this.initialSections[section].hiddenBoundaries.length
      ) {
        return !1;
      }
      var currWidth = window.innerWidth,
        isHidden = !1;
      for (
        var i = 0;
        i < this.initialSections[section].hiddenBoundaries.length;
        i++
      ) {
        var low = this.initialSections[section].hiddenBoundaries[i][0],
          high = this.initialSections[section].hiddenBoundaries[i][1];
        if (currWidth >= low && currWidth <= high) {
          isHidden = !0;
          break;
        }
      }
      return isHidden;
    },
    redrawDots: function (inited) {
      if (!this.$dotsContainer.length || !this.usingDots) {
        return !1;
      }
      this.$dotsContainer.html("");
      for (var i = 0; i < this.sections.length; i++) {
        if (
          this.sections[i].area === "footer" &&
          !this.$container.data("footer-dots")
        ) {
          continue;
        }
        this.$firstDot.clone().appendTo(this.$dotsContainer);
      }
      this.$dots = this.$dotsContainer.find(".w-scroller-dot");
      this.$dots.each(
        function (key, elm) {
          var $dot = $(elm);
          this.dots[key] = $dot;
          $dot
            .click(
              function () {
                this.scrollTo(key);
                this.$dots.removeClass("active");
                $dot.addClass("active");
              }.bind(this)
            )
            .toggleClass(
              "hidden",
              this.sections[key].isSticky &&
                $us.$window.width() > $us.canvas.options.columnsStackingWidth
            );
        }.bind(this)
      );
      if (!!inited) {
        this.dots[this.activeSection].addClass("active");
      }
      this.$dotsContainer.addClass("show");
    },
    recountSections: function () {
      if (this.currHidden) {
        for (var initialSection in this.initialSections) {
          this.sections[initialSection] = this.initialSections[initialSection];
        }
      }
      for (var i = this.hiddenSections.length - 1; i >= 0; i--) {
        var indexOfTheItem = this.currHidden.indexOf(this.hiddenSections[i]);
        if (this.isSectionHidden(this.hiddenSections[i])) {
          if (indexOfTheItem === -1) {
            this.currHidden.push(this.hiddenSections[i]);
          }
          this.sections.splice(this.hiddenSections[i], 1);
        } else {
          this.currHidden.splice(indexOfTheItem, 1);
        }
      }
      this.redrawDots();
    },
    getScrollSpeed: function (number) {
      var sum = 0,
        lastElements = this.scrolls.slice(
          Math.max(this.scrolls.length - number, 1)
        );
      for (var i = 0; i < lastElements.length; i++) {
        sum = sum + lastElements[i];
      }
      return Math.ceil(sum / number);
    },
    _attachEvents: function () {
      var that = this;
      function mouseWheelHandler(e) {
        if (that.is_popup()) {
          return;
        }
        e.preventDefault();
        var currentTime = new Date().getTime(),
          target = that.activeSection,
          direction = e.wheelDelta || -e.detail,
          speedEnd,
          speedMiddle,
          isAccelerating;
        if (that.scrolls.length > 149) {
          that.scrolls.shift();
        }
        that.scrolls.push(Math.abs(direction));
        if (currentTime - that.previousMouseWheelTime > that.options.coolDown) {
          that.scrolls = [];
        }
        that.previousMouseWheelTime = currentTime;
        speedEnd = that.getScrollSpeed(10);
        speedMiddle = that.getScrollSpeed(70);
        isAccelerating = speedEnd >= speedMiddle;
        if (isAccelerating) {
          if (direction < 0) {
            target++;
          } else if (direction > 0) {
            target--;
          }
          if (that.sections[target] === undefined) {
            return;
          }
          that.scrollTo(target);
          that.lastScroll = currentTime;
        }
      }
      $us.$document.off("mousewheel DOMMouseScroll MozMousePixelScroll");
      document.removeEventListener("mousewheel", mouseWheelHandler);
      document.removeEventListener("DOMMouseScroll", mouseWheelHandler);
      document.removeEventListener("MozMousePixelScroll", mouseWheelHandler);
      $us.$canvas.off("touchstart touchmove");
      if (
        $us.$window.width() > this.disableWidth &&
        $us.mobileNavOpened <= 0 &&
        !$us.$html.hasClass("cloverlay_fixed")
      ) {
        document.addEventListener("mousewheel", mouseWheelHandler, {
          passive: !1,
        });
        document.addEventListener("DOMMouseScroll", mouseWheelHandler, {
          passive: !1,
        });
        document.addEventListener("MozMousePixelScroll", mouseWheelHandler, {
          passive: !1,
        });
        if ($.isMobile || this.isTouch) {
          $us.$canvas.on(
            "touchstart",
            function (event) {
              var e = event.originalEvent;
              if (
                typeof e.pointerType === "undefined" ||
                e.pointerType !== "mouse"
              ) {
                this.touchStartY = e.touches[0].pageY;
              }
            }.bind(this)
          );
          $us.$canvas.on(
            "touchmove",
            function (event) {
              event.preventDefault();
              var currentTime = new Date().getTime(),
                e = event.originalEvent,
                target = this.activeSection;
              this.touchEndY = e.touches[0].pageY;
              if (
                Math.abs(this.touchStartY - this.touchEndY) >
                $us.$window.height() / 50
              ) {
                if (this.touchStartY > this.touchEndY) {
                  target++;
                } else if (this.touchEndY > this.touchStartY) {
                  target--;
                }
                if (this.sections[target] === undefined) {
                  return;
                }
                this.scrollTo(target);
                this.lastScroll = currentTime;
              }
            }.bind(this)
          );
        }
      }
    },
    _countPosition: function (section, key) {
      section.top = section.$section.offset().top - this._canvasTopOffset;
      if (this.footerReveal && section.area === "footer" && key !== undefined) {
        if (
          window.innerWidth >
          parseInt($us.canvasOptions.columnsStackingWidth) - 1
        ) {
          if (
            this.sections[key - 1] !== undefined &&
            this.sections[key - 1].area === "footer"
          ) {
            section.top = this.sections[key - 1].bottom;
          } else {
            var rowIndex =
              this.sections[this.lastContentSectionIndex + key] !== undefined
                ? this.lastContentSectionIndex + key
                : key - 1;
            section.top = this.sections[rowIndex].bottom;
          }
        }
      }
      section.bottom = section.top + section.$section.outerHeight(!1);
    },
    _countAllPositions: function () {
      var counter = 0;
      for (var section in this.sections) {
        if (this.sections[section].$section.length) {
          this._countPosition(this.sections[section], counter);
        }
        counter++;
      }
    },
    scrollTo: function (target) {
      var currentTime = new Date().getTime();
      if (
        this.previousScrollTime !== undefined &&
        currentTime - this.previousScrollTime < this.options.animationDuration
      ) {
        return;
      }
      this.previousScrollTime = currentTime;
      if (
        this.sections[target].isSticky &&
        $us.$window.width() > $us.canvas.options.columnsStackingWidth
      ) {
        if (target > this.activeSection) {
          target += 1;
        } else {
          target -= 1;
        }
      }
      if (this.usingDots) {
        this.$dots.removeClass("active");
        if (this.dots[target] !== undefined) {
          this.dots[target].addClass("active");
        }
      }
      var top = parseInt(this.sections[target].top || 0);
      if (top === $us.header.getScrollTop()) {
        return;
      }
      var animateOptions = {
        duration: this.options.animationDuration,
        easing: this.options.animationEasing,
        start: function () {
          this.isScrolling = !0;
        }.bind(this),
        always: function () {
          this.isScrolling = !1;
          this.activeSection = target;
        }.bind(this),
        step: function (now, fx) {
          var newTop = top;
          if ($us.header.isStickyEnabled()) {
            newTop -= this.headerHeight;
          }
          if (fx.end !== newTop) {
            $us.$htmlBody
              .stop(!0, !1)
              .animate(
                { scrollTop: newTop },
                $.extend(animateOptions, {
                  easing: this.options.endAnimationEasing,
                })
              );
          }
        }.bind(this),
      };
      $us.$htmlBody.stop(!0, !1).animate({ scrollTop: top }, animateOptions);
    },
    resize: function (e) {
      if (this.is_popup()) {
        return !1;
      }
      this._attachEvents();
      this.recountSections();
      $us.timeout(this._countAllPositions.bind(this), 150);
    },
    scroll: function () {
      if (this.is_popup()) {
        return !1;
      }
      var currentTime = new Date().getTime();
      if (
        currentTime - this.lastScroll <
        this.options.coolDown + this.options.animationDuration
      ) {
        return;
      }
      $us.debounce(
        function () {
          var scrollTop = parseInt($us.$window.scrollTop() || 0);
          if ($us.header.isSticky()) {
            scrollTop += $us.header.getCurrentHeight();
          }
          for (var index in this.sections) {
            var section = this.sections[index];
            if (
              scrollTop >= parseInt(section.top - 1) &&
              scrollTop < parseInt(section.bottom - 1) &&
              section.area === "content" &&
              this.activeSection !== index
            ) {
              this.activeSection = index;
            }
          }
          if (this.usingDots) {
            this.$dots.removeClass("active");
            if (this.dots[this.activeSection] !== undefined) {
              this.dots[this.activeSection].addClass("active");
            }
          }
        }.bind(this),
        500
      )();
    },
  };
  $.fn.usPageScroller = function (options) {
    return this.each(function () {
      $(this).data("usPageScroller", new $us.PageScroller(this, options));
    });
  };
  $(function () {
    $us.timeout(function () {
      $(".w-scroller").usPageScroller();
    }, 0);
  });
})(jQuery);
!(function ($) {
  "use strict";
  if ($(".l-preloader").length) {
    $("document").ready(function () {
      $us.timeout(function () {
        $(".l-preloader").addClass("done");
      }, 500);
      $us.timeout(function () {
        $(".l-preloader").addClass("hidden");
      }, 1000);
    });
  }
})(jQuery);
!(function ($) {
  "use strict";
  $us.WPopup = function (container) {
    this.$container = $(container);
    this._events = {
      show: this.show.bind(this),
      afterShow: this.afterShow.bind(this),
      hide: this.hide.bind(this),
      preventHide: function (e) {
        e.stopPropagation();
      },
      afterHide: this.afterHide.bind(this),
      keyup: function (e) {
        if (e.key == "Escape") {
          this.hide();
        }
      }.bind(this),
      scroll: function () {
        $us.$document.trigger("scroll");
      },
    };
    this.transitionEndEvent =
      navigator.userAgent.search(/webkit/i) > 0
        ? "webkitTransitionEnd"
        : "transitionend";
    this.isFixed = !jQuery.isMobile;
    this.$trigger = this.$container.find(".w-popup-trigger");
    this.triggerType = this.$trigger.usMod("type");
    if (this.triggerType == "load") {
      var delay = this.$trigger.data("delay") || 2;
      $us.timeout(this.show.bind(this), delay * 1000);
    } else if (this.triggerType == "selector") {
      var selector = this.$trigger.data("selector");
      if (selector) {
        $us.$body.on("click", selector, this._events.show);
      }
    } else {
      this.$trigger.on("click", this._events.show);
    }
    this.$wrap = this.$container
      .find(".w-popup-wrap")
      .usMod("pos", this.isFixed ? "fixed" : "absolute")
      .on("click", this._events.hide);
    this.$box = this.$container.find(".w-popup-box");
    this.$overlay = this.$container
      .find(".w-popup-overlay")
      .usMod("pos", this.isFixed ? "fixed" : "absolute")
      .on("click", this._events.hide);
    this.$container.find(".w-popup-closer").on("click", this._events.hide);
    this.$box.on("click", this._events.preventHide);
    this.$media = $("video,audio", this.$box);
    this.timer = null;
  };
  $us.WPopup.prototype = {
    _hasScrollbar: function () {
      return (
        document.documentElement.scrollHeight >
        document.documentElement.clientHeight
      );
    },
    _getScrollbarSize: function () {
      if ($us.scrollbarSize === undefined) {
        var scrollDiv = document.createElement("div");
        scrollDiv.style.cssText =
          "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
        document.body.appendChild(scrollDiv);
        $us.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
      }
      return $us.scrollbarSize;
    },
    show: function () {
      clearTimeout(this.timer);
      this.$overlay.appendTo($us.$body).show();
      this.$wrap.appendTo($us.$body).css("display", "flex");
      if (this.isFixed) {
        $us.$html.addClass("usoverlay_fixed");
        this.windowHasScrollbar = this._hasScrollbar();
        if (this.windowHasScrollbar && this._getScrollbarSize()) {
          $us.$html.css("margin-right", this._getScrollbarSize());
        }
      } else {
        this.$overlay.css({ height: $us.$document.height() });
        this.$wrap.css("top", $us.$window.scrollTop());
      }
      $us.$body.on("keyup", this._events.keyup);
      this.$wrap.on("scroll", this._events.scroll);
      this.timer = setTimeout(this._events.afterShow, 25);
    },
    afterShow: function () {
      clearTimeout(this.timer);
      this.$overlay.addClass("active");
      this.$box.addClass("active");
      if (window.$us !== undefined && $us.$canvas !== undefined) {
        $us.$canvas.trigger("contentChange");
      }
      $us.$window.trigger("resize").trigger("us.wpopup.afterShow", this);
    },
    hide: function () {
      clearTimeout(this.timer);
      $us.$body.off("keyup", this._events.keyup);
      this.$box.on(this.transitionEndEvent, this._events.afterHide);
      this.$overlay.removeClass("active");
      this.$box.removeClass("active");
      this.$wrap.off("scroll", this._events.scroll);
      this.timer = setTimeout(this._events.afterHide, 1000);
    },
    afterHide: function () {
      clearTimeout(this.timer);
      this.$box.off(this.transitionEndEvent, this._events.afterHide);
      this.$overlay.appendTo(this.$container).hide();
      this.$wrap.appendTo(this.$container).hide();
      if (this.isFixed) {
        $us.$html.removeClass("usoverlay_fixed");
        if (this.windowHasScrollbar) {
          $us.$html.css("margin-right", "");
        }
        $us.$window.trigger("resize", !0).trigger("us.wpopup.afterHide", this);
      }
      if (this.$media.length) {
        this.$media.trigger("pause");
      }
    },
  };
  $.fn.wPopup = function (options) {
    return this.each(function () {
      $(this).data("wPopup", new $us.WPopup(this, options));
    });
  };
  $(function () {
    $(".w-popup").wPopup();
  });
})(jQuery);
(function ($, undefined) {
  "use strict";
  $us.WProgbar = function (container, options) {
    this.$container = $(container);
    this.$bar = $(".w-progbar-bar-h", this.$container);
    this.$count = $(
      ".w-progbar-title-count, .w-progbar-bar-count",
      this.$container
    );
    this.$title = $(".w-progbar-title", this.$container);
    this.options = {
      delay: 100,
      duration: 800,
      finalValue: 100,
      offset: "10%",
      startValue: 0,
      value: 50,
    };
    if (this.$container.is("[onclick]")) {
      $.extend(this.options, this.$container[0].onclick() || {});
      this.$container.removeAttr("onclick");
    }
    $.extend(this.options, options || {});
    if (
      /bot|googlebot|crawler|spider|robot|crawling/i.test(navigator.userAgent)
    ) {
      this.$container.removeClass("initial");
    }
    this.$count.text("");
    $us.waypoints.add(
      this.$container,
      this.options.offset,
      this.init.bind(this)
    );
  };
  $.extend($us.WProgbar.prototype, {
    init: function () {
      if (this.running) {
        return;
      }
      this.running = !0;
      if (this.$container.hasClass("initial")) {
        this.$container.removeClass("initial");
      }
      var loops = Math.ceil(this.options.duration / this.options.delay),
        increment = parseFloat(this.options.value) / loops,
        loopCount = 0,
        handle = null,
        startValue = 0;
      var funLoop = function () {
        startValue += increment;
        loopCount++;
        if (handle) {
          $us.clearTimeout(handle);
        }
        if (loopCount >= loops) {
          var result = this.options.template;
          if (this.options.hasOwnProperty("showFinalValue")) {
            result += " " + this.options.showFinalValue;
          }
          this.$count.text(result);
          return;
        }
        this.render.call(this, startValue);
        handle = $us.timeout(funLoop.bind(this), this.options.delay);
      };
      funLoop.call(this);
      var finalValue = parseFloat(this.options.finalValue),
        width = (
          (parseFloat(parseFloat(this.options.value)) /
            parseFloat(finalValue)) *
          100
        ).toFixed(0);
      this.$bar
        .on(
          "transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",
          this._events.transitionEnd.bind(this)
        )
        .css({
          width: width + "%",
          transitionDuration: parseInt(this.options.duration) + "ms",
        });
    },
    _events: {
      transitionEnd: function () {
        var result = this.options.template;
        if (this.options.hasOwnProperty("showFinalValue")) {
          result += " " + this.options.showFinalValue;
        }
        this.$count.text(result);
        this.running = !1;
      },
    },
    render: function (value) {
      var index = 0,
        result = ("" + this.options.template).replace(
          /([\-\d\.])/g,
          function (match) {
            value += "";
            if (index === 0 && match === "0") {
              if (value.charAt(index + 1) === "." || match === ".") {
                index++;
              }
              return match;
            }
            return value.charAt(index++) || "";
          }.bind(this)
        );
      if (result.charAt(index - 1) === ".") {
        result = result.substr(0, index - 1) + result.substr(index);
      }
      if (this.options.hasOwnProperty("showFinalValue")) {
        result += " " + this.options.showFinalValue;
      }
      this.$count.text(result);
    },
  });
  $.fn.wProgbar = function (options) {
    this.each(function () {
      $(this).data("wProgbar", new $us.WProgbar(this, options));
    });
  };
  $(function () {
    jQuery(".w-progbar").wProgbar();
  });
})(jQuery);
!(function ($) {
  "use strict";
  $.fn.wSearch = function () {
    return this.each(function () {
      var $container = $(this),
        $form = $container.find(".w-search-form"),
        $btnOpen = $container.find(".w-search-open"),
        $btnClose = $container.find(".w-search-close"),
        $input = $form.find('[name="s"]'),
        $overlay = $container.find(".w-search-background"),
        $window = $(window),
        searchOverlayInitRadius = 25,
        isFullScreen = $container.hasClass("layout_fullscreen"),
        isWithRipple = $container.hasClass("with_ripple"),
        searchHide = function (e) {
          e.preventDefault();
          e.stopPropagation();
          $container.removeClass("active");
          $input.blur();
          if (isWithRipple && isFullScreen) {
            $form.css({ transition: "opacity 0.4s" });
            $us.timeout(function () {
              $overlay
                .removeClass("overlay-on")
                .addClass("overlay-out")
                .css({ transform: "scale(0.1)" });
              $form.css("opacity", 0);
              $us.debounce(function () {
                $form.css("display", "none");
                $overlay.css("display", "none");
              }, 600)();
            }, 25);
          }
        },
        searchShow = function () {
          $container.addClass("active");
          if (isWithRipple && isFullScreen) {
            var searchPos = $btnOpen.offset(),
              searchWidth = $btnOpen.width(),
              searchHeight = $btnOpen.height();
            searchPos.top -= $window.scrollTop();
            searchPos.left -= $window.scrollLeft();
            var overlayX = searchPos.left + searchWidth / 2,
              overlayY = searchPos.top + searchHeight / 2,
              winWidth = $us.canvas.winWidth,
              winHeight = $us.canvas.winHeight,
              overlayRadius = Math.sqrt(
                Math.pow(Math.max(winWidth - overlayX, overlayX), 2) +
                  Math.pow(Math.max(winHeight - overlayY, overlayY), 2)
              ),
              overlayScale = (overlayRadius + 15) / searchOverlayInitRadius;
            $overlay.css({
              width: searchOverlayInitRadius * 2,
              height: searchOverlayInitRadius * 2,
              left: overlayX,
              top: overlayY,
              "margin-left": -searchOverlayInitRadius,
              "margin-top": -searchOverlayInitRadius,
            });
            $overlay.removeClass("overlay-out").show();
            $form.css({
              opacity: 0,
              display: "block",
              transition: "opacity 0.4s 0.3s",
            });
            $us.timeout(function () {
              $overlay
                .addClass("overlay-on")
                .css({ transform: "scale(" + overlayScale + ")" });
              $form.css("opacity", 1);
            }, 25);
            $input.trigger("focus");
          } else {
            $input.trigger("focus");
          }
        };
      $btnOpen.on("click", searchShow);
      $btnClose.on("click touchstart", searchHide);
      $input.keyup(function (e) {
        if (e.keyCode === 27) {
          searchHide(e);
        }
      });
    });
  };
  $(function () {
    jQuery(".l-header .w-search").wSearch();
  });
})(jQuery);
!(function ($) {
  "use strict";
  function WShare(selector) {
    var $this = $(selector),
      $parent = $this.parent(),
      first_image_src,
      opt = {
        url: window.location,
        text: document.title,
        lang: document.documentElement.lang,
        image: $('meta[name="og:image"]').attr("content") || "",
      };
    if (window.selectedText) {
      opt.text = window.selectedText;
    }
    if (
      $parent.attr("data-sharing-url") !== undefined &&
      $parent.attr("data-sharing-url") !== ""
    ) {
      opt.url = $parent.attr("data-sharing-url");
    }
    if (
      $parent.attr("data-sharing-image") !== undefined &&
      $parent.attr("data-sharing-image") !== ""
    ) {
      opt.image = $parent.attr("data-sharing-image");
    }
    if (opt.image === "" || opt.image === undefined) {
      first_image_src = $("img").first().attr("src");
      if (first_image_src !== undefined && first_image_src !== "") {
        opt.image = first_image_src;
      }
    }
    if ($this.hasClass("facebook")) {
      window.open(
        "https://www.facebook.com/sharer/sharer.php?u=" +
          encodeURIComponent(opt.url) +
          "&quote=" +
          encodeURIComponent(opt.text) +
          "",
        "facebook",
        "toolbar=0, status=0, width=900, height=500"
      );
    } else if ($this.hasClass("twitter")) {
      window.open(
        "https://twitter.com/intent/tweet?text=" +
          encodeURIComponent(opt.text) +
          "&url=" +
          encodeURIComponent(opt.url),
        "twitter",
        "toolbar=0, status=0, width=650, height=360"
      );
    } else if ($this.hasClass("linkedin")) {
      window.open(
        "https://www.linkedin.com/shareArticle?mini=true&url=" +
          encodeURIComponent(opt.url),
        "linkedin",
        "toolbar=no,width=550,height=550"
      );
    } else if ($this.hasClass("whatsapp")) {
      if (jQuery.isMobile) {
        window.open(
          "https://api.whatsapp.com/send?text=" +
            encodeURIComponent(opt.text + " " + opt.url),
          "whatsapp",
          "toolbar=0, status=0, width=900, height=500"
        );
      } else {
        window.open(
          "https://web.whatsapp.com/send?text=" +
            encodeURIComponent(opt.text + " " + opt.url),
          "whatsapp",
          "toolbar=0, status=0, width=900, height=500"
        );
      }
    } else if ($this.hasClass("xing")) {
      window.open(
        "https://www.xing.com/spi/shares/new?url=" +
          encodeURIComponent(opt.url),
        "xing",
        "toolbar=no, status=0, width=900, height=500"
      );
    } else if ($this.hasClass("reddit")) {
      window.open(
        "https://www.reddit.com/submit?url=" +
          encodeURIComponent(opt.url) +
          "&title=" +
          encodeURIComponent(opt.text),
        "reddit",
        "toolbar=no, status=0, width=900, height=500"
      );
    } else if ($this.hasClass("pinterest")) {
      window.open(
        "https://www.pinterest.com/pin/create/button/?url=" +
          encodeURIComponent(opt.url) +
          "&media=" +
          encodeURIComponent(opt.image) +
          "&description=" +
          encodeURIComponent(opt.text),
        "pinterest",
        "toolbar=no,width=700,height=300"
      );
    } else if ($this.hasClass("vk")) {
      window.open(
        "https://vk.com/share.php?url=" +
          encodeURIComponent(opt.url) +
          "&title=" +
          encodeURIComponent(opt.text) +
          "&description=&image=" +
          encodeURIComponent(opt.image),
        "vk",
        "toolbar=no,width=700,height=300"
      );
    } else if ($this.hasClass("telegram")) {
      window.open(
        "https://t.me/share/url?url=" +
          encodeURIComponent(opt.url) +
          "&text=" +
          encodeURIComponent(opt.text),
        "telegram",
        "toolbar=no,width=600,height=450"
      );
    } else if ($this.hasClass("email")) {
      window.location =
        "mailto:?subject=" + opt.text + "&body=" + encodeURIComponent(opt.url);
    }
  }
  if ($(".w-sharing-tooltip").length) {
    var activeArea = ".l-main";
    if ($(".w-sharing-tooltip").attr("data-sharing-area") === "post_content") {
      activeArea = ".w-post-elm.post_content";
    }
    $("body")
      .not(activeArea)
      .bind("mouseup", function () {
        var selection;
        if (window.getSelection) {
          selection = window.getSelection();
        } else if (document.selection) {
          selection = document.selection.createRange();
        }
        if (selection.toString() === "") {
          $(".w-sharing-tooltip.active:visible").hide();
        }
      });
    $(activeArea).bind("mouseup", function (e) {
      var selection,
        tooltip = "",
        url,
        $copy2clipboard = $(".w-sharing-item.copy2clipboard");
      if (window.getSelection) {
        selection = window.getSelection();
      } else if (document.selection) {
        selection = document.selection.createRange();
      }
      $(".w-sharing-tooltip").each(function () {
        if ($(this).hasClass("active")) {
          tooltip = this;
        }
      });
      if (tooltip === "") {
        $(".w-sharing-tooltip:first").addClass("active");
        $(".w-sharing-tooltip.active").appendTo("body");
        tooltip = ".w-sharing-tooltip.active";
      }
      if (selection.toString() !== "") {
        window.selectedText = selection.toString();
        $(tooltip).css({
          display: "inline-block",
          left: e.pageX,
          top: e.pageY - 50,
        });
      } else {
        window.selectedText = "";
        $(tooltip).hide();
      }
      $copy2clipboard.on("click", function () {
        if (
          $copy2clipboard.parent().attr("data-sharing-url") !== undefined &&
          $copy2clipboard.parent().attr("data-sharing-url") !== ""
        ) {
          url = $copy2clipboard.parent().attr("data-sharing-url");
        } else {
          url = window.location;
        }
        var el = document.createElement("textarea");
        el.value = window.selectedText + " " + url;
        el.setAttribute("readonly", "");
        el.style.position = "absolute";
        el.style.left = "-9999px";
        document.body.appendChild(el);
        el.select();
        document.execCommand("copy");
        document.body.removeChild(el);
        $(tooltip).hide();
      });
    });
  }
  $(".w-sharing-item").on("click", function () {
    WShare(this);
    $(".w-sharing-tooltip").hide();
  });
})(jQuery);
!(function ($) {
  "use strict";
  $us.WTabs = function (container, options) {
    this.init(container, options);
  };
  $us.WTabs.prototype = {
    init: function (container, options) {
      var defaults = { duration: 300, easing: "cubic-bezier(.78,.13,.15,.86)" };
      this.options = $.extend({}, defaults, options);
      this.isRtl = $(".l-body").hasClass("rtl");
      this.$container = $(container);
      this.$tabsList = this.$container.find("> .w-tabs-list:first");
      this.$tabs = this.$tabsList.find(".w-tabs-item");
      this.$sectionsWrapper = this.$container.find("> .w-tabs-sections:first");
      this.$sectionsHelper = this.$sectionsWrapper.children();
      this.$sections = this.$sectionsHelper.find("> .w-tabs-section");
      this.$headers = this.$sections.children(".w-tabs-section-header");
      this.$contents = this.$sections.children(".w-tabs-section-content");
      this.$line_charts = this.$container.find(".vc_line-chart");
      this.$round_charts = this.$container.find(".vc_round-chart");
      if (this.$container.hasClass("accordion")) {
        this.$tabs = this.$headers;
      }
      this.width = 0;
      this.tabWidths = [];
      this.tabHeights = [];
      this.tabTops = [];
      this.tabLefts = [];
      this.isScrolling = !1;
      this.hasScrolling = this.$container.hasClass("has_scrolling") || !1;
      this.isTogglable = this.$container.usMod("type") === "togglable";
      this.isStretched = this.$tabsList.hasClass("stretch");
      this.minWidth = 0;
      this.count = this.$tabs.length;
      if (this.count === 0) {
        return;
      }
      this.basicLayout = this.$container.hasClass("accordion")
        ? "accordion"
        : this.$container.usMod("layout") || "hor";
      this.curLayout = this.basicLayout;
      this.active = [];
      this.activeOnInit = [];
      this.definedActive = [];
      this.isTrendy = this.$container.hasClass("style_trendy");
      if (this.isTrendy) {
        this.$tabsBar = $();
      }
      this.tabs = $.map(this.$tabs.toArray(), $);
      this.sections = $.map(this.$sections.toArray(), $);
      this.headers = $.map(this.$headers.toArray(), $);
      this.contents = $.map(this.$contents.toArray(), $);
      if (!this.sections.length) {
        return;
      }
      $.each(
        this.tabs,
        function (index) {
          if (this.sections[index].hasClass("content-empty")) {
            this.tabs[index].hide();
            this.sections[index].hide();
          }
          if (this.tabs[index].hasClass("active")) {
            this.active.push(index);
            this.activeOnInit.push(index);
          }
          if (this.tabs[index].hasClass("defined-active")) {
            this.definedActive.push(index);
          }
          this.tabs[index].add(this.headers[index]).on(
            "click mouseover",
            function (e) {
              var $link = this.tabs[index];
              if (!$link.is("a")) {
                $link = $link.find("a");
              }
              if (
                !$link.length ||
                ($link.is("[href]") &&
                  $link.attr("href").indexOf("http") === -1)
              ) {
                e.preventDefault();
              }
              if (
                e.type == "mouseover" &&
                (this.$container.hasClass("accordion") ||
                  !this.$container.hasClass("switch_hover"))
              ) {
                return;
              }
              if (this.curLayout === "accordion" && this.isTogglable) {
                this.toggleSection(index);
              } else {
                if (index != this.active[0]) {
                  this.headerClicked = !0;
                  this.openSection(index);
                } else if (this.curLayout === "accordion") {
                  this.contents[index]
                    .css("display", "block")
                    .attr("aria-expanded", "true")
                    .slideUp(
                      this.options.duration,
                      this._events.contentChanged
                    );
                  this.tabs[index].removeClass("active");
                  this.sections[index].removeClass("active");
                  this.active[0] = undefined;
                }
              }
            }.bind(this)
          );
        }.bind(this)
      );
      this._events = {
        resize: this.resize.bind(this),
        hashchange: this.hashchange.bind(this),
        contentChanged: function () {
          $.each(this.contents, function (_, item) {
            var $content = $(item);
            $content.attr("aria-expanded", $content.is(":visible"));
          });
          $us.$canvas.trigger("contentChange");
          this.$line_charts.length &&
            jQuery.fn.vcLineChart &&
            this.$line_charts.vcLineChart({ reload: !1 });
          this.$round_charts.length &&
            jQuery.fn.vcRoundChart &&
            this.$round_charts.vcRoundChart({ reload: !1 });
        }.bind(this),
        wheel: function () {
          if (this.isScrolling) {
            $us.$htmlBody.stop(!0, !1);
          }
        },
      };
      this.switchLayout(this.curLayout);
      $us.$window
        .on("resize", $us.debounce(this._events.resize, 5))
        .on("hashchange", this._events.hashchange)
        .on("wheel", $us.debounce(this._events.wheel.bind(this), 5));
      $us.$document.ready(
        function () {
          this.resize();
          $us.timeout(this._events.resize, 50);
          $us.timeout(
            function () {
              if (window.location.hash) {
                var hash = window.location.hash.substr(1),
                  $linkedSection = this.$sectionsWrapper.find(
                    '.w-tabs-section[id="' + hash + '"]'
                  );
                if (
                  $linkedSection.length &&
                  !$linkedSection.hasClass("active")
                ) {
                  $linkedSection
                    .find(".w-tabs-section-header")
                    .trigger("click");
                }
              }
            }.bind(this),
            150
          );
        }.bind(this)
      );
      $.each(
        this.tabs,
        function (index) {
          if (
            this.headers.length &&
            this.headers[index].attr("href") != undefined
          ) {
            var tabHref = this.headers[index].attr("href"),
              tabHeader = this.headers[index];
            $('a[href="' + tabHref + '"]', this.$container).on(
              "click",
              function (e) {
                e.preventDefault();
                if ($(this).hasClass("w-tabs-section-header", "w-tabs-item")) {
                  return;
                }
                if (
                  !$(tabHeader).parent(".w-tabs-section").hasClass("active")
                ) {
                  tabHeader.trigger("click");
                }
              }
            );
          }
        }.bind(this)
      );
      this.$container.addClass("initialized");
      this.headerHeight = 0;
      $us.header.on(
        "transitionEnd",
        function (header) {
          this.headerHeight = header.getCurrentHeight();
        }.bind(this)
      );
    },
    hashchange: function () {
      if (window.location.hash) {
        var hash = window.location.hash.substr(1),
          $linkedSection = this.$sectionsWrapper.find(
            '.w-tabs-section[id="' + hash + '"]'
          );
        if ($linkedSection.length && !$linkedSection.hasClass("active")) {
          var $header = $linkedSection.find(".w-tabs-section-header");
          $header.click();
        }
      }
    },
    switchLayout: function (to) {
      this.cleanUpLayout(this.curLayout);
      this.prepareLayout(to);
      this.curLayout = to;
    },
    cleanUpLayout: function (from) {
      if (from === "hor") {
        this.$sectionsWrapper
          .clearPreviousTransitions()
          .resetInlineCSS("width", "height");
        this.$sectionsHelper
          .clearPreviousTransitions()
          .resetInlineCSS("position", "width", "left");
        this.$sections.resetInlineCSS("width", "display");
        this.$container.removeClass("autoresize");
      } else if (from === "accordion") {
        this.$container.removeClass("accordion");
        this.$sections.resetInlineCSS("display");
        this.$contents.resetInlineCSS(
          "height",
          "padding-top",
          "padding-bottom",
          "display",
          "opacity"
        );
      } else if (from === "ver") {
        this.$contents.resetInlineCSS(
          "height",
          "padding-top",
          "padding-bottom",
          "display",
          "opacity"
        );
      }
      if (this.isTrendy && (from === "hor" || from === "ver")) {
        this.$tabsBar.remove();
      }
    },
    prepareLayout: function (to) {
      if (to !== "accordion" && this.active[0] === undefined) {
        this.active[0] = this.activeOnInit[0];
        if (this.active[0] !== undefined) {
          this.tabs[this.active[0]].addClass("active");
          this.sections[this.active[0]].addClass("active");
        }
      }
      if (to === "hor") {
        this.$container.addClass("autoresize");
        this.$sectionsHelper.css("position", "absolute");
      } else if (to === "accordion") {
        this.$container.addClass("accordion");
        this.$contents.hide();
        if (
          this.curLayout !== "accordion" &&
          this.active[0] !== undefined &&
          this.active[0] !== this.definedActive[0]
        ) {
          this.tabs[this.active[0]].removeClass("active");
          this.sections[this.active[0]].removeClass("active");
          this.active[0] = this.definedActive[0];
        }
        for (var i = 0; i < this.active.length; i++) {
          if (this.contents[this.active[i]] !== undefined) {
            this.tabs[this.active[i]].addClass("active");
            this.sections[this.active[i]].addClass("active");
            this.contents[this.active[i]].attr("aria-expanded", "true").show();
          }
        }
      } else if (to === "ver") {
        this.$contents.hide();
        this.contents[this.active[0]].attr("aria-expanded", "true").show();
      }
      if (this.isTrendy && (to === "hor" || to === "ver")) {
        this.$tabsBar = $('<div class="w-tabs-list-bar"></div>').appendTo(
          this.$tabsList
        );
      }
    },
    measure: function () {
      if (this.basicLayout === "ver") {
        this.$tabsList.css("width", 0);
        var minTabWidth = this.$tabsList.outerWidth(!0);
        this.$tabsList.css("width", "");
        this.$container.addClass("measure");
        var minContentWidth = this.$sectionsWrapper.outerWidth(!0);
        this.$container.removeClass("measure");
        var navWidth = this.$container.usMod("navwidth");
        if (navWidth !== "auto") {
          minTabWidth = Math.max(
            minTabWidth,
            (minContentWidth * parseInt(navWidth)) / (100 - parseInt(navWidth))
          );
        }
        var width =
          !window.ontouchstart &&
          this.$container.closest(".vc_col-sm-6").parent(".type_boxes").length
            ? 480 -
              (parseInt(this.$container.closest(".vc_col-sm-6").width()) -
                this.$container.width())
            : 480;
        this.minWidth = Math.max(width, minContentWidth + minTabWidth + 1);
        if (this.isTrendy) {
          this.tabHeights = [];
          this.tabTops = [];
          for (var index = 0; index < this.tabs.length; index++) {
            this.tabHeights.push(this.tabs[index].outerHeight(!0));
            this.tabTops.push(
              index ? this.tabTops[index - 1] + this.tabHeights[index - 1] : 0
            );
          }
        }
      } else {
        if (this.basicLayout === "hor") {
          this.$container.addClass("measure");
          this.minWidth = 0;
          for (var index = 0; index < this.tabs.length; index++) {
            this.minWidth += this.tabs[index].outerWidth(!0);
          }
          this.$container.removeClass("measure");
        }
        if (this.isTrendy) {
          this.tabWidths = [];
          this.tabLefts = [];
          for (var index = 0; index < this.tabs.length; index++) {
            this.tabWidths.push(this.tabs[index].outerWidth(!0));
            this.tabLefts.push(
              index ? this.tabLefts[index - 1] + this.tabWidths[index - 1] : 0
            );
          }
        }
      }
    },
    barPosition: function (index) {
      if (this.curLayout === "hor") {
        var result = { width: this.tabWidths[index] };
        result[this.isRtl ? "right" : "left"] = this.tabLefts[index];
        return result;
      } else if (this.curLayout === "ver") {
        return { top: this.tabTops[index], height: this.tabHeights[index] };
      } else {
        return {};
      }
    },
    openSection: function (index) {
      if (this.sections[index] === undefined) {
        return;
      }
      if (this.curLayout === "hor") {
        this.$container.addClass("autoresize");
        this.$sections.removeClass("active").css("display", "none");
        this.sections[index]
          .stop(!0, !0)
          .fadeIn(this.options.duration, function () {
            $(this).addClass("active");
          });
      } else if (this.curLayout === "accordion") {
        if (this.contents[this.active[0]] !== undefined) {
          this.contents[this.active[0]]
            .css("display", "block")
            .attr("aria-expanded", "true")
            .stop(!0, !1)
            .slideUp(this.options.duration);
        }
        this.contents[index]
          .css("display", "none")
          .attr("aria-expanded", "false")
          .stop(!0, !1)
          .slideDown(
            this.options.duration,
            function () {
              this._events.contentChanged.call(this);
              if (
                this.basicLayout != "accordion" &&
                this.curLayout == "accordion"
              ) {
                this.hasScrolling = !0;
              }
              if (
                this.hasScrolling &&
                this.curLayout === "accordion" &&
                this.headerClicked == !0
              ) {
                var top = this.headers[index].offset().top;
                if (!jQuery.isMobile) {
                  top -= $us.$canvas.offset().top || 0;
                }
                var $prevStickySection = this.$container
                  .closest(".l-section")
                  .prevAll(".l-section.type_sticky");
                if ($prevStickySection.length) {
                  top -= parseInt($prevStickySection.outerHeight(!0));
                }
                var animateOptions = {
                  duration: $us.canvasOptions.scrollDuration,
                  easing: $us.getAnimationName("easeInOutExpo"),
                  start: function () {
                    this.isScrolling = !0;
                  }.bind(this),
                  always: function () {
                    this.isScrolling = !1;
                  }.bind(this),
                  step: function (now, fx) {
                    var newTop = top;
                    if ($us.header.isStickyEnabled()) {
                      newTop -= this.headerHeight;
                    }
                    if (fx.end !== newTop) {
                      $us.$htmlBody
                        .stop(!0, !1)
                        .animate(
                          { scrollTop: newTop },
                          $.extend(animateOptions, {
                            easing: $us.getAnimationName("easeOutExpo"),
                          })
                        );
                    }
                  }.bind(this),
                };
                $us.$htmlBody
                  .stop(!0, !1)
                  .animate({ scrollTop: top }, animateOptions);
                this.headerClicked = !1;
              }
            }.bind(this)
          );
        this.$sections.removeClass("active");
        this.sections[index].addClass("active");
      } else if (this.curLayout === "ver") {
        if (this.contents[this.active[0]] !== undefined) {
          this.contents[this.active[0]]
            .css("display", "none")
            .attr("aria-expanded", "false");
        }
        this.contents[index]
          .css("display", "none")
          .attr("aria-expanded", "false")
          .stop(!0, !0)
          .fadeIn(this.options.duration, this._events.contentChanged);
        this.$sections.removeClass("active");
        this.sections[index].addClass("active");
      }
      this._events.contentChanged();
      this.$tabs.removeClass("active");
      this.tabs[index].addClass("active");
      this.active[0] = index;
      if (
        this.isTrendy &&
        (this.curLayout === "hor" || this.curLayout === "ver")
      ) {
        this.$tabsBar.performCSSTransition(
          this.barPosition(index),
          this.options.duration,
          null,
          this.options.easing
        );
      }
    },
    toggleSection: function (index) {
      var indexPos = $.inArray(index, this.active);
      if (indexPos != -1) {
        this.contents[index]
          .css("display", "block")
          .attr("aria-expanded", "true")
          .slideUp(this.options.duration, this._events.contentChanged);
        this.tabs[index].removeClass("active");
        this.sections[index].removeClass("active");
        this.active.splice(indexPos, 1);
      } else {
        this.contents[index]
          .css("display", "none")
          .attr("aria-expanded", "false")
          .slideDown(this.options.duration, this._events.contentChanged);
        this.tabs[index].addClass("active");
        this.sections[index].addClass("active");
        this.active.push(index);
      }
    },
    resize: function () {
      this.width = this.$container.innerWidth();
      this.$tabsList.removeClass("hidden");
      if (
        this.curLayout !== "accordion" &&
        !this.width &&
        this.$container.closest(".w-nav").length &&
        !jQuery.isMobile
      ) {
        return;
      }
      var nextLayout =
        this.width < this.minWidth ? "accordion" : this.basicLayout;
      if (nextLayout !== this.curLayout) {
        this.switchLayout(nextLayout);
      }
      if (this.curLayout !== "accordion") {
        this.measure();
      }
      if (this.curLayout === "hor") {
        this.$container.addClass("autoresize");
        this.$sectionsWrapper.css("width", this.width);
        this.$sectionsHelper.css("width", this.count * this.width);
        this.$sections.css("width", this.width);
        if (this.contents[this.active[0]] !== undefined) {
          this.$sectionsHelper.css(
            "left",
            -this.width *
              (this.isRtl ? this.count - this.active[0] - 1 : this.active[0])
          );
          var height = this.sections[this.active[0]].height();
          this.$sectionsWrapper.css("height", height);
        }
      }
      this._events.contentChanged();
      if (
        this.isTrendy &&
        (this.curLayout === "hor" || this.curLayout === "ver")
      ) {
        this.$tabsBar.css(
          this.barPosition(this.active[0]),
          this.options.duration,
          null,
          this.options.easing
        );
      }
    },
  };
  $.fn.wTabs = function (options) {
    return this.each(function () {
      $(this).data("wTabs", new $us.WTabs(this, options));
    });
  };
  jQuery(".w-tabs").wTabs();
})(jQuery);
jQuery(function ($) {
  $(".w-tabs .rev_slider").each(function () {
    var $slider = $(this);
    $slider.bind("revolution.slide.onloaded", function (e) {
      $us.$canvas.on("contentChange", function () {
        $slider.revredraw();
      });
    });
  });
});
(function ($, undefined) {
  "use strict";
  $us.wVideo = function (container) {
    this.$container = $(container);
    this.$videoH = $(".w-video-h", this.$container);
    this.$template = $('script[type="us-template/html"]:first', this.$videoH);
    this.template = this.$template.html();
    this.$template.remove();
    if (this.$container.hasClass("with_overlay")) {
      this.$container.one("click", this._events.overlayClick.bind(this));
    }
  };
  $.extend($us.wVideo.prototype, {
    _events: {
      overlayClick: function (e) {
        e.preventDefault();
        this.$container
          .removeClass("with_overlay")
          .css("background-image", "none");
        this.$videoH.html(this.template);
      },
    },
  });
  $.fn.wVideo = function (options) {
    return this.each(function () {
      $(this).data("wVideo", new $us.wVideo(this, options));
    });
  };
  $(function () {
    $(".w-video").wVideo();
  });
})(jQuery);
(function ($) {
  var $window = $(window),
    windowHeight = $window.height();
  $.fn.parallax = function (xposParam) {
    this.each(function () {
      var $container = $(this),
        $this = $container.children(".l-section-img"),
        speedFactor,
        offsetFactor = 0,
        getHeight,
        topOffset = 0,
        containerHeight = 0,
        containerWidth = 0,
        disableParallax = !1,
        parallaxIsDisabled = !1,
        baseImgHeight = 0,
        baseImgWidth = 0,
        isBgCover = $this.css("background-size") == "cover",
        originalBgPos = $this.css("background-position"),
        curImgHeight = 0,
        reversed = $container.hasClass("parallaxdir_reversed"),
        baseSpeedFactor = reversed ? -0.1 : 0.61,
        xpos,
        outerHeight = !0;
      if ($this.length == 0) {
        return;
      }
      if (xposParam === undefined) {
        xpos = "50%";
      } else {
        xpos = xposParam;
      }
      if ($container.hasClass("parallax_xpos_right")) {
        xpos = "100%";
      } else if ($container.hasClass("parallax_xpos_left")) {
        xpos = "0%";
      }
      if (outerHeight) {
        getHeight = function (jqo) {
          return jqo.outerHeight(!0);
        };
      } else {
        getHeight = function (jqo) {
          return jqo.height();
        };
      }
      function getBackgroundSize(callback) {
        var img = new Image(),
          width,
          height,
          backgroundSize = ($this.css("background-size") || " ").split(" "),
          backgroundWidthAttr = $this.attr("data-img-width"),
          backgroundHeightAttr = $this.attr("data-img-height");
        if (backgroundWidthAttr != "") {
          width = parseInt(backgroundWidthAttr);
        }
        if (backgroundHeightAttr != "") {
          height = parseInt(backgroundHeightAttr);
        }
        if (width !== undefined && height !== undefined) {
          return callback({ width: width, height: height });
        }
        if (/px/.test(backgroundSize[0])) {
          width = parseInt(backgroundSize[0]);
        }
        if (/%/.test(backgroundSize[0])) {
          width = $this.parent().width() * (parseInt(backgroundSize[0]) / 100);
        }
        if (/px/.test(backgroundSize[1])) {
          height = parseInt(backgroundSize[1]);
        }
        if (/%/.test(backgroundSize[1])) {
          height =
            $this.parent().height() * (parseInt(backgroundSize[0]) / 100);
        }
        if (width !== undefined && height !== undefined) {
          return callback({ width: width, height: height });
        }
        img.onload = function () {
          if (typeof width == "undefined") {
            width = this.width;
          }
          if (typeof height == "undefined") {
            height = this.height;
          }
          callback({ width: width, height: height });
        };
        img.src = ($this.css("background-image") || "").replace(
          /url\(['"]*(.*?)['"]*\)/g,
          "$1"
        );
      }
      function update() {
        if (disableParallax) {
          if (!parallaxIsDisabled) {
            $this.css("backgroundPosition", originalBgPos);
            $container.usMod("parallax", "fixed");
            parallaxIsDisabled = !0;
          }
          return;
        } else {
          if (parallaxIsDisabled) {
            $container.usMod("parallax", "ver");
            parallaxIsDisabled = !1;
          }
        }
        if (isNaN(speedFactor)) {
          return;
        }
        var pos = $window.scrollTop();
        if (
          topOffset + containerHeight < pos ||
          pos < topOffset - windowHeight
        ) {
          return;
        }
        $this.css(
          "backgroundPosition",
          xpos + " " + (offsetFactor + speedFactor * (topOffset - pos)) + "px"
        );
      }
      function resize() {
        $us.timeout(function () {
          windowHeight = $window.height();
          containerHeight = getHeight($this);
          containerWidth = $this.width();
          if ($window.width() < $us.canvasOptions.disableEffectsWidth) {
            disableParallax = !0;
          } else {
            disableParallax = !1;
            if (isBgCover) {
              if (
                baseImgWidth / baseImgHeight <=
                containerWidth / containerHeight
              ) {
                curImgHeight = baseImgHeight * ($this.width() / baseImgWidth);
                disableParallax = !1;
              } else {
                disableParallax = !0;
              }
            }
          }
          if (curImgHeight !== 0) {
            if (baseSpeedFactor >= 0) {
              speedFactor = Math.min(
                baseSpeedFactor,
                curImgHeight / windowHeight
              );
              offsetFactor = Math.min(
                0,
                0.5 *
                  (windowHeight -
                    curImgHeight -
                    speedFactor * (windowHeight - containerHeight))
              );
            } else {
              speedFactor = Math.min(
                baseSpeedFactor,
                (windowHeight - containerHeight) /
                  (windowHeight + containerHeight)
              );
              offsetFactor = Math.max(0, speedFactor * containerHeight);
            }
          } else {
            speedFactor = baseSpeedFactor;
            offsetFactor = 0;
          }
          topOffset = $this.offset().top;
          update();
        }, 10);
      }
      getBackgroundSize(function (sz) {
        curImgHeight = baseImgHeight = sz.height;
        baseImgWidth = sz.width;
        resize();
      });
      $window.bind({ scroll: update, load: resize, resize: resize });
      resize();
    });
  };
  jQuery(".parallax_ver").parallax("50%");
})(jQuery);
jQuery(function ($) {
  "use strict";
  jQuery(
    ".upb_bg_img, .upb_color, .upb_grad, .upb_content_iframe, .upb_content_video, .upb_no_bg"
  ).each(function () {
    var $bg = jQuery(this),
      $prev = $bg.prev();
    if ($prev.length == 0) {
      var $parent = $bg.parent(),
        $parentParent = $parent.parent(),
        $prevParentParent = $parentParent.prev();
      if ($prevParentParent.length) {
        $bg.insertAfter($prevParentParent);
        if ($parent.children().length == 0) {
          $parentParent.remove();
        }
      }
    }
  });
  $(".g-cols > .ult-item-wrap").each(function (index, elm) {
    var $elm = jQuery(elm);
    $elm.replaceWith($elm.children());
  });
  jQuery(".overlay-show").click(function () {
    window.setTimeout(function () {
      $us.$canvas.trigger("contentChange");
    }, 1000);
  });
});
jQuery(function ($) {
  var $cart = $(".w-cart");
  if ($cart.length == 0) {
    return;
  }
  var $quantity = $cart.find(".w-cart-quantity");
  var us_accessibility = function () {
    $cart.find("a").on("focus.upsolution", function () {
      $(this).closest(".w-cart").addClass("opened");
    });
    $cart.find("a").on("blur.upsolution", function () {
      $(this).closest(".w-cart").removeClass("opened");
    });
  };
  us_accessibility();
  var updateCart = function () {
    if ($cart.hasClass("opened")) {
      $cart.removeClass("opened");
    }
    var $mini_cart_amount = $cart.find(".us_mini_cart_amount").first(),
      mini_cart_amount = $mini_cart_amount.text();
    if (mini_cart_amount !== undefined) {
      mini_cart_amount = mini_cart_amount + "";
      mini_cart_amount = mini_cart_amount.match(/\d+/g);
      if (mini_cart_amount > 0) {
        $quantity.html(mini_cart_amount);
        $cart.removeClass("empty");
      } else {
        $quantity.html("0");
        $cart.addClass("empty");
      }
    } else {
      var $quantities = $cart.find(".quantity"),
        total = 0;
      $quantities.each(function () {
        var quantity,
          text = $(this).text() + "",
          matches = text.match(/\d+/g);
        if (matches) {
          quantity = parseInt(matches[0], 10);
          total += quantity;
        }
      });
      if (total > 0) {
        $quantity.html(total);
        $cart.removeClass("empty");
      } else {
        $quantity.html("0");
        $cart.addClass("empty");
      }
    }
  };
  updateCart();
  $(document.body).bind("wc_fragments_loaded", function () {
    updateCart();
    us_accessibility();
  });
  $(document.body).bind("wc_fragments_refreshed", function () {
    updateCart();
    us_accessibility();
  });
  var $notification = $cart.find(".w-cart-notification"),
    $productName = $notification.find(".product-name"),
    $cartLink = $cart.find(".w-cart-link"),
    $dropdown = $cart.find(".w-cart-dropdown"),
    $quantity = $cart.find(".w-cart-quantity"),
    productName = $productName.text(),
    showFn = "fadeInCSS",
    hideFn = "fadeOutCSS",
    opened = !1;
  $notification.on("click", function () {
    $notification[hideFn]();
  });
  jQuery("body").bind(
    "added_to_cart",
    function (event, fragments, cart_hash, $button) {
      if (event === undefined) {
        return;
      }
      updateCart();
      productName = $button
        .closest(".product")
        .find(".woocommerce-loop-product__title")
        .text();
      $productName.html(productName);
      $notification.addClass("shown");
      $notification.on("mouseenter", function () {
        $notification.removeClass("shown");
      });
      var newTimerId = setTimeout(function () {
        $notification.removeClass("shown");
        $notification.off("mouseenter");
      }, 3000);
    }
  );
  if ($.isMobile) {
    var outsideClickEvent = function (e) {
      if (jQuery.contains($cart[0], e.target)) {
        return;
      }
      $cart.removeClass("opened");
      $us.$body.off("touchstart", outsideClickEvent);
      opened = !1;
    };
    $cartLink.on("click", function (e) {
      if (!opened) {
        e.preventDefault();
        $cart.addClass("opened");
        $us.$body.on("touchstart", outsideClickEvent);
      } else {
        $cart.removeClass("opened");
        $us.$body.off("touchstart", outsideClickEvent);
      }
      opened = !opened;
    });
  }
});
!(function (i) {
  "use strict";
  "function" == typeof define && define.amd
    ? define(["jquery"], i)
    : "undefined" != typeof exports
    ? (module.exports = i(require("jquery")))
    : i(jQuery);
})(function (i) {
  "use strict";
  var e = window.Slick || {};
  (e = (function () {
    function e(e, o) {
      var s,
        n = this;
      (n.defaults = {
        accessibility: !0,
        adaptiveHeight: !1,
        appendArrows: i(e),
        appendDots: i(e),
        arrows: !0,
        asNavFor: null,
        prevArrow:
          '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
        nextArrow:
          '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
        autoplay: !1,
        autoplaySpeed: 3e3,
        centerMode: !1,
        centerPadding: "50px",
        cssEase: "ease",
        customPaging: function (e, t) {
          return i(
            '<button type="button" data-role="none" role="button" tabindex="0" />'
          ).text(t + 1);
        },
        dots: !1,
        dotsClass: "slick-dots",
        draggable: !0,
        easing: "linear",
        edgeFriction: 0.35,
        fade: !1,
        focusOnSelect: !1,
        infinite: !0,
        initialSlide: 0,
        lazyLoad: "ondemand",
        mobileFirst: !1,
        pauseOnHover: !0,
        pauseOnFocus: !0,
        pauseOnDotsHover: !1,
        respondTo: "window",
        responsive: null,
        rows: 1,
        rtl: !1,
        slide: "",
        slidesPerRow: 1,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 500,
        swipe: !0,
        swipeToSlide: !1,
        touchMove: !0,
        touchThreshold: 5,
        useCSS: !0,
        useTransform: !0,
        variableWidth: !1,
        vertical: !1,
        verticalSwiping: !1,
        waitForAnimate: !0,
        zIndex: 1e3,
      }),
        (n.initials = {
          animating: !1,
          dragging: !1,
          autoPlayTimer: null,
          currentDirection: 0,
          currentLeft: null,
          currentSlide: 0,
          direction: 1,
          $dots: null,
          listWidth: null,
          listHeight: null,
          loadIndex: 0,
          $nextArrow: null,
          $prevArrow: null,
          slideCount: null,
          slideWidth: null,
          $slideTrack: null,
          $slides: null,
          sliding: !1,
          slideOffset: 0,
          swipeLeft: null,
          $list: null,
          touchObject: {},
          transformsEnabled: !1,
          unslicked: !1,
        }),
        i.extend(n, n.initials),
        (n.activeBreakpoint = null),
        (n.animType = null),
        (n.animProp = null),
        (n.breakpoints = []),
        (n.breakpointSettings = []),
        (n.cssTransitions = !1),
        (n.focussed = !1),
        (n.interrupted = !1),
        (n.hidden = "hidden"),
        (n.paused = !0),
        (n.positionProp = null),
        (n.respondTo = null),
        (n.rowCount = 1),
        (n.shouldClick = !0),
        (n.$slider = i(e)),
        (n.$slidesCache = null),
        (n.transformType = null),
        (n.transitionType = null),
        (n.visibilityChange = "visibilitychange"),
        (n.windowWidth = 0),
        (n.windowTimer = null),
        (s = i(e).data("slick") || {}),
        (n.options = i.extend({}, n.defaults, o, s)),
        (n.currentSlide = n.options.initialSlide),
        (n.originalSettings = n.options),
        "undefined" != typeof document.mozHidden
          ? ((n.hidden = "mozHidden"),
            (n.visibilityChange = "mozvisibilitychange"))
          : "undefined" != typeof document.webkitHidden &&
            ((n.hidden = "webkitHidden"),
            (n.visibilityChange = "webkitvisibilitychange")),
        (n.autoPlay = i.proxy(n.autoPlay, n)),
        (n.autoPlayClear = i.proxy(n.autoPlayClear, n)),
        (n.autoPlayIterator = i.proxy(n.autoPlayIterator, n)),
        (n.changeSlide = i.proxy(n.changeSlide, n)),
        (n.clickHandler = i.proxy(n.clickHandler, n)),
        (n.selectHandler = i.proxy(n.selectHandler, n)),
        (n.setPosition = i.proxy(n.setPosition, n)),
        (n.swipeHandler = i.proxy(n.swipeHandler, n)),
        (n.dragHandler = i.proxy(n.dragHandler, n)),
        (n.keyHandler = i.proxy(n.keyHandler, n)),
        (n.instanceUid = t++),
        (n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/),
        n.registerBreakpoints(),
        n.init(!0);
    }
    var t = 0;
    return e;
  })()),
    (e.prototype.activateADA = function () {
      var i = this;
      i.$slideTrack
        .find(".slick-active")
        .attr({ "aria-hidden": "false" })
        .find("a, input, button, select")
        .attr({ tabindex: "0" });
    }),
    (e.prototype.addSlide = e.prototype.slickAdd =
      function (e, t, o) {
        var s = this;
        if ("boolean" == typeof t) (o = t), (t = null);
        else if (0 > t || t >= s.slideCount) return !1;
        s.unload(),
          "number" == typeof t
            ? 0 === t && 0 === s.$slides.length
              ? i(e).appendTo(s.$slideTrack)
              : o
              ? i(e).insertBefore(s.$slides.eq(t))
              : i(e).insertAfter(s.$slides.eq(t))
            : o === !0
            ? i(e).prependTo(s.$slideTrack)
            : i(e).appendTo(s.$slideTrack),
          (s.$slides = s.$slideTrack.children(this.options.slide)),
          s.$slideTrack.children(this.options.slide).detach(),
          s.$slideTrack.append(s.$slides),
          s.$slides.each(function (e, t) {
            i(t).attr("data-slick-index", e);
          }),
          (s.$slidesCache = s.$slides),
          s.reinit();
      }),
    (e.prototype.animateHeight = function () {
      var i = this;
      if (
        1 === i.options.slidesToShow &&
        i.options.adaptiveHeight === !0 &&
        i.options.vertical === !1
      ) {
        var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
        i.$list.animate({ height: e }, i.options.speed);
      }
    }),
    (e.prototype.animateSlide = function (e, t) {
      var o = {},
        s = this;
      s.animateHeight(),
        s.options.rtl === !0 && s.options.vertical === !1 && (e = -e),
        s.transformsEnabled === !1
          ? s.options.vertical === !1
            ? s.$slideTrack.animate(
                { left: e },
                s.options.speed,
                s.options.easing,
                t
              )
            : s.$slideTrack.animate(
                { top: e },
                s.options.speed,
                s.options.easing,
                t
              )
          : s.cssTransitions === !1
          ? (s.options.rtl === !0 && (s.currentLeft = -s.currentLeft),
            i({ animStart: s.currentLeft }).animate(
              { animStart: e },
              {
                duration: s.options.speed,
                easing: s.options.easing,
                step: function (i) {
                  (i = Math.ceil(i)),
                    s.options.vertical === !1
                      ? ((o[s.animType] = "translate(" + i + "px, 0px)"),
                        s.$slideTrack.css(o))
                      : ((o[s.animType] = "translate(0px," + i + "px)"),
                        s.$slideTrack.css(o));
                },
                complete: function () {
                  t && t.call();
                },
              }
            ))
          : (s.applyTransition(),
            (e = Math.ceil(e)),
            s.options.vertical === !1
              ? (o[s.animType] = "translate3d(" + e + "px, 0px, 0px)")
              : (o[s.animType] = "translate3d(0px," + e + "px, 0px)"),
            s.$slideTrack.css(o),
            t &&
              setTimeout(function () {
                s.disableTransition(), t.call();
              }, s.options.speed));
    }),
    (e.prototype.getNavTarget = function () {
      var e = this,
        t = e.options.asNavFor;
      return t && null !== t && (t = i(t).not(e.$slider)), t;
    }),
    (e.prototype.asNavFor = function (e) {
      var t = this,
        o = t.getNavTarget();
      null !== o &&
        "object" == typeof o &&
        o.each(function () {
          var t = i(this).slick("getSlick");
          t.unslicked || t.slideHandler(e, !0);
        });
    }),
    (e.prototype.applyTransition = function (i) {
      var e = this,
        t = {};
      e.options.fade === !1
        ? (t[e.transitionType] =
            e.transformType + " " + e.options.speed + "ms " + e.options.cssEase)
        : (t[e.transitionType] =
            "opacity " + e.options.speed + "ms " + e.options.cssEase),
        e.options.fade === !1 ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
    }),
    (e.prototype.autoPlay = function () {
      var i = this;
      i.autoPlayClear(),
        i.slideCount > i.options.slidesToShow &&
          (i.autoPlayTimer = setInterval(
            i.autoPlayIterator,
            i.options.autoplaySpeed
          ));
    }),
    (e.prototype.autoPlayClear = function () {
      var i = this;
      i.autoPlayTimer && clearInterval(i.autoPlayTimer);
    }),
    (e.prototype.autoPlayIterator = function () {
      var i = this,
        e = i.currentSlide + i.options.slidesToScroll;
      i.paused ||
        i.interrupted ||
        i.focussed ||
        (i.options.infinite === !1 &&
          (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1
            ? (i.direction = 0)
            : 0 === i.direction &&
              ((e = i.currentSlide - i.options.slidesToScroll),
              i.currentSlide - 1 === 0 && (i.direction = 1))),
        i.slideHandler(e));
    }),
    (e.prototype.buildArrows = function () {
      var e = this;
      e.options.arrows === !0 &&
        ((e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow")),
        (e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow")),
        e.slideCount > e.options.slidesToShow
          ? (e.$prevArrow
              .removeClass("slick-hidden")
              .removeAttr("aria-hidden tabindex"),
            e.$nextArrow
              .removeClass("slick-hidden")
              .removeAttr("aria-hidden tabindex"),
            e.htmlExpr.test(e.options.prevArrow) &&
              e.$prevArrow.prependTo(e.options.appendArrows),
            e.htmlExpr.test(e.options.nextArrow) &&
              e.$nextArrow.appendTo(e.options.appendArrows),
            e.options.infinite !== !0 &&
              e.$prevArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"))
          : e.$prevArrow
              .add(e.$nextArrow)
              .addClass("slick-hidden")
              .attr({ "aria-disabled": "true", tabindex: "-1" }));
    }),
    (e.prototype.buildDots = function () {
      var e,
        t,
        o = this;
      if (o.options.dots === !0 && o.slideCount > o.options.slidesToShow) {
        for (
          o.$slider.addClass("slick-dotted"),
            t = i("<ul />").addClass(o.options.dotsClass),
            e = 0;
          e <= o.getDotCount();
          e += 1
        )
          t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));
        (o.$dots = t.appendTo(o.options.appendDots)),
          o.$dots
            .find("li")
            .first()
            .addClass("slick-active")
            .attr("aria-hidden", "false");
      }
    }),
    (e.prototype.buildOut = function () {
      var e = this;
      (e.$slides = e.$slider
        .children(e.options.slide + ":not(.slick-cloned)")
        .addClass("slick-slide")),
        (e.slideCount = e.$slides.length),
        e.$slides.each(function (e, t) {
          i(t)
            .attr("data-slick-index", e)
            .data("originalStyling", i(t).attr("style") || "");
        }),
        e.$slider.addClass("slick-slider"),
        (e.$slideTrack =
          0 === e.slideCount
            ? i('<div class="slick-track"/>').appendTo(e.$slider)
            : e.$slides.wrapAll('<div class="slick-track"/>').parent()),
        (e.$list = e.$slideTrack
          .wrap('<div aria-live="polite" class="slick-list"/>')
          .parent()),
        e.$slideTrack.css("opacity", 0),
        (e.options.centerMode === !0 || e.options.swipeToSlide === !0) &&
          (e.options.slidesToScroll = 1),
        i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"),
        e.setupInfinite(),
        e.buildArrows(),
        e.buildDots(),
        e.updateDots(),
        e.setSlideClasses(
          "number" == typeof e.currentSlide ? e.currentSlide : 0
        ),
        e.options.draggable === !0 && e.$list.addClass("draggable");
    }),
    (e.prototype.buildRows = function () {
      var i,
        e,
        t,
        o,
        s,
        n,
        r,
        l = this;
      if (
        ((o = document.createDocumentFragment()),
        (n = l.$slider.children()),
        l.options.rows > 1)
      ) {
        for (
          r = l.options.slidesPerRow * l.options.rows,
            s = Math.ceil(n.length / r),
            i = 0;
          s > i;
          i++
        ) {
          var a = document.createElement("div");
          for (e = 0; e < l.options.rows; e++) {
            var d = document.createElement("div");
            for (t = 0; t < l.options.slidesPerRow; t++) {
              var c = i * r + (e * l.options.slidesPerRow + t);
              n.get(c) && d.appendChild(n.get(c));
            }
            a.appendChild(d);
          }
          o.appendChild(a);
        }
        l.$slider.empty().append(o),
          l.$slider
            .children()
            .children()
            .children()
            .css({
              width: 100 / l.options.slidesPerRow + "%",
              display: "inline-block",
            });
      }
    }),
    (e.prototype.checkResponsive = function (e, t) {
      var o,
        s,
        n,
        r = this,
        l = !1,
        a = r.$slider.width(),
        d = window.innerWidth || i(window).width();
      if (
        ("window" === r.respondTo
          ? (n = d)
          : "slider" === r.respondTo
          ? (n = a)
          : "min" === r.respondTo && (n = Math.min(d, a)),
        r.options.responsive &&
          r.options.responsive.length &&
          null !== r.options.responsive)
      ) {
        s = null;
        for (o in r.breakpoints)
          r.breakpoints.hasOwnProperty(o) &&
            (r.originalSettings.mobileFirst === !1
              ? n < r.breakpoints[o] && (s = r.breakpoints[o])
              : n > r.breakpoints[o] && (s = r.breakpoints[o]));
        null !== s
          ? null !== r.activeBreakpoint
            ? (s !== r.activeBreakpoint || t) &&
              ((r.activeBreakpoint = s),
              "unslick" === r.breakpointSettings[s]
                ? r.unslick(s)
                : ((r.options = i.extend(
                    {},
                    r.originalSettings,
                    r.breakpointSettings[s]
                  )),
                  e === !0 && (r.currentSlide = r.options.initialSlide),
                  r.refresh(e)),
              (l = s))
            : ((r.activeBreakpoint = s),
              "unslick" === r.breakpointSettings[s]
                ? r.unslick(s)
                : ((r.options = i.extend(
                    {},
                    r.originalSettings,
                    r.breakpointSettings[s]
                  )),
                  e === !0 && (r.currentSlide = r.options.initialSlide),
                  r.refresh(e)),
              (l = s))
          : null !== r.activeBreakpoint &&
            ((r.activeBreakpoint = null),
            (r.options = r.originalSettings),
            e === !0 && (r.currentSlide = r.options.initialSlide),
            r.refresh(e),
            (l = s)),
          e || l === !1 || r.$slider.trigger("breakpoint", [r, l]);
      }
    }),
    (e.prototype.changeSlide = function (e, t) {
      var o,
        s,
        n,
        r = this,
        l = i(e.currentTarget);
      switch (
        (l.is("a") && e.preventDefault(),
        l.is("li") || (l = l.closest("li")),
        (n = r.slideCount % r.options.slidesToScroll !== 0),
        (o = n
          ? 0
          : (r.slideCount - r.currentSlide) % r.options.slidesToScroll),
        e.data.message)
      ) {
        case "previous":
          (s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o),
            r.slideCount > r.options.slidesToShow &&
              r.slideHandler(r.currentSlide - s, !1, t);
          break;
        case "next":
          (s = 0 === o ? r.options.slidesToScroll : o),
            r.slideCount > r.options.slidesToShow &&
              r.slideHandler(r.currentSlide + s, !1, t);
          break;
        case "index":
          var a =
            0 === e.data.index
              ? 0
              : e.data.index || l.index() * r.options.slidesToScroll;
          r.slideHandler(r.checkNavigable(a), !1, t),
            l.children().trigger("focus");
          break;
        default:
          return;
      }
    }),
    (e.prototype.checkNavigable = function (i) {
      var e,
        t,
        o = this;
      if (((e = o.getNavigableIndexes()), (t = 0), i > e[e.length - 1]))
        i = e[e.length - 1];
      else
        for (var s in e) {
          if (i < e[s]) {
            i = t;
            break;
          }
          t = e[s];
        }
      return i;
    }),
    (e.prototype.cleanUpEvents = function () {
      var e = this;
      e.options.dots &&
        null !== e.$dots &&
        i("li", e.$dots)
          .off("click.slick", e.changeSlide)
          .off("mouseenter.slick", i.proxy(e.interrupt, e, !0))
          .off("mouseleave.slick", i.proxy(e.interrupt, e, !1)),
        e.$slider.off("focus.slick blur.slick"),
        e.options.arrows === !0 &&
          e.slideCount > e.options.slidesToShow &&
          (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide),
          e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide)),
        e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler),
        e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler),
        e.$list.off("touchend.slick mouseup.slick", e.swipeHandler),
        e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler),
        e.$list.off("click.slick", e.clickHandler),
        i(document).off(e.visibilityChange, e.visibility),
        e.cleanUpSlideEvents(),
        e.options.accessibility === !0 &&
          e.$list.off("keydown.slick", e.keyHandler),
        e.options.focusOnSelect === !0 &&
          i(e.$slideTrack).children().off("click.slick", e.selectHandler),
        i(window).off(
          "orientationchange.slick.slick-" + e.instanceUid,
          e.orientationChange
        ),
        i(window).off("resize.slick.slick-" + e.instanceUid, e.resize),
        i("[draggable!=true]", e.$slideTrack).off(
          "dragstart",
          e.preventDefault
        ),
        i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition),
        i(document).off("ready.slick.slick-" + e.instanceUid, e.setPosition);
    }),
    (e.prototype.cleanUpSlideEvents = function () {
      var e = this;
      e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)),
        e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));
    }),
    (e.prototype.cleanUpRows = function () {
      var i,
        e = this;
      e.options.rows > 1 &&
        ((i = e.$slides.children().children()),
        i.removeAttr("style"),
        e.$slider.empty().append(i));
    }),
    (e.prototype.clickHandler = function (i) {
      var e = this;
      e.shouldClick === !1 &&
        (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault());
    }),
    (e.prototype.destroy = function (e) {
      var t = this;
      t.autoPlayClear(),
        (t.touchObject = {}),
        t.cleanUpEvents(),
        i(".slick-cloned", t.$slider).detach(),
        t.$dots && t.$dots.remove(),
        t.$prevArrow &&
          t.$prevArrow.length &&
          (t.$prevArrow
            .removeClass("slick-disabled slick-arrow slick-hidden")
            .removeAttr("aria-hidden aria-disabled tabindex")
            .css("display", ""),
          t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()),
        t.$nextArrow &&
          t.$nextArrow.length &&
          (t.$nextArrow
            .removeClass("slick-disabled slick-arrow slick-hidden")
            .removeAttr("aria-hidden aria-disabled tabindex")
            .css("display", ""),
          t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()),
        t.$slides &&
          (t.$slides
            .removeClass(
              "slick-slide slick-active slick-center slick-visible slick-current"
            )
            .removeAttr("aria-hidden")
            .removeAttr("data-slick-index")
            .each(function () {
              i(this).attr("style", i(this).data("originalStyling"));
            }),
          t.$slideTrack.children(this.options.slide).detach(),
          t.$slideTrack.detach(),
          t.$list.detach(),
          t.$slider.append(t.$slides)),
        t.cleanUpRows(),
        t.$slider.removeClass("slick-slider"),
        t.$slider.removeClass("slick-initialized"),
        t.$slider.removeClass("slick-dotted"),
        (t.unslicked = !0),
        e || t.$slider.trigger("destroy", [t]);
    }),
    (e.prototype.disableTransition = function (i) {
      var e = this,
        t = {};
      (t[e.transitionType] = ""),
        e.options.fade === !1 ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
    }),
    (e.prototype.fadeSlide = function (i, e) {
      var t = this;
      t.cssTransitions === !1
        ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }),
          t.$slides
            .eq(i)
            .animate({ opacity: 1 }, t.options.speed, t.options.easing, e))
        : (t.applyTransition(i),
          t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }),
          e &&
            setTimeout(function () {
              t.disableTransition(i), e.call();
            }, t.options.speed));
    }),
    (e.prototype.fadeSlideOut = function (i) {
      var e = this;
      e.cssTransitions === !1
        ? e.$slides
            .eq(i)
            .animate(
              { opacity: 0, zIndex: e.options.zIndex - 2 },
              e.options.speed,
              e.options.easing
            )
        : (e.applyTransition(i),
          e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 }));
    }),
    (e.prototype.filterSlides = e.prototype.slickFilter =
      function (i) {
        var e = this;
        null !== i &&
          ((e.$slidesCache = e.$slides),
          e.unload(),
          e.$slideTrack.children(this.options.slide).detach(),
          e.$slidesCache.filter(i).appendTo(e.$slideTrack),
          e.reinit());
      }),
    (e.prototype.focusHandler = function () {
      var e = this;
      e.$slider
        .off("focus.slick blur.slick")
        .on("focus.slick blur.slick", "*:not(.slick-arrow)", function (t) {
          t.stopImmediatePropagation();
          var o = i(this);
          setTimeout(function () {
            e.options.pauseOnFocus &&
              ((e.focussed = o.is(":focus")), e.autoPlay());
          }, 0);
        });
    }),
    (e.prototype.getCurrent = e.prototype.slickCurrentSlide =
      function () {
        var i = this;
        return i.currentSlide;
      }),
    (e.prototype.getDotCount = function () {
      var i = this,
        e = 0,
        t = 0,
        o = 0;
      if (i.options.infinite === !0)
        for (; e < i.slideCount; )
          ++o,
            (e = t + i.options.slidesToScroll),
            (t +=
              i.options.slidesToScroll <= i.options.slidesToShow
                ? i.options.slidesToScroll
                : i.options.slidesToShow);
      else if (i.options.centerMode === !0) o = i.slideCount;
      else if (i.options.asNavFor)
        for (; e < i.slideCount; )
          ++o,
            (e = t + i.options.slidesToScroll),
            (t +=
              i.options.slidesToScroll <= i.options.slidesToShow
                ? i.options.slidesToScroll
                : i.options.slidesToShow);
      else
        o =
          1 +
          Math.ceil(
            (i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll
          );
      return o - 1;
    }),
    (e.prototype.getLeft = function (i) {
      var e,
        t,
        o,
        s = this,
        n = 0;
      return (
        (s.slideOffset = 0),
        (t = s.$slides.first().outerHeight(!0)),
        s.options.infinite === !0
          ? (s.slideCount > s.options.slidesToShow &&
              ((s.slideOffset = s.slideWidth * s.options.slidesToShow * -1),
              (n = t * s.options.slidesToShow * -1)),
            s.slideCount % s.options.slidesToScroll !== 0 &&
              i + s.options.slidesToScroll > s.slideCount &&
              s.slideCount > s.options.slidesToShow &&
              (i > s.slideCount
                ? ((s.slideOffset =
                    (s.options.slidesToShow - (i - s.slideCount)) *
                    s.slideWidth *
                    -1),
                  (n = (s.options.slidesToShow - (i - s.slideCount)) * t * -1))
                : ((s.slideOffset =
                    (s.slideCount % s.options.slidesToScroll) *
                    s.slideWidth *
                    -1),
                  (n = (s.slideCount % s.options.slidesToScroll) * t * -1))))
          : i + s.options.slidesToShow > s.slideCount &&
            ((s.slideOffset =
              (i + s.options.slidesToShow - s.slideCount) * s.slideWidth),
            (n = (i + s.options.slidesToShow - s.slideCount) * t)),
        s.slideCount <= s.options.slidesToShow &&
          ((s.slideOffset = 0), (n = 0)),
        s.options.centerMode === !0 && s.options.infinite === !0
          ? (s.slideOffset +=
              s.slideWidth * Math.floor(s.options.slidesToShow / 2) -
              s.slideWidth)
          : s.options.centerMode === !0 &&
            ((s.slideOffset = 0),
            (s.slideOffset +=
              s.slideWidth * Math.floor(s.options.slidesToShow / 2))),
        (e =
          s.options.vertical === !1
            ? i * s.slideWidth * -1 + s.slideOffset
            : i * t * -1 + n),
        s.options.variableWidth === !0 &&
          ((o =
            s.slideCount <= s.options.slidesToShow || s.options.infinite === !1
              ? s.$slideTrack.children(".slick-slide").eq(i)
              : s.$slideTrack
                  .children(".slick-slide")
                  .eq(i + s.options.slidesToShow)),
          (e =
            s.options.rtl === !0
              ? o[0]
                ? -1 * (s.$slideTrack.width() - o[0].offsetLeft - o.width())
                : 0
              : o[0]
              ? -1 * o[0].offsetLeft
              : 0),
          s.options.centerMode === !0 &&
            ((o =
              s.slideCount <= s.options.slidesToShow ||
              s.options.infinite === !1
                ? s.$slideTrack.children(".slick-slide").eq(i)
                : s.$slideTrack
                    .children(".slick-slide")
                    .eq(i + s.options.slidesToShow + 1)),
            (e =
              s.options.rtl === !0
                ? o[0]
                  ? -1 * (s.$slideTrack.width() - o[0].offsetLeft - o.width())
                  : 0
                : o[0]
                ? -1 * o[0].offsetLeft
                : 0),
            (e += (s.$list.width() - o.outerWidth()) / 2))),
        e
      );
    }),
    (e.prototype.getOption = e.prototype.slickGetOption =
      function (i) {
        var e = this;
        return e.options[i];
      }),
    (e.prototype.getNavigableIndexes = function () {
      var i,
        e = this,
        t = 0,
        o = 0,
        s = [];
      for (
        e.options.infinite === !1
          ? (i = e.slideCount)
          : ((t = -1 * e.options.slidesToScroll),
            (o = -1 * e.options.slidesToScroll),
            (i = 2 * e.slideCount));
        i > t;

      )
        s.push(t),
          (t = o + e.options.slidesToScroll),
          (o +=
            e.options.slidesToScroll <= e.options.slidesToShow
              ? e.options.slidesToScroll
              : e.options.slidesToShow);
      return s;
    }),
    (e.prototype.getSlick = function () {
      return this;
    }),
    (e.prototype.getSlideCount = function () {
      var e,
        t,
        o,
        s = this;
      return (
        (o =
          s.options.centerMode === !0
            ? s.slideWidth * Math.floor(s.options.slidesToShow / 2)
            : 0),
        s.options.swipeToSlide === !0
          ? (s.$slideTrack.find(".slick-slide").each(function (e, n) {
              return n.offsetLeft - o + i(n).outerWidth() / 2 > -1 * s.swipeLeft
                ? ((t = n), !1)
                : void 0;
            }),
            (e = Math.abs(i(t).attr("data-slick-index") - s.currentSlide) || 1))
          : s.options.slidesToScroll
      );
    }),
    (e.prototype.goTo = e.prototype.slickGoTo =
      function (i, e) {
        var t = this;
        t.changeSlide({ data: { message: "index", index: parseInt(i) } }, e);
      }),
    (e.prototype.init = function (e) {
      var t = this;
      i(t.$slider).hasClass("slick-initialized") ||
        (i(t.$slider).addClass("slick-initialized"),
        t.buildRows(),
        t.buildOut(),
        t.setProps(),
        t.startLoad(),
        t.loadSlider(),
        t.initializeEvents(),
        t.updateArrows(),
        t.updateDots(),
        t.checkResponsive(!0),
        t.focusHandler()),
        e && t.$slider.trigger("init", [t]),
        t.options.accessibility === !0 && t.initADA(),
        t.options.autoplay && ((t.paused = !1), t.autoPlay());
    }),
    (e.prototype.initADA = function () {
      var e = this;
      e.$slides
        .add(e.$slideTrack.find(".slick-cloned"))
        .attr({ "aria-hidden": "true", tabindex: "-1" })
        .find("a, input, button, select")
        .attr({ tabindex: "-1" }),
        e.$slideTrack.attr("role", "listbox"),
        e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function (t) {
          i(this).attr({
            role: "option",
            "aria-describedby": "slick-slide" + e.instanceUid + t,
          });
        }),
        null !== e.$dots &&
          e.$dots
            .attr("role", "tablist")
            .find("li")
            .each(function (t) {
              i(this).attr({
                role: "presentation",
                "aria-selected": "false",
                "aria-controls": "navigation" + e.instanceUid + t,
                id: "slick-slide" + e.instanceUid + t,
              });
            })
            .first()
            .attr("aria-selected", "true")
            .end()
            .find("button")
            .attr("role", "button")
            .end()
            .closest("div")
            .attr("role", "toolbar"),
        e.activateADA();
    }),
    (e.prototype.initArrowEvents = function () {
      var i = this;
      i.options.arrows === !0 &&
        i.slideCount > i.options.slidesToShow &&
        (i.$prevArrow
          .off("click.slick")
          .on("click.slick", { message: "previous" }, i.changeSlide),
        i.$nextArrow
          .off("click.slick")
          .on("click.slick", { message: "next" }, i.changeSlide));
    }),
    (e.prototype.initDotEvents = function () {
      var e = this;
      e.options.dots === !0 &&
        e.slideCount > e.options.slidesToShow &&
        i("li", e.$dots).on("click.slick", { message: "index" }, e.changeSlide),
        e.options.dots === !0 &&
          e.options.pauseOnDotsHover === !0 &&
          i("li", e.$dots)
            .on("mouseenter.slick", i.proxy(e.interrupt, e, !0))
            .on("mouseleave.slick", i.proxy(e.interrupt, e, !1));
    }),
    (e.prototype.initSlideEvents = function () {
      var e = this;
      e.options.pauseOnHover &&
        (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)),
        e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));
    }),
    (e.prototype.initializeEvents = function () {
      var e = this;
      e.initArrowEvents(),
        e.initDotEvents(),
        e.initSlideEvents(),
        e.$list.on(
          "touchstart.slick mousedown.slick",
          { action: "start" },
          e.swipeHandler
        ),
        e.$list.on(
          "touchmove.slick mousemove.slick",
          { action: "move" },
          e.swipeHandler
        ),
        e.$list.on(
          "touchend.slick mouseup.slick",
          { action: "end" },
          e.swipeHandler
        ),
        e.$list.on(
          "touchcancel.slick mouseleave.slick",
          { action: "end" },
          e.swipeHandler
        ),
        e.$list.on("click.slick", e.clickHandler),
        i(document).on(e.visibilityChange, i.proxy(e.visibility, e)),
        e.options.accessibility === !0 &&
          e.$list.on("keydown.slick", e.keyHandler),
        e.options.focusOnSelect === !0 &&
          i(e.$slideTrack).children().on("click.slick", e.selectHandler),
        i(window).on(
          "orientationchange.slick.slick-" + e.instanceUid,
          i.proxy(e.orientationChange, e)
        ),
        i(window).on(
          "resize.slick.slick-" + e.instanceUid,
          i.proxy(e.resize, e)
        ),
        i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault),
        i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition),
        i(document).on("ready.slick.slick-" + e.instanceUid, e.setPosition);
    }),
    (e.prototype.initUI = function () {
      var i = this;
      i.options.arrows === !0 &&
        i.slideCount > i.options.slidesToShow &&
        (i.$prevArrow.show(), i.$nextArrow.show()),
        i.options.dots === !0 &&
          i.slideCount > i.options.slidesToShow &&
          i.$dots.show();
    }),
    (e.prototype.keyHandler = function (i) {
      var e = this;
      i.target.tagName.match("TEXTAREA|INPUT|SELECT") ||
        (37 === i.keyCode && e.options.accessibility === !0
          ? e.changeSlide({
              data: { message: e.options.rtl === !0 ? "next" : "previous" },
            })
          : 39 === i.keyCode &&
            e.options.accessibility === !0 &&
            e.changeSlide({
              data: { message: e.options.rtl === !0 ? "previous" : "next" },
            }));
    }),
    (e.prototype.lazyLoad = function () {
      function e(e) {
        i("img[data-lazy]", e).each(function () {
          var e = i(this),
            t = i(this).attr("data-lazy"),
            o = document.createElement("img");
          (o.onload = function () {
            e.animate({ opacity: 0 }, 100, function () {
              e.attr("src", t).animate({ opacity: 1 }, 200, function () {
                e.removeAttr("data-lazy").removeClass("slick-loading");
              }),
                r.$slider.trigger("lazyLoaded", [r, e, t]);
            });
          }),
            (o.onerror = function () {
              e
                .removeAttr("data-lazy")
                .removeClass("slick-loading")
                .addClass("slick-lazyload-error"),
                r.$slider.trigger("lazyLoadError", [r, e, t]);
            }),
            (o.src = t);
        });
      }
      var t,
        o,
        s,
        n,
        r = this;
      r.options.centerMode === !0
        ? r.options.infinite === !0
          ? ((s = r.currentSlide + (r.options.slidesToShow / 2 + 1)),
            (n = s + r.options.slidesToShow + 2))
          : ((s = Math.max(
              0,
              r.currentSlide - (r.options.slidesToShow / 2 + 1)
            )),
            (n = 2 + (r.options.slidesToShow / 2 + 1) + r.currentSlide))
        : ((s = r.options.infinite
            ? r.options.slidesToShow + r.currentSlide
            : r.currentSlide),
          (n = Math.ceil(s + r.options.slidesToShow)),
          r.options.fade === !0 && (s > 0 && s--, n <= r.slideCount && n++)),
        (t = r.$slider.find(".slick-slide").slice(s, n)),
        e(t),
        r.slideCount <= r.options.slidesToShow
          ? ((o = r.$slider.find(".slick-slide")), e(o))
          : r.currentSlide >= r.slideCount - r.options.slidesToShow
          ? ((o = r.$slider
              .find(".slick-cloned")
              .slice(0, r.options.slidesToShow)),
            e(o))
          : 0 === r.currentSlide &&
            ((o = r.$slider
              .find(".slick-cloned")
              .slice(-1 * r.options.slidesToShow)),
            e(o));
    }),
    (e.prototype.loadSlider = function () {
      var i = this;
      i.setPosition(),
        i.$slideTrack.css({ opacity: 1 }),
        i.$slider.removeClass("slick-loading"),
        i.initUI(),
        "progressive" === i.options.lazyLoad && i.progressiveLazyLoad();
    }),
    (e.prototype.next = e.prototype.slickNext =
      function () {
        var i = this;
        i.changeSlide({ data: { message: "next" } });
      }),
    (e.prototype.orientationChange = function () {
      var i = this;
      i.checkResponsive(), i.setPosition();
    }),
    (e.prototype.pause = e.prototype.slickPause =
      function () {
        var i = this;
        i.autoPlayClear(), (i.paused = !0);
      }),
    (e.prototype.play = e.prototype.slickPlay =
      function () {
        var i = this;
        i.autoPlay(),
          (i.options.autoplay = !0),
          (i.paused = !1),
          (i.focussed = !1),
          (i.interrupted = !1);
      }),
    (e.prototype.postSlide = function (i) {
      var e = this;
      e.unslicked ||
        (e.$slider.trigger("afterChange", [e, i]),
        (e.animating = !1),
        e.setPosition(),
        (e.swipeLeft = null),
        e.options.autoplay && e.autoPlay(),
        e.options.accessibility === !0 && e.initADA());
    }),
    (e.prototype.prev = e.prototype.slickPrev =
      function () {
        var i = this;
        i.changeSlide({ data: { message: "previous" } });
      }),
    (e.prototype.preventDefault = function (i) {
      i.preventDefault();
    }),
    (e.prototype.progressiveLazyLoad = function (e) {
      e = e || 1;
      var t,
        o,
        s,
        n = this,
        r = i("img[data-lazy]", n.$slider);
      r.length
        ? ((t = r.first()),
          (o = t.attr("data-lazy")),
          (s = document.createElement("img")),
          (s.onload = function () {
            t
              .attr("src", o)
              .removeAttr("data-lazy")
              .removeClass("slick-loading"),
              n.options.adaptiveHeight === !0 && n.setPosition(),
              n.$slider.trigger("lazyLoaded", [n, t, o]),
              n.progressiveLazyLoad();
          }),
          (s.onerror = function () {
            3 > e
              ? setTimeout(function () {
                  n.progressiveLazyLoad(e + 1);
                }, 500)
              : (t
                  .removeAttr("data-lazy")
                  .removeClass("slick-loading")
                  .addClass("slick-lazyload-error"),
                n.$slider.trigger("lazyLoadError", [n, t, o]),
                n.progressiveLazyLoad());
          }),
          (s.src = o))
        : n.$slider.trigger("allImagesLoaded", [n]);
    }),
    (e.prototype.refresh = function (e) {
      var t,
        o,
        s = this;
      (o = s.slideCount - s.options.slidesToShow),
        !s.options.infinite && s.currentSlide > o && (s.currentSlide = o),
        s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0),
        (t = s.currentSlide),
        s.destroy(!0),
        i.extend(s, s.initials, { currentSlide: t }),
        s.init(),
        e || s.changeSlide({ data: { message: "index", index: t } }, !1);
    }),
    (e.prototype.registerBreakpoints = function () {
      var e,
        t,
        o,
        s = this,
        n = s.options.responsive || null;
      if ("array" === i.type(n) && n.length) {
        s.respondTo = s.options.respondTo || "window";
        for (e in n)
          if (
            ((o = s.breakpoints.length - 1),
            (t = n[e].breakpoint),
            n.hasOwnProperty(e))
          ) {
            for (; o >= 0; )
              s.breakpoints[o] &&
                s.breakpoints[o] === t &&
                s.breakpoints.splice(o, 1),
                o--;
            s.breakpoints.push(t), (s.breakpointSettings[t] = n[e].settings);
          }
        s.breakpoints.sort(function (i, e) {
          return s.options.mobileFirst ? i - e : e - i;
        });
      }
    }),
    (e.prototype.reinit = function () {
      var e = this;
      (e.$slides = e.$slideTrack
        .children(e.options.slide)
        .addClass("slick-slide")),
        (e.slideCount = e.$slides.length),
        e.currentSlide >= e.slideCount &&
          0 !== e.currentSlide &&
          (e.currentSlide = e.currentSlide - e.options.slidesToScroll),
        e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0),
        e.registerBreakpoints(),
        e.setProps(),
        e.setupInfinite(),
        e.buildArrows(),
        e.updateArrows(),
        e.initArrowEvents(),
        e.buildDots(),
        e.updateDots(),
        e.initDotEvents(),
        e.cleanUpSlideEvents(),
        e.initSlideEvents(),
        e.checkResponsive(!1, !0),
        e.options.focusOnSelect === !0 &&
          i(e.$slideTrack).children().on("click.slick", e.selectHandler),
        e.setSlideClasses(
          "number" == typeof e.currentSlide ? e.currentSlide : 0
        ),
        e.setPosition(),
        e.focusHandler(),
        (e.paused = !e.options.autoplay),
        e.autoPlay(),
        e.$slider.trigger("reInit", [e]);
    }),
    (e.prototype.resize = function () {
      var e = this;
      i(window).width() !== e.windowWidth &&
        (clearTimeout(e.windowDelay),
        (e.windowDelay = window.setTimeout(function () {
          (e.windowWidth = i(window).width()),
            e.checkResponsive(),
            e.unslicked || e.setPosition();
        }, 50)));
    }),
    (e.prototype.removeSlide = e.prototype.slickRemove =
      function (i, e, t) {
        var o = this;
        return (
          "boolean" == typeof i
            ? ((e = i), (i = e === !0 ? 0 : o.slideCount - 1))
            : (i = e === !0 ? --i : i),
          o.slideCount < 1 || 0 > i || i > o.slideCount - 1
            ? !1
            : (o.unload(),
              t === !0
                ? o.$slideTrack.children().remove()
                : o.$slideTrack.children(this.options.slide).eq(i).remove(),
              (o.$slides = o.$slideTrack.children(this.options.slide)),
              o.$slideTrack.children(this.options.slide).detach(),
              o.$slideTrack.append(o.$slides),
              (o.$slidesCache = o.$slides),
              void o.reinit())
        );
      }),
    (e.prototype.setCSS = function (i) {
      var e,
        t,
        o = this,
        s = {};
      o.options.rtl === !0 && (i = -i),
        (e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px"),
        (t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px"),
        (s[o.positionProp] = i),
        o.transformsEnabled === !1
          ? o.$slideTrack.css(s)
          : ((s = {}),
            o.cssTransitions === !1
              ? ((s[o.animType] = "translate(" + e + ", " + t + ")"),
                o.$slideTrack.css(s))
              : ((s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)"),
                o.$slideTrack.css(s)));
    }),
    (e.prototype.setDimensions = function () {
      var i = this;
      i.options.vertical === !1
        ? i.options.centerMode === !0 &&
          i.$list.css({ padding: "0px " + i.options.centerPadding })
        : (i.$list.height(
            i.$slides.first().outerHeight(!0) * i.options.slidesToShow
          ),
          i.options.centerMode === !0 &&
            i.$list.css({ padding: i.options.centerPadding + " 0px" })),
        (i.listWidth = i.$list.width()),
        (i.listHeight = i.$list.height()),
        i.options.vertical === !1 && i.options.variableWidth === !1
          ? ((i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow)),
            i.$slideTrack.width(
              Math.ceil(
                i.slideWidth * i.$slideTrack.children(".slick-slide").length
              )
            ))
          : i.options.variableWidth === !0
          ? i.$slideTrack.width(5e3 * i.slideCount)
          : ((i.slideWidth = Math.ceil(i.listWidth)),
            i.$slideTrack.height(
              Math.ceil(
                i.$slides.first().outerHeight(!0) *
                  i.$slideTrack.children(".slick-slide").length
              )
            ));
      var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();
      i.options.variableWidth === !1 &&
        i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);
    }),
    (e.prototype.setFade = function () {
      var e,
        t = this;
      t.$slides.each(function (o, s) {
        (e = t.slideWidth * o * -1),
          t.options.rtl === !0
            ? i(s).css({
                position: "relative",
                right: e,
                top: 0,
                zIndex: t.options.zIndex - 2,
                opacity: 0,
              })
            : i(s).css({
                position: "relative",
                left: e,
                top: 0,
                zIndex: t.options.zIndex - 2,
                opacity: 0,
              });
      }),
        t.$slides
          .eq(t.currentSlide)
          .css({ zIndex: t.options.zIndex - 1, opacity: 1 });
    }),
    (e.prototype.setHeight = function () {
      var i = this;
      if (
        1 === i.options.slidesToShow &&
        i.options.adaptiveHeight === !0 &&
        i.options.vertical === !1
      ) {
        var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
        i.$list.css("height", e);
      }
    }),
    (e.prototype.setOption = e.prototype.slickSetOption =
      function () {
        var e,
          t,
          o,
          s,
          n,
          r = this,
          l = !1;
        if (
          ("object" === i.type(arguments[0])
            ? ((o = arguments[0]), (l = arguments[1]), (n = "multiple"))
            : "string" === i.type(arguments[0]) &&
              ((o = arguments[0]),
              (s = arguments[1]),
              (l = arguments[2]),
              "responsive" === arguments[0] && "array" === i.type(arguments[1])
                ? (n = "responsive")
                : "undefined" != typeof arguments[1] && (n = "single")),
          "single" === n)
        )
          r.options[o] = s;
        else if ("multiple" === n)
          i.each(o, function (i, e) {
            r.options[i] = e;
          });
        else if ("responsive" === n)
          for (t in s)
            if ("array" !== i.type(r.options.responsive))
              r.options.responsive = [s[t]];
            else {
              for (e = r.options.responsive.length - 1; e >= 0; )
                r.options.responsive[e].breakpoint === s[t].breakpoint &&
                  r.options.responsive.splice(e, 1),
                  e--;
              r.options.responsive.push(s[t]);
            }
        l && (r.unload(), r.reinit());
      }),
    (e.prototype.setPosition = function () {
      var i = this;
      i.setDimensions(),
        i.setHeight(),
        i.options.fade === !1
          ? i.setCSS(i.getLeft(i.currentSlide))
          : i.setFade(),
        i.$slider.trigger("setPosition", [i]);
    }),
    (e.prototype.setProps = function () {
      var i = this,
        e = document.body.style;
      (i.positionProp = i.options.vertical === !0 ? "top" : "left"),
        "top" === i.positionProp
          ? i.$slider.addClass("slick-vertical")
          : i.$slider.removeClass("slick-vertical"),
        (void 0 !== e.WebkitTransition ||
          void 0 !== e.MozTransition ||
          void 0 !== e.msTransition) &&
          i.options.useCSS === !0 &&
          (i.cssTransitions = !0),
        i.options.fade &&
          ("number" == typeof i.options.zIndex
            ? i.options.zIndex < 3 && (i.options.zIndex = 3)
            : (i.options.zIndex = i.defaults.zIndex)),
        void 0 !== e.OTransform &&
          ((i.animType = "OTransform"),
          (i.transformType = "-o-transform"),
          (i.transitionType = "OTransition"),
          void 0 === e.perspectiveProperty &&
            void 0 === e.webkitPerspective &&
            (i.animType = !1)),
        void 0 !== e.MozTransform &&
          ((i.animType = "MozTransform"),
          (i.transformType = "-moz-transform"),
          (i.transitionType = "MozTransition"),
          void 0 === e.perspectiveProperty &&
            void 0 === e.MozPerspective &&
            (i.animType = !1)),
        void 0 !== e.webkitTransform &&
          ((i.animType = "webkitTransform"),
          (i.transformType = "-webkit-transform"),
          (i.transitionType = "webkitTransition"),
          void 0 === e.perspectiveProperty &&
            void 0 === e.webkitPerspective &&
            (i.animType = !1)),
        void 0 !== e.msTransform &&
          ((i.animType = "msTransform"),
          (i.transformType = "-ms-transform"),
          (i.transitionType = "msTransition"),
          void 0 === e.msTransform && (i.animType = !1)),
        void 0 !== e.transform &&
          i.animType !== !1 &&
          ((i.animType = "transform"),
          (i.transformType = "transform"),
          (i.transitionType = "transition")),
        (i.transformsEnabled =
          i.options.useTransform && null !== i.animType && i.animType !== !1);
    }),
    (e.prototype.setSlideClasses = function (i) {
      var e,
        t,
        o,
        s,
        n = this;
      (t = n.$slider
        .find(".slick-slide")
        .removeClass("slick-active slick-center slick-current")
        .attr("aria-hidden", "true")),
        n.$slides.eq(i).addClass("slick-current"),
        n.options.centerMode === !0
          ? ((e = Math.floor(n.options.slidesToShow / 2)),
            n.options.infinite === !0 &&
              (i >= e && i <= n.slideCount - 1 - e
                ? n.$slides
                    .slice(i - e, i + e + 1)
                    .addClass("slick-active")
                    .attr("aria-hidden", "false")
                : ((o = n.options.slidesToShow + i),
                  t
                    .slice(o - e + 1, o + e + 2)
                    .addClass("slick-active")
                    .attr("aria-hidden", "false")),
              0 === i
                ? t
                    .eq(t.length - 1 - n.options.slidesToShow)
                    .addClass("slick-center")
                : i === n.slideCount - 1 &&
                  t.eq(n.options.slidesToShow).addClass("slick-center")),
            n.$slides.eq(i).addClass("slick-center"))
          : i >= 0 && i <= n.slideCount - n.options.slidesToShow
          ? n.$slides
              .slice(i, i + n.options.slidesToShow)
              .addClass("slick-active")
              .attr("aria-hidden", "false")
          : t.length <= n.options.slidesToShow
          ? t.addClass("slick-active").attr("aria-hidden", "false")
          : ((s = n.slideCount % n.options.slidesToShow),
            (o = n.options.infinite === !0 ? n.options.slidesToShow + i : i),
            n.options.slidesToShow == n.options.slidesToScroll &&
            n.slideCount - i < n.options.slidesToShow
              ? t
                  .slice(o - (n.options.slidesToShow - s), o + s)
                  .addClass("slick-active")
                  .attr("aria-hidden", "false")
              : t
                  .slice(o, o + n.options.slidesToShow)
                  .addClass("slick-active")
                  .attr("aria-hidden", "false")),
        "ondemand" === n.options.lazyLoad && n.lazyLoad();
    }),
    (e.prototype.setupInfinite = function () {
      var e,
        t,
        o,
        s = this;
      if (
        (s.options.fade === !0 && (s.options.centerMode = !1),
        s.options.infinite === !0 &&
          s.options.fade === !1 &&
          ((t = null), s.slideCount > s.options.slidesToShow))
      ) {
        for (
          o =
            s.options.centerMode === !0
              ? s.options.slidesToShow + 1
              : s.options.slidesToShow,
            e = s.slideCount;
          e > s.slideCount - o;
          e -= 1
        )
          (t = e - 1),
            i(s.$slides[t])
              .clone(!0)
              .attr("id", "")
              .attr("data-slick-index", t - s.slideCount)
              .prependTo(s.$slideTrack)
              .addClass("slick-cloned");
        for (e = 0; o > e; e += 1)
          (t = e),
            i(s.$slides[t])
              .clone(!0)
              .attr("id", "")
              .attr("data-slick-index", t + s.slideCount)
              .appendTo(s.$slideTrack)
              .addClass("slick-cloned");
        s.$slideTrack
          .find(".slick-cloned")
          .find("[id]")
          .each(function () {
            i(this).attr("id", "");
          });
      }
    }),
    (e.prototype.interrupt = function (i) {
      var e = this;
      i || e.autoPlay(), (e.interrupted = i);
    }),
    (e.prototype.selectHandler = function (e) {
      var t = this,
        o = i(e.target).is(".slick-slide")
          ? i(e.target)
          : i(e.target).parents(".slick-slide"),
        s = parseInt(o.attr("data-slick-index"));
      return (
        s || (s = 0),
        t.slideCount <= t.options.slidesToShow
          ? (t.setSlideClasses(s), void t.asNavFor(s))
          : void t.slideHandler(s)
      );
    }),
    (e.prototype.slideHandler = function (i, e, t) {
      var o,
        s,
        n,
        r,
        l,
        a = null,
        d = this;
      return (
        (e = e || !1),
        (d.animating === !0 && d.options.waitForAnimate === !0) ||
        (d.options.fade === !0 && d.currentSlide === i) ||
        d.slideCount <= d.options.slidesToShow
          ? void 0
          : (e === !1 && d.asNavFor(i),
            (o = i),
            (a = d.getLeft(o)),
            (r = d.getLeft(d.currentSlide)),
            (d.currentLeft = null === d.swipeLeft ? r : d.swipeLeft),
            d.options.infinite === !1 &&
            d.options.centerMode === !1 &&
            (0 > i || i > d.getDotCount() * d.options.slidesToScroll)
              ? void (
                  d.options.fade === !1 &&
                  ((o = d.currentSlide),
                  t !== !0
                    ? d.animateSlide(r, function () {
                        d.postSlide(o);
                      })
                    : d.postSlide(o))
                )
              : d.options.infinite === !1 &&
                d.options.centerMode === !0 &&
                (0 > i || i > d.slideCount - d.options.slidesToScroll)
              ? void (
                  d.options.fade === !1 &&
                  ((o = d.currentSlide),
                  t !== !0
                    ? d.animateSlide(r, function () {
                        d.postSlide(o);
                      })
                    : d.postSlide(o))
                )
              : (d.options.autoplay && clearInterval(d.autoPlayTimer),
                (s =
                  0 > o
                    ? d.slideCount % d.options.slidesToScroll !== 0
                      ? d.slideCount - (d.slideCount % d.options.slidesToScroll)
                      : d.slideCount + o
                    : o >= d.slideCount
                    ? d.slideCount % d.options.slidesToScroll !== 0
                      ? 0
                      : o - d.slideCount
                    : o),
                (d.animating = !0),
                d.$slider.trigger("beforeChange", [d, d.currentSlide, s]),
                (n = d.currentSlide),
                (d.currentSlide = s),
                d.setSlideClasses(d.currentSlide),
                d.options.asNavFor &&
                  ((l = d.getNavTarget()),
                  (l = l.slick("getSlick")),
                  l.slideCount <= l.options.slidesToShow &&
                    l.setSlideClasses(d.currentSlide)),
                d.updateDots(),
                d.updateArrows(),
                d.options.fade === !0
                  ? (t !== !0
                      ? (d.fadeSlideOut(n),
                        d.fadeSlide(s, function () {
                          d.postSlide(s);
                        }))
                      : d.postSlide(s),
                    void d.animateHeight())
                  : void (t !== !0
                      ? d.animateSlide(a, function () {
                          d.postSlide(s);
                        })
                      : d.postSlide(s))))
      );
    }),
    (e.prototype.startLoad = function () {
      var i = this;
      i.options.arrows === !0 &&
        i.slideCount > i.options.slidesToShow &&
        (i.$prevArrow.hide(), i.$nextArrow.hide()),
        i.options.dots === !0 &&
          i.slideCount > i.options.slidesToShow &&
          i.$dots.hide(),
        i.$slider.addClass("slick-loading");
    }),
    (e.prototype.swipeDirection = function () {
      var i,
        e,
        t,
        o,
        s = this;
      return (
        (i = s.touchObject.startX - s.touchObject.curX),
        (e = s.touchObject.startY - s.touchObject.curY),
        (t = Math.atan2(e, i)),
        (o = Math.round((180 * t) / Math.PI)),
        0 > o && (o = 360 - Math.abs(o)),
        45 >= o && o >= 0
          ? s.options.rtl === !1
            ? "left"
            : "right"
          : 360 >= o && o >= 315
          ? s.options.rtl === !1
            ? "left"
            : "right"
          : o >= 135 && 225 >= o
          ? s.options.rtl === !1
            ? "right"
            : "left"
          : s.options.verticalSwiping === !0
          ? o >= 35 && 135 >= o
            ? "down"
            : "up"
          : "vertical"
      );
    }),
    (e.prototype.swipeEnd = function (i) {
      var e,
        t,
        o = this;
      if (
        ((o.dragging = !1),
        (o.interrupted = !1),
        (o.shouldClick = o.touchObject.swipeLength > 10 ? !1 : !0),
        void 0 === o.touchObject.curX)
      )
        return !1;
      if (
        (o.touchObject.edgeHit === !0 &&
          o.$slider.trigger("edge", [o, o.swipeDirection()]),
        o.touchObject.swipeLength >= o.touchObject.minSwipe)
      ) {
        switch ((t = o.swipeDirection())) {
          case "left":
          case "down":
            (e = o.options.swipeToSlide
              ? o.checkNavigable(o.currentSlide + o.getSlideCount())
              : o.currentSlide + o.getSlideCount()),
              (o.currentDirection = 0);
            break;
          case "right":
          case "up":
            (e = o.options.swipeToSlide
              ? o.checkNavigable(o.currentSlide - o.getSlideCount())
              : o.currentSlide - o.getSlideCount()),
              (o.currentDirection = 1);
        }
        "vertical" != t &&
          (o.slideHandler(e),
          (o.touchObject = {}),
          o.$slider.trigger("swipe", [o, t]));
      } else
        o.touchObject.startX !== o.touchObject.curX &&
          (o.slideHandler(o.currentSlide), (o.touchObject = {}));
    }),
    (e.prototype.swipeHandler = function (i) {
      var e = this;
      if (
        !(
          e.options.swipe === !1 ||
          ("ontouchend" in document && e.options.swipe === !1) ||
          (e.options.draggable === !1 && -1 !== i.type.indexOf("mouse"))
        )
      )
        switch (
          ((e.touchObject.fingerCount =
            i.originalEvent && void 0 !== i.originalEvent.touches
              ? i.originalEvent.touches.length
              : 1),
          (e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold),
          e.options.verticalSwiping === !0 &&
            (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold),
          i.data.action)
        ) {
          case "start":
            e.swipeStart(i);
            break;
          case "move":
            e.swipeMove(i);
            break;
          case "end":
            e.swipeEnd(i);
        }
    }),
    (e.prototype.swipeMove = function (i) {
      var e,
        t,
        o,
        s,
        n,
        r = this;
      return (
        (n = void 0 !== i.originalEvent ? i.originalEvent.touches : null),
        !r.dragging || (n && 1 !== n.length)
          ? !1
          : ((e = r.getLeft(r.currentSlide)),
            (r.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX),
            (r.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY),
            (r.touchObject.swipeLength = Math.round(
              Math.sqrt(Math.pow(r.touchObject.curX - r.touchObject.startX, 2))
            )),
            r.options.verticalSwiping === !0 &&
              (r.touchObject.swipeLength = Math.round(
                Math.sqrt(
                  Math.pow(r.touchObject.curY - r.touchObject.startY, 2)
                )
              )),
            (t = r.swipeDirection()),
            "vertical" !== t
              ? (void 0 !== i.originalEvent &&
                  r.touchObject.swipeLength > 4 &&
                  i.preventDefault(),
                (s =
                  (r.options.rtl === !1 ? 1 : -1) *
                  (r.touchObject.curX > r.touchObject.startX ? 1 : -1)),
                r.options.verticalSwiping === !0 &&
                  (s = r.touchObject.curY > r.touchObject.startY ? 1 : -1),
                (o = r.touchObject.swipeLength),
                (r.touchObject.edgeHit = !1),
                r.options.infinite === !1 &&
                  ((0 === r.currentSlide && "right" === t) ||
                    (r.currentSlide >= r.getDotCount() && "left" === t)) &&
                  ((o = r.touchObject.swipeLength * r.options.edgeFriction),
                  (r.touchObject.edgeHit = !0)),
                r.options.vertical === !1
                  ? (r.swipeLeft = e + o * s)
                  : (r.swipeLeft =
                      e + o * (r.$list.height() / r.listWidth) * s),
                r.options.verticalSwiping === !0 && (r.swipeLeft = e + o * s),
                r.options.fade === !0 || r.options.touchMove === !1
                  ? !1
                  : r.animating === !0
                  ? ((r.swipeLeft = null), !1)
                  : void r.setCSS(r.swipeLeft))
              : void 0)
      );
    }),
    (e.prototype.swipeStart = function (i) {
      var e,
        t = this;
      return (
        (t.interrupted = !0),
        1 !== t.touchObject.fingerCount ||
        t.slideCount <= t.options.slidesToShow
          ? ((t.touchObject = {}), !1)
          : (void 0 !== i.originalEvent &&
              void 0 !== i.originalEvent.touches &&
              (e = i.originalEvent.touches[0]),
            (t.touchObject.startX = t.touchObject.curX =
              void 0 !== e ? e.pageX : i.clientX),
            (t.touchObject.startY = t.touchObject.curY =
              void 0 !== e ? e.pageY : i.clientY),
            void (t.dragging = !0))
      );
    }),
    (e.prototype.unfilterSlides = e.prototype.slickUnfilter =
      function () {
        var i = this;
        null !== i.$slidesCache &&
          (i.unload(),
          i.$slideTrack.children(this.options.slide).detach(),
          i.$slidesCache.appendTo(i.$slideTrack),
          i.reinit());
      }),
    (e.prototype.unload = function () {
      var e = this;
      i(".slick-cloned", e.$slider).remove(),
        e.$dots && e.$dots.remove(),
        e.$prevArrow &&
          e.htmlExpr.test(e.options.prevArrow) &&
          e.$prevArrow.remove(),
        e.$nextArrow &&
          e.htmlExpr.test(e.options.nextArrow) &&
          e.$nextArrow.remove(),
        e.$slides
          .removeClass("slick-slide slick-active slick-visible slick-current")
          .attr("aria-hidden", "true")
          .css("width", "");
    }),
    (e.prototype.unslick = function (i) {
      var e = this;
      e.$slider.trigger("unslick", [e, i]), e.destroy();
    }),
    (e.prototype.updateArrows = function () {
      var i,
        e = this;
      (i = Math.floor(e.options.slidesToShow / 2)),
        e.options.arrows === !0 &&
          e.slideCount > e.options.slidesToShow &&
          !e.options.infinite &&
          (e.$prevArrow
            .removeClass("slick-disabled")
            .attr("aria-disabled", "false"),
          e.$nextArrow
            .removeClass("slick-disabled")
            .attr("aria-disabled", "false"),
          0 === e.currentSlide
            ? (e.$prevArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"),
              e.$nextArrow
                .removeClass("slick-disabled")
                .attr("aria-disabled", "false"))
            : e.currentSlide >= e.slideCount - e.options.slidesToShow &&
              e.options.centerMode === !1
            ? (e.$nextArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"),
              e.$prevArrow
                .removeClass("slick-disabled")
                .attr("aria-disabled", "false"))
            : e.currentSlide >= e.slideCount - 1 &&
              e.options.centerMode === !0 &&
              (e.$nextArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"),
              e.$prevArrow
                .removeClass("slick-disabled")
                .attr("aria-disabled", "false")));
    }),
    (e.prototype.updateDots = function () {
      var i = this;
      null !== i.$dots &&
        (i.$dots
          .find("li")
          .removeClass("slick-active")
          .attr("aria-hidden", "true"),
        i.$dots
          .find("li")
          .eq(Math.floor(i.currentSlide / i.options.slidesToScroll))
          .addClass("slick-active")
          .attr("aria-hidden", "false"));
    }),
    (e.prototype.visibility = function () {
      var i = this;
      i.options.autoplay &&
        (document[i.hidden] ? (i.interrupted = !0) : (i.interrupted = !1));
    }),
    (i.fn.slick = function () {
      var i,
        t,
        o = this,
        s = arguments[0],
        n = Array.prototype.slice.call(arguments, 1),
        r = o.length;
      for (i = 0; r > i; i++)
        if (
          ("object" == typeof s || "undefined" == typeof s
            ? (o[i].slick = new e(o[i], s))
            : (t = o[i].slick[s].apply(o[i].slick, n)),
          "undefined" != typeof t)
        )
          return t;
      return o;
    });
});
!(function (e) {
  function t() {
    var e = location.href;
    return (
      (hashtag =
        -1 !== e.indexOf("#prettyPhoto")
          ? decodeURI(e.substring(e.indexOf("#prettyPhoto") + 1, e.length))
          : !1),
      hashtag && (hashtag = hashtag.replace(/<|>/g, "")),
      hashtag
    );
  }
  function i() {
    "undefined" != typeof theRel &&
      (location.hash = theRel + "/" + rel_index + "/");
  }
  function p() {
    -1 !== location.href.indexOf("#prettyPhoto") &&
      (location.hash = "prettyPhoto");
  }
  function o(e, t) {
    e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var i = "[\\?&]" + e + "=([^&#]*)",
      p = new RegExp(i),
      o = p.exec(t);
    return null == o ? "" : o[1];
  }
  (e.prettyPhoto = { version: "3.1.6" }),
    (e.fn.prettyPhoto = function (a) {
      function s() {
        e(".pp_loaderIcon").hide(),
          (projectedTop =
            scroll_pos.scrollTop + (I / 2 - f.containerHeight / 2)),
          projectedTop < 0 && (projectedTop = 0),
          $ppt.fadeTo(settings.animation_speed, 1),
          $pp_pic_holder
            .find(".pp_content")
            .animate(
              { height: f.contentHeight, width: f.contentWidth },
              settings.animation_speed
            ),
          $pp_pic_holder.animate(
            {
              top: projectedTop,
              left:
                j / 2 - f.containerWidth / 2 < 0
                  ? 0
                  : j / 2 - f.containerWidth / 2,
              width: f.containerWidth,
            },
            settings.animation_speed,
            function () {
              $pp_pic_holder
                .find(".pp_hoverContainer,#fullResImage")
                .height(f.height)
                .width(f.width),
                $pp_pic_holder
                  .find(".pp_fade")
                  .fadeIn(settings.animation_speed),
                isSet && "image" == h(pp_images[set_position])
                  ? $pp_pic_holder.find(".pp_hoverContainer").show()
                  : $pp_pic_holder.find(".pp_hoverContainer").hide(),
                settings.allow_expand &&
                  (f.resized
                    ? e("a.pp_expand,a.pp_contract").show()
                    : e("a.pp_expand").hide()),
                !settings.autoplay_slideshow ||
                  P ||
                  v ||
                  e.prettyPhoto.startSlideshow(),
                settings.changepicturecallback(),
                (v = !0);
            }
          ),
          m(),
          a.ajaxcallback();
      }
      function n(t) {
        $pp_pic_holder
          .find("#pp_full_res object,#pp_full_res embed")
          .css("visibility", "hidden"),
          $pp_pic_holder
            .find(".pp_fade")
            .fadeOut(settings.animation_speed, function () {
              e(".pp_loaderIcon").show(), t();
            });
      }
      function r(t) {
        t > 1 ? e(".pp_nav").show() : e(".pp_nav").hide();
      }
      function l(e, t) {
        if (
          ((resized = !1),
          d(e, t),
          (imageWidth = e),
          (imageHeight = t),
          (k > j || b > I) && doresize && settings.allow_resize && !$)
        ) {
          for (resized = !0, fitting = !1; !fitting; )
            k > j
              ? ((imageWidth = j - 200), (imageHeight = (t / e) * imageWidth))
              : b > I
              ? ((imageHeight = I - 200), (imageWidth = (e / t) * imageHeight))
              : (fitting = !0),
              (b = imageHeight),
              (k = imageWidth);
          (k > j || b > I) && l(k, b), d(imageWidth, imageHeight);
        }
        return {
          width: Math.floor(imageWidth),
          height: Math.floor(imageHeight),
          containerHeight: Math.floor(b),
          containerWidth: Math.floor(k) + 2 * settings.horizontal_padding,
          contentHeight: Math.floor(y),
          contentWidth: Math.floor(w),
          resized: resized,
        };
      }
      function d(t, i) {
        (t = parseFloat(t)),
          (i = parseFloat(i)),
          ($pp_details = $pp_pic_holder.find(".pp_details")),
          $pp_details.width(t),
          (detailsHeight =
            parseFloat($pp_details.css("marginTop")) +
            parseFloat($pp_details.css("marginBottom"))),
          ($pp_details = $pp_details
            .clone()
            .addClass(settings.theme)
            .width(t)
            .appendTo(e("body"))
            .css({ position: "absolute", top: -1e4 })),
          (detailsHeight += $pp_details.height()),
          (detailsHeight = detailsHeight <= 34 ? 36 : detailsHeight),
          $pp_details.remove(),
          ($pp_title = $pp_pic_holder.find(".ppt")),
          $pp_title.width(t),
          (titleHeight =
            parseFloat($pp_title.css("marginTop")) +
            parseFloat($pp_title.css("marginBottom"))),
          ($pp_title = $pp_title
            .clone()
            .appendTo(e("body"))
            .css({ position: "absolute", top: -1e4 })),
          (titleHeight += $pp_title.height()),
          $pp_title.remove(),
          (y = i + detailsHeight),
          (w = t),
          (b =
            y +
            titleHeight +
            $pp_pic_holder.find(".pp_top").height() +
            $pp_pic_holder.find(".pp_bottom").height()),
          (k = t);
      }
      function h(e) {
        return e.match(/youtube\.com\/watch/i) || e.match(/youtu\.be/i)
          ? "youtube"
          : e.match(/vimeo\.com/i)
          ? "vimeo"
          : e.match(/\b.mov\b/i)
          ? "quicktime"
          : e.match(/\b.swf\b/i)
          ? "flash"
          : e.match(/\biframe=true\b/i)
          ? "iframe"
          : e.match(/\bajax=true\b/i)
          ? "ajax"
          : e.match(/\bcustom=true\b/i)
          ? "custom"
          : "#" == e.substr(0, 1)
          ? "inline"
          : "image";
      }
      function c() {
        if (doresize && "undefined" != typeof $pp_pic_holder) {
          if (
            ((scroll_pos = _()),
            (contentHeight = $pp_pic_holder.height()),
            (contentwidth = $pp_pic_holder.width()),
            (projectedTop = I / 2 + scroll_pos.scrollTop - contentHeight / 2),
            projectedTop < 0 && (projectedTop = 0),
            contentHeight > I)
          )
            return;
          $pp_pic_holder.css({
            top: projectedTop,
            left: j / 2 + scroll_pos.scrollLeft - contentwidth / 2,
          });
        }
      }
      function _() {
        return self.pageYOffset
          ? { scrollTop: self.pageYOffset, scrollLeft: self.pageXOffset }
          : document.documentElement && document.documentElement.scrollTop
          ? {
              scrollTop: document.documentElement.scrollTop,
              scrollLeft: document.documentElement.scrollLeft,
            }
          : document.body
          ? {
              scrollTop: document.body.scrollTop,
              scrollLeft: document.body.scrollLeft,
            }
          : void 0;
      }
      function g() {
        (I = e(window).height()),
          (j = e(window).width()),
          "undefined" != typeof $pp_overlay &&
            $pp_overlay.height(e(document).height()).width(j);
      }
      function m() {
        isSet &&
        settings.overlay_gallery &&
        "image" == h(pp_images[set_position])
          ? ((itemWidth = 57),
            (navWidth =
              "facebook" == settings.theme || "pp_default" == settings.theme
                ? 50
                : 30),
            (itemsPerPage = Math.floor(
              (f.containerWidth - 100 - navWidth) / itemWidth
            )),
            (itemsPerPage =
              itemsPerPage < pp_images.length
                ? itemsPerPage
                : pp_images.length),
            (totalPage = Math.ceil(pp_images.length / itemsPerPage) - 1),
            0 == totalPage
              ? ((navWidth = 0),
                $pp_gallery.find(".pp_arrow_next,.pp_arrow_previous").hide())
              : $pp_gallery.find(".pp_arrow_next,.pp_arrow_previous").show(),
            (galleryWidth = itemsPerPage * itemWidth),
            (fullGalleryWidth = pp_images.length * itemWidth),
            $pp_gallery
              .css("margin-left", -(galleryWidth / 2 + navWidth / 2))
              .find("div:first")
              .width(galleryWidth + 5)
              .find("ul")
              .width(fullGalleryWidth)
              .find("li.selected")
              .removeClass("selected"),
            (goToPage =
              Math.floor(set_position / itemsPerPage) < totalPage
                ? Math.floor(set_position / itemsPerPage)
                : totalPage),
            e.prettyPhoto.changeGalleryPage(goToPage),
            $pp_gallery_li
              .filter(":eq(" + set_position + ")")
              .addClass("selected"))
          : $pp_pic_holder.find(".pp_content").unbind("mouseenter mouseleave");
      }
      function u() {
        if (
          (settings.social_tools &&
            (facebook_like_link = settings.social_tools.replace(
              "{location_href}",
              encodeURIComponent(location.href)
            )),
          (settings.markup = settings.markup.replace("{pp_social}", "")),
          e("body").append(settings.markup),
          ($pp_pic_holder = e(".pp_pic_holder")),
          ($ppt = e(".ppt")),
          ($pp_overlay = e("div.pp_overlay")),
          isSet && settings.overlay_gallery)
        ) {
          (currentGalleryPage = 0), (toInject = "");
          for (var t = 0; t < pp_images.length; t++)
            pp_images[t].match(/\b(jpg|jpeg|png|gif)\b/gi)
              ? ((classname = ""), (img_src = pp_images[t]))
              : ((classname = "default"), (img_src = "")),
              (toInject +=
                "<li class='" +
                classname +
                "'><a href='#'><img src='" +
                img_src +
                "' width='50' alt='' /></a></li>");
          (toInject = settings.gallery_markup.replace(/{gallery}/g, toInject)),
            $pp_pic_holder.find("#pp_full_res").after(toInject),
            ($pp_gallery = e(".pp_pic_holder .pp_gallery")),
            ($pp_gallery_li = $pp_gallery.find("li")),
            $pp_gallery.find(".pp_arrow_next").click(function () {
              return (
                e.prettyPhoto.changeGalleryPage("next"),
                e.prettyPhoto.stopSlideshow(),
                !1
              );
            }),
            $pp_gallery.find(".pp_arrow_previous").click(function () {
              return (
                e.prettyPhoto.changeGalleryPage("previous"),
                e.prettyPhoto.stopSlideshow(),
                !1
              );
            }),
            $pp_pic_holder.find(".pp_content").hover(
              function () {
                $pp_pic_holder.find(".pp_gallery:not(.disabled)").fadeIn();
              },
              function () {
                $pp_pic_holder.find(".pp_gallery:not(.disabled)").fadeOut();
              }
            ),
            (itemWidth = 57),
            $pp_gallery_li.each(function (t) {
              e(this)
                .find("a")
                .click(function () {
                  return (
                    e.prettyPhoto.changePage(t),
                    e.prettyPhoto.stopSlideshow(),
                    !1
                  );
                });
            });
        }
        settings.slideshow &&
          ($pp_pic_holder
            .find(".pp_nav")
            .prepend('<a href="#" class="pp_play">Play</a>'),
          $pp_pic_holder.find(".pp_nav .pp_play").click(function () {
            return e.prettyPhoto.startSlideshow(), !1;
          })),
          $pp_pic_holder.attr("class", "pp_pic_holder " + settings.theme),
          $pp_overlay
            .css({
              opacity: 0,
              height: e(document).height(),
              width: e(window).width(),
            })
            .bind("click", function () {
              settings.modal || e.prettyPhoto.close();
            }),
          e("a.pp_close").bind("click", function () {
            return e.prettyPhoto.close(), !1;
          }),
          settings.allow_expand &&
            e("a.pp_expand").bind("click", function () {
              return (
                e(this).hasClass("pp_expand")
                  ? (e(this).removeClass("pp_expand").addClass("pp_contract"),
                    (doresize = !1))
                  : (e(this).removeClass("pp_contract").addClass("pp_expand"),
                    (doresize = !0)),
                n(function () {
                  e.prettyPhoto.open();
                }),
                !1
              );
            }),
          $pp_pic_holder
            .find(".pp_previous, .pp_nav .pp_arrow_previous")
            .bind("click", function () {
              return (
                e.prettyPhoto.changePage("previous"),
                e.prettyPhoto.stopSlideshow(),
                !1
              );
            }),
          $pp_pic_holder
            .find(".pp_next, .pp_nav .pp_arrow_next")
            .bind("click", function () {
              return (
                e.prettyPhoto.changePage("next"),
                e.prettyPhoto.stopSlideshow(),
                !1
              );
            }),
          c();
      }
      a = jQuery.extend(
        {
          hook: "rel",
          animation_speed: "fast",
          ajaxcallback: function () {},
          slideshow: 5e3,
          autoplay_slideshow: !1,
          opacity: 0.8,
          show_title: !0,
          allow_resize: !0,
          allow_expand: !0,
          default_width: 500,
          default_height: 344,
          counter_separator_label: "/",
          theme: "pp_default",
          horizontal_padding: 20,
          hideflash: !1,
          wmode: "opaque",
          autoplay: !0,
          modal: !1,
          deeplinking: !0,
          overlay_gallery: !0,
          overlay_gallery_max: 30,
          keyboard_shortcuts: !0,
          changepicturecallback: function () {},
          callback: function () {},
          ie6_fallback: !0,
          markup:
            '<div class="pp_pic_holder"> 						<div class="ppt">&nbsp;</div> 						<div class="pp_top"> 							<div class="pp_left"></div> 							<div class="pp_middle"></div> 							<div class="pp_right"></div> 						</div> 						<div class="pp_content_container"> 							<div class="pp_left"> 							<div class="pp_right"> 								<div class="pp_content"> 									<div class="pp_loaderIcon"></div> 									<div class="pp_fade"> 										<a href="#" class="pp_expand" title="Expand the image">Expand</a> 										<div class="pp_hoverContainer"> 											<a class="pp_next" href="#">next</a> 											<a class="pp_previous" href="#">previous</a> 										</div> 										<div id="pp_full_res"></div> 										<div class="pp_details"> 											<div class="pp_nav"> 												<a href="#" class="pp_arrow_previous">Previous</a> 												<p class="currentTextHolder">0/0</p> 												<a href="#" class="pp_arrow_next">Next</a> 											</div> 											<p class="pp_description"></p> 											<div class="pp_social">{pp_social}</div> 											<a class="pp_close" href="#">Close</a> 										</div> 									</div> 								</div> 							</div> 							</div> 						</div> 						<div class="pp_bottom"> 							<div class="pp_left"></div> 							<div class="pp_middle"></div> 							<div class="pp_right"></div> 						</div> 					</div> 					<div class="pp_overlay"></div>',
          gallery_markup:
            '<div class="pp_gallery"> 								<a href="#" class="pp_arrow_previous">Previous</a> 								<div> 									<ul> 										{gallery} 									</ul> 								</div> 								<a href="#" class="pp_arrow_next">Next</a> 							</div>',
          image_markup: '<img id="fullResImage" src="{path}" />',
          flash_markup:
            '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="{width}" height="{height}"><param name="wmode" value="{wmode}" /><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="{path}" /><embed src="{path}" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="{width}" height="{height}" wmode="{wmode}"></embed></object>',
          quicktime_markup:
            '<object classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="https://www.apple.com/qtactivex/qtplugin.cab" height="{height}" width="{width}"><param name="src" value="{path}"><param name="autoplay" value="{autoplay}"><param name="type" value="video/quicktime"><embed src="{path}" height="{height}" width="{width}" autoplay="{autoplay}" type="video/quicktime" pluginspage="https://www.apple.com/quicktime/download/"></embed></object>',
          iframe_markup:
            '<iframe src ="{path}" width="{width}" height="{height}" frameborder="no"></iframe>',
          inline_markup: '<div class="pp_inline">{content}</div>',
          custom_markup: "",
          social_tools:
            '<div class="twitter"><a href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a><script type="text/javascript" src="https://platform.twitter.com/widgets.js"></script></div><div class="facebook"><iframe src="//www.facebook.com/plugins/like.php?locale=en_US&href={location_href}&layout=button_count&show_faces=true&width=500&action=like&font&colorscheme=light&height=23" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:500px; height:23px;" allowTransparency="true"></iframe></div>',
        },
        a
      );
      var f,
        v,
        y,
        w,
        b,
        k,
        P,
        x = this,
        $ = !1,
        I = e(window).height(),
        j = e(window).width();
      return (
        (doresize = !0),
        (scroll_pos = _()),
        e(window)
          .unbind("resize.prettyphoto")
          .bind("resize.prettyphoto", function () {
            c(), g();
          }),
        a.keyboard_shortcuts &&
          e(document)
            .unbind("keydown.prettyphoto")
            .bind("keydown.prettyphoto", function (t) {
              if (
                "undefined" != typeof $pp_pic_holder &&
                $pp_pic_holder.is(":visible")
              )
                switch (t.keyCode) {
                  case 37:
                    e.prettyPhoto.changePage("previous"), t.preventDefault();
                    break;
                  case 39:
                    e.prettyPhoto.changePage("next"), t.preventDefault();
                    break;
                  case 27:
                    settings.modal || e.prettyPhoto.close(), t.preventDefault();
                }
            }),
        (e.prettyPhoto.initialize = function () {
          return (
            (settings = a),
            "pp_default" == settings.theme &&
              (settings.horizontal_padding = 16),
            (theRel = e(this).attr(settings.hook)),
            (galleryRegExp = /\[(?:.*)\]/),
            (isSet = galleryRegExp.exec(theRel) ? !0 : !1),
            (pp_images = isSet
              ? jQuery.map(x, function (t) {
                  return -1 != e(t).attr(settings.hook).indexOf(theRel)
                    ? e(t).attr("href")
                    : void 0;
                })
              : e.makeArray(e(this).attr("href"))),
            (pp_titles = isSet
              ? jQuery.map(x, function (t) {
                  return -1 != e(t).attr(settings.hook).indexOf(theRel)
                    ? e(t).find("img").attr("alt")
                      ? e(t).find("img").attr("alt")
                      : ""
                    : void 0;
                })
              : e.makeArray(e(this).find("img").attr("alt"))),
            (pp_descriptions = isSet
              ? jQuery.map(x, function (t) {
                  return -1 != e(t).attr(settings.hook).indexOf(theRel)
                    ? e(t).attr("title")
                      ? e(t).attr("title")
                      : ""
                    : void 0;
                })
              : e.makeArray(e(this).attr("title"))),
            pp_images.length > settings.overlay_gallery_max &&
              (settings.overlay_gallery = !1),
            (set_position = jQuery.inArray(e(this).attr("href"), pp_images)),
            (rel_index = isSet
              ? set_position
              : e("a[" + settings.hook + "^='" + theRel + "']").index(e(this))),
            u(this),
            settings.allow_resize &&
              e(window).bind("scroll.prettyphoto", function () {
                c();
              }),
            e.prettyPhoto.open(),
            !1
          );
        }),
        (e.prettyPhoto.open = function (t) {
          return (
            "undefined" == typeof settings &&
              ((settings = a),
              (pp_images = e.makeArray(arguments[0])),
              (pp_titles = e.makeArray(arguments[1] ? arguments[1] : "")),
              (pp_descriptions = e.makeArray(arguments[2] ? arguments[2] : "")),
              (isSet = pp_images.length > 1 ? !0 : !1),
              (set_position = arguments[3] ? arguments[3] : 0),
              u(t.target)),
            settings.hideflash &&
              e("object,embed,iframe[src*=youtube],iframe[src*=vimeo]").css(
                "visibility",
                "hidden"
              ),
            r(e(pp_images).size()),
            e(".pp_loaderIcon").show(),
            settings.deeplinking && i(),
            settings.social_tools &&
              ((facebook_like_link = settings.social_tools.replace(
                "{location_href}",
                encodeURIComponent(location.href)
              )),
              $pp_pic_holder.find(".pp_social").html(facebook_like_link)),
            $ppt.is(":hidden") && $ppt.css("opacity", 0).show(),
            $pp_overlay
              .show()
              .fadeTo(settings.animation_speed, settings.opacity),
            $pp_pic_holder
              .find(".currentTextHolder")
              .text(
                set_position +
                  1 +
                  settings.counter_separator_label +
                  e(pp_images).size()
              ),
            "undefined" != typeof pp_descriptions[set_position] &&
            "" != pp_descriptions[set_position]
              ? $pp_pic_holder
                  .find(".pp_description")
                  .show()
                  .html(unescape(pp_descriptions[set_position]))
              : $pp_pic_holder.find(".pp_description").hide(),
            (movie_width = parseFloat(o("width", pp_images[set_position]))
              ? o("width", pp_images[set_position])
              : settings.default_width.toString()),
            (movie_height = parseFloat(o("height", pp_images[set_position]))
              ? o("height", pp_images[set_position])
              : settings.default_height.toString()),
            ($ = !1),
            -1 != movie_height.indexOf("%") &&
              ((movie_height = parseFloat(
                (e(window).height() * parseFloat(movie_height)) / 100 - 150
              )),
              ($ = !0)),
            -1 != movie_width.indexOf("%") &&
              ((movie_width = parseFloat(
                (e(window).width() * parseFloat(movie_width)) / 100 - 150
              )),
              ($ = !0)),
            $pp_pic_holder.fadeIn(function () {
              switch (
                ($ppt.html(
                  settings.show_title &&
                    "" != pp_titles[set_position] &&
                    "undefined" != typeof pp_titles[set_position]
                    ? unescape(pp_titles[set_position])
                    : "&nbsp;"
                ),
                (imgPreloader = ""),
                (skipInjection = !1),
                h(pp_images[set_position]))
              ) {
                case "image":
                  (imgPreloader = new Image()),
                    (nextImage = new Image()),
                    isSet &&
                      set_position < e(pp_images).size() - 1 &&
                      (nextImage.src = pp_images[set_position + 1]),
                    (prevImage = new Image()),
                    isSet &&
                      pp_images[set_position - 1] &&
                      (prevImage.src = pp_images[set_position - 1]),
                    ($pp_pic_holder.find("#pp_full_res")[0].innerHTML =
                      settings.image_markup.replace(
                        /{path}/g,
                        pp_images[set_position]
                      )),
                    (imgPreloader.onload = function () {
                      (f = l(imgPreloader.width, imgPreloader.height)), s();
                    }),
                    (imgPreloader.onerror = function () {
                      alert(
                        "Image cannot be loaded. Make sure the path is correct and image exist."
                      ),
                        e.prettyPhoto.close();
                    }),
                    (imgPreloader.src = pp_images[set_position]);
                  break;
                case "youtube":
                  (f = l(movie_width, movie_height)),
                    (movie_id = o("v", pp_images[set_position])),
                    "" == movie_id &&
                      ((movie_id = pp_images[set_position].split("youtu.be/")),
                      (movie_id = movie_id[1]),
                      movie_id.indexOf("?") > 0 &&
                        (movie_id = movie_id.substr(0, movie_id.indexOf("?"))),
                      movie_id.indexOf("&") > 0 &&
                        (movie_id = movie_id.substr(0, movie_id.indexOf("&")))),
                    (movie = "https://www.youtube.com/embed/" + movie_id),
                    (movie += o("rel", pp_images[set_position])
                      ? "?rel=" + o("rel", pp_images[set_position])
                      : "?rel=1"),
                    settings.autoplay && (movie += "&autoplay=1"),
                    (toInject = settings.iframe_markup
                      .replace(/{width}/g, f.width)
                      .replace(/{height}/g, f.height)
                      .replace(/{wmode}/g, settings.wmode)
                      .replace(/{path}/g, movie));
                  break;
                case "vimeo":
                  (f = l(movie_width, movie_height)),
                    (movie_id = pp_images[set_position]);
                  var t = /https(s?):\/\/(www\.)?vimeo.com\/(\d+)/,
                    i = movie_id.match(t);
                  (movie =
                    "https://player.vimeo.com/video/" +
                    i[3] +
                    "?title=0&byline=0&portrait=0"),
                    settings.autoplay && (movie += "&autoplay=1;"),
                    (vimeo_width = f.width + "/embed/?moog_width=" + f.width),
                    (toInject = settings.iframe_markup
                      .replace(/{width}/g, vimeo_width)
                      .replace(/{height}/g, f.height)
                      .replace(/{path}/g, movie));
                  break;
                case "quicktime":
                  (f = l(movie_width, movie_height)),
                    (f.height += 15),
                    (f.contentHeight += 15),
                    (f.containerHeight += 15),
                    (toInject = settings.quicktime_markup
                      .replace(/{width}/g, f.width)
                      .replace(/{height}/g, f.height)
                      .replace(/{wmode}/g, settings.wmode)
                      .replace(/{path}/g, pp_images[set_position])
                      .replace(/{autoplay}/g, settings.autoplay));
                  break;
                case "flash":
                  (f = l(movie_width, movie_height)),
                    (flash_vars = pp_images[set_position]),
                    (flash_vars = flash_vars.substring(
                      pp_images[set_position].indexOf("flashvars") + 10,
                      pp_images[set_position].length
                    )),
                    (filename = pp_images[set_position]),
                    (filename = filename.substring(0, filename.indexOf("?"))),
                    (toInject = settings.flash_markup
                      .replace(/{width}/g, f.width)
                      .replace(/{height}/g, f.height)
                      .replace(/{wmode}/g, settings.wmode)
                      .replace(/{path}/g, filename + "?" + flash_vars));
                  break;
                case "iframe":
                  (f = l(movie_width, movie_height)),
                    (frame_url = pp_images[set_position]),
                    (frame_url = frame_url.substr(
                      0,
                      frame_url.indexOf("iframe") - 1
                    )),
                    (toInject = settings.iframe_markup
                      .replace(/{width}/g, f.width)
                      .replace(/{height}/g, f.height)
                      .replace(/{path}/g, frame_url));
                  break;
                case "ajax":
                  (doresize = !1),
                    (f = l(movie_width, movie_height)),
                    (doresize = !0),
                    (skipInjection = !0),
                    e.get(pp_images[set_position], function (e) {
                      (toInject = settings.inline_markup.replace(
                        /{content}/g,
                        e
                      )),
                        ($pp_pic_holder.find("#pp_full_res")[0].innerHTML =
                          toInject),
                        s();
                    });
                  break;
                case "custom":
                  (f = l(movie_width, movie_height)),
                    (toInject = settings.custom_markup);
                  break;
                case "inline":
                  (myClone = e(pp_images[set_position])
                    .clone()
                    .append('<br clear="all" />')
                    .css({ width: settings.default_width })
                    .wrapInner(
                      '<div id="pp_full_res"><div class="pp_inline"></div></div>'
                    )
                    .appendTo(e("body"))
                    .show()),
                    (doresize = !1),
                    (f = l(e(myClone).width(), e(myClone).height())),
                    (doresize = !0),
                    e(myClone).remove(),
                    (toInject = settings.inline_markup.replace(
                      /{content}/g,
                      e(pp_images[set_position]).html()
                    ));
              }
              imgPreloader ||
                skipInjection ||
                (($pp_pic_holder.find("#pp_full_res")[0].innerHTML = toInject),
                s());
            }),
            !1
          );
        }),
        (e.prettyPhoto.changePage = function (t) {
          (currentGalleryPage = 0),
            "previous" == t
              ? (set_position--,
                set_position < 0 && (set_position = e(pp_images).size() - 1))
              : "next" == t
              ? (set_position++,
                set_position > e(pp_images).size() - 1 && (set_position = 0))
              : (set_position = t),
            (rel_index = set_position),
            doresize || (doresize = !0),
            settings.allow_expand &&
              e(".pp_contract")
                .removeClass("pp_contract")
                .addClass("pp_expand"),
            n(function () {
              e.prettyPhoto.open();
            });
        }),
        (e.prettyPhoto.changeGalleryPage = function (e) {
          "next" == e
            ? (currentGalleryPage++,
              currentGalleryPage > totalPage && (currentGalleryPage = 0))
            : "previous" == e
            ? (currentGalleryPage--,
              currentGalleryPage < 0 && (currentGalleryPage = totalPage))
            : (currentGalleryPage = e),
            (slide_speed =
              "next" == e || "previous" == e ? settings.animation_speed : 0),
            (slide_to = currentGalleryPage * itemsPerPage * itemWidth),
            $pp_gallery.find("ul").animate({ left: -slide_to }, slide_speed);
        }),
        (e.prettyPhoto.startSlideshow = function () {
          "undefined" == typeof P
            ? ($pp_pic_holder
                .find(".pp_play")
                .unbind("click")
                .removeClass("pp_play")
                .addClass("pp_pause")
                .click(function () {
                  return e.prettyPhoto.stopSlideshow(), !1;
                }),
              (P = setInterval(
                e.prettyPhoto.startSlideshow,
                settings.slideshow
              )))
            : e.prettyPhoto.changePage("next");
        }),
        (e.prettyPhoto.stopSlideshow = function () {
          $pp_pic_holder
            .find(".pp_pause")
            .unbind("click")
            .removeClass("pp_pause")
            .addClass("pp_play")
            .click(function () {
              return e.prettyPhoto.startSlideshow(), !1;
            }),
            clearInterval(P),
            (P = void 0);
        }),
        (e.prettyPhoto.close = function () {
          $pp_overlay.is(":animated") ||
            (e.prettyPhoto.stopSlideshow(),
            $pp_pic_holder
              .stop()
              .find("object,embed")
              .css("visibility", "hidden"),
            e("div.pp_pic_holder,div.ppt,.pp_fade").fadeOut(
              settings.animation_speed,
              function () {
                e(this).remove();
              }
            ),
            $pp_overlay.fadeOut(settings.animation_speed, function () {
              settings.hideflash &&
                e("object,embed,iframe[src*=youtube],iframe[src*=vimeo]").css(
                  "visibility",
                  "visible"
                ),
                e(this).remove(),
                e(window).unbind("scroll.prettyphoto"),
                p(),
                settings.callback(),
                (doresize = !0),
                (v = !1),
                delete settings;
            }));
        }),
        !pp_alreadyInitialized &&
          t() &&
          ((pp_alreadyInitialized = !0),
          (hashIndex = t()),
          (hashRel = hashIndex),
          (hashIndex = hashIndex.substring(
            hashIndex.indexOf("/") + 1,
            hashIndex.length - 1
          )),
          (hashRel = hashRel.substring(0, hashRel.indexOf("/"))),
          setTimeout(function () {
            e(
              "a[" + a.hook + "^='" + hashRel + "']:eq(" + hashIndex + ")"
            ).trigger("click");
          }, 50)),
        this.unbind("click.prettyphoto").bind(
          "click.prettyphoto",
          e.prettyPhoto.initialize
        )
      );
    });
})(jQuery);
var pp_alreadyInitialized = !1;
jQuery("document").ready(function ($) {
  $(".cool-timeline-horizontal")
    .find("a[class^='ctl_prettyPhoto']")
    .prettyPhoto({ social_tools: !1, show_title: !1 });
  $(".cool-timeline-horizontal")
    .find("a[rel^='ctl_prettyPhoto']")
    .prettyPhoto({ social_tools: !1, show_title: !1 });
  function storySlideShow(container) {
    container
      .find(".ctl_slideshow .slides")
      .not(".slick-initialized")
      .each(function () {
        $(this)
          .find("a[class^='ctl_prettyPhoto']")
          .prettyPhoto({ social_tools: !1, show_title: !1 });
        var autoplaySpeed = parseInt($(this).data("animationspeed"));
        var slideshow = $(this).data("slideshow");
        $(this).slick({
          dots: !1,
          infinite: !1,
          arrows: !0,
          mobileFirst: !0,
          pauseOnHover: !0,
          slidesToShow: 1,
          autoplay: slideshow,
          autoplaySpeed: autoplaySpeed,
          adaptiveHeight: !0,
        });
      });
  }
  $(".cool-timeline-horizontal.ht-design-3").each(function (i) {
    var thisS = $(this);
    var sliderContent = "#" + thisS.attr("date-slider"),
      sliderNav = "#" + thisS.attr("data-nav"),
      rtl = thisS.attr("data-rtl"),
      items = parseInt(thisS.attr("data-items")),
      autoplay = thisS.attr("data-autoplay"),
      autoplaySettings = autoplay == "true" ? true : !1,
      rtlSettings = rtl == "true" ? true : !1,
      startOn = parseInt(thisS.attr("data-start-on")),
      speed = parseInt(thisS.attr("data-autoplay-speed"));
    thisS.siblings(".clt_preloader").hide();
    thisS.css("opacity", 1);
    $(sliderNav)
      .not(".slick-initialized")
      .slick({
        slidesToShow: items,
        slidesToScroll: 1,
        autoplaySpeed: speed,
        asNavFor: sliderContent,
        dots: !1,
        autoplay: autoplaySettings,
        rtl: rtlSettings,
        initialSlide: startOn,
        focusOnSelect: !0,
        infinite: !1,
        nextArrow:
          '<button type="button" class="ctl-slick-next ctl-flat-left"><i class="fal fa-long-arrow-right" aria-hidden="true"></i></button>',
        prevArrow:
          '<button type="button" class="ctl-slick-prev ctl-flat-right"><i class="fal fa-long-arrow-left" aria-hidden="true"></i></button>',
        responsive: [
          {
            breakpoint: 980,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2,
              centerPadding: "10px",
            },
          },
          {
            breakpoint: 768,
            settings: { arrows: !0, centerPadding: "10px", slidesToShow: 1 },
          },
          {
            breakpoint: 480,
            settings: { arrows: !0, centerPadding: "10px", slidesToShow: 1 },
          },
        ],
      }),
      $(sliderContent)
        .not(".slick-initialized")
        .slick({
          slidesToShow: items,
          slidesToScroll: 1,
          asNavFor: sliderNav,
          arrows: !1,
          dots: !1,
          rtl: rtlSettings,
          initialSlide: startOn,
          infinite: !1,
          adaptiveHeight: !0,
          responsive: [
            {
              breakpoint: 980,
              settings: {
                slidesToShow: 2,
                slidesToScroll: 2,
                centerPadding: "10px",
              },
            },
            {
              breakpoint: 768,
              settings: {
                slidesToShow: 1,
                slidesToScroll: 1,
                centerPadding: "10px",
              },
            },
            {
              breakpoint: 480,
              settings: {
                slidesToShow: 1,
                slidesToScroll: 1,
                centerPadding: "10px",
              },
            },
          ],
        });
    storySlideShow(thisS);
  });
});
/*!
 * WPBakery Page Builder v6.0.0 (https://wpbakery.com)
 * Copyright 2011-2019 Michael M, WPBakery
 * License: Commercial. More details: http://go.wpbakery.com/licensing
 */

/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!(function () {
  "use strict";
  var e = 0,
    r = {};
  function i(t) {
    if (!t) throw new Error("No options passed to Waypoint constructor");
    if (!t.element)
      throw new Error("No element option passed to Waypoint constructor");
    if (!t.handler)
      throw new Error("No handler option passed to Waypoint constructor");
    (this.key = "waypoint-" + e),
      (this.options = i.Adapter.extend({}, i.defaults, t)),
      (this.element = this.options.element),
      (this.adapter = new i.Adapter(this.element)),
      (this.callback = t.handler),
      (this.axis = this.options.horizontal ? "horizontal" : "vertical"),
      (this.enabled = this.options.enabled),
      (this.triggerPoint = null),
      (this.group = i.Group.findOrCreate({
        name: this.options.group,
        axis: this.axis,
      })),
      (this.context = i.Context.findOrCreateByElement(this.options.context)),
      i.offsetAliases[this.options.offset] &&
        (this.options.offset = i.offsetAliases[this.options.offset]),
      this.group.add(this),
      this.context.add(this),
      (r[this.key] = this),
      (e += 1);
  }
  (i.prototype.queueTrigger = function (t) {
    this.group.queueTrigger(this, t);
  }),
    (i.prototype.trigger = function (t) {
      this.enabled && this.callback && this.callback.apply(this, t);
    }),
    (i.prototype.destroy = function () {
      this.context.remove(this), this.group.remove(this), delete r[this.key];
    }),
    (i.prototype.disable = function () {
      return (this.enabled = !1), this;
    }),
    (i.prototype.enable = function () {
      return this.context.refresh(), (this.enabled = !0), this;
    }),
    (i.prototype.next = function () {
      return this.group.next(this);
    }),
    (i.prototype.previous = function () {
      return this.group.previous(this);
    }),
    (i.invokeAll = function (t) {
      var e = [];
      for (var i in r) e.push(r[i]);
      for (var o = 0, n = e.length; o < n; o++) e[o][t]();
    }),
    (i.destroyAll = function () {
      i.invokeAll("destroy");
    }),
    (i.disableAll = function () {
      i.invokeAll("disable");
    }),
    (i.enableAll = function () {
      for (var t in (i.Context.refreshAll(), r)) r[t].enabled = !0;
      return this;
    }),
    (i.refreshAll = function () {
      i.Context.refreshAll();
    }),
    (i.viewportHeight = function () {
      return window.innerHeight || document.documentElement.clientHeight;
    }),
    (i.viewportWidth = function () {
      return document.documentElement.clientWidth;
    }),
    (i.adapters = []),
    (i.defaults = {
      context: window,
      continuous: !0,
      enabled: !0,
      group: "default",
      horizontal: !1,
      offset: 0,
    }),
    (i.offsetAliases = {
      "bottom-in-view": function () {
        return this.context.innerHeight() - this.adapter.outerHeight();
      },
      "right-in-view": function () {
        return this.context.innerWidth() - this.adapter.outerWidth();
      },
    }),
    (window.VcWaypoint = i);
})(),
  (function () {
    "use strict";
    function e(t) {
      window.setTimeout(t, 1e3 / 60);
    }
    var i = 0,
      o = {},
      y = window.VcWaypoint,
      t = window.onload;
    function n(t) {
      (this.element = t),
        (this.Adapter = y.Adapter),
        (this.adapter = new this.Adapter(t)),
        (this.key = "waypoint-context-" + i),
        (this.didScroll = !1),
        (this.didResize = !1),
        (this.oldScroll = {
          x: this.adapter.scrollLeft(),
          y: this.adapter.scrollTop(),
        }),
        (this.waypoints = { vertical: {}, horizontal: {} }),
        (t.waypointContextKey = this.key),
        (o[t.waypointContextKey] = this),
        (i += 1),
        y.windowContext ||
          ((y.windowContext = !0), (y.windowContext = new n(window))),
        this.createThrottledScrollHandler(),
        this.createThrottledResizeHandler();
    }
    (n.prototype.add = function (t) {
      var e = t.options.horizontal ? "horizontal" : "vertical";
      (this.waypoints[e][t.key] = t), this.refresh();
    }),
      (n.prototype.checkEmpty = function () {
        var t = this.Adapter.isEmptyObject(this.waypoints.horizontal),
          e = this.Adapter.isEmptyObject(this.waypoints.vertical),
          i = this.element == this.element.window;
        t && e && !i && (this.adapter.off(".vcwaypoints"), delete o[this.key]);
      }),
      (n.prototype.createThrottledResizeHandler = function () {
        var t = this;
        function e() {
          t.handleResize(), (t.didResize = !1);
        }
        this.adapter.on("resize.vcwaypoints", function () {
          t.didResize || ((t.didResize = !0), y.requestAnimationFrame(e));
        });
      }),
      (n.prototype.createThrottledScrollHandler = function () {
        var t = this;
        function e() {
          t.handleScroll(), (t.didScroll = !1);
        }
        this.adapter.on("scroll.vcwaypoints", function () {
          (t.didScroll && !y.isTouch) ||
            ((t.didScroll = !0), y.requestAnimationFrame(e));
        });
      }),
      (n.prototype.handleResize = function () {
        y.Context.refreshAll();
      }),
      (n.prototype.handleScroll = function () {
        var t = {},
          e = {
            horizontal: {
              newScroll: this.adapter.scrollLeft(),
              oldScroll: this.oldScroll.x,
              forward: "right",
              backward: "left",
            },
            vertical: {
              newScroll: this.adapter.scrollTop(),
              oldScroll: this.oldScroll.y,
              forward: "down",
              backward: "up",
            },
          };
        for (var i in e) {
          var o = e[i],
            n = o.newScroll > o.oldScroll ? o.forward : o.backward;
          for (var r in this.waypoints[i]) {
            var s = this.waypoints[i][r];
            if (null !== s.triggerPoint) {
              var a = o.oldScroll < s.triggerPoint,
                l = o.newScroll >= s.triggerPoint;
              ((a && l) || (!a && !l)) &&
                (s.queueTrigger(n), (t[s.group.id] = s.group));
            }
          }
        }
        for (var h in t) t[h].flushTriggers();
        this.oldScroll = { x: e.horizontal.newScroll, y: e.vertical.newScroll };
      }),
      (n.prototype.innerHeight = function () {
        return this.element == this.element.window
          ? y.viewportHeight()
          : this.adapter.innerHeight();
      }),
      (n.prototype.remove = function (t) {
        delete this.waypoints[t.axis][t.key], this.checkEmpty();
      }),
      (n.prototype.innerWidth = function () {
        return this.element == this.element.window
          ? y.viewportWidth()
          : this.adapter.innerWidth();
      }),
      (n.prototype.destroy = function () {
        var t = [];
        for (var e in this.waypoints)
          for (var i in this.waypoints[e]) t.push(this.waypoints[e][i]);
        for (var o = 0, n = t.length; o < n; o++) t[o].destroy();
      }),
      (n.prototype.refresh = function () {
        var t,
          e = this.element == this.element.window,
          i = e ? void 0 : this.adapter.offset(),
          o = {};
        for (var n in (this.handleScroll(),
        (t = {
          horizontal: {
            contextOffset: e ? 0 : i.left,
            contextScroll: e ? 0 : this.oldScroll.x,
            contextDimension: this.innerWidth(),
            oldScroll: this.oldScroll.x,
            forward: "right",
            backward: "left",
            offsetProp: "left",
          },
          vertical: {
            contextOffset: e ? 0 : i.top,
            contextScroll: e ? 0 : this.oldScroll.y,
            contextDimension: this.innerHeight(),
            oldScroll: this.oldScroll.y,
            forward: "down",
            backward: "up",
            offsetProp: "top",
          },
        }))) {
          var r = t[n];
          for (var s in this.waypoints[n]) {
            var a,
              l,
              h,
              p,
              c = this.waypoints[n][s],
              u = c.options.offset,
              d = c.triggerPoint,
              f = 0,
              w = null == d;
            c.element !== c.element.window &&
              (f = c.adapter.offset()[r.offsetProp]),
              "function" == typeof u
                ? (u = u.apply(c))
                : "string" == typeof u &&
                  ((u = parseFloat(u)),
                  -1 < c.options.offset.indexOf("%") &&
                    (u = Math.ceil((r.contextDimension * u) / 100))),
              (a = r.contextScroll - r.contextOffset),
              (c.triggerPoint = Math.floor(f + a - u)),
              (l = d < r.oldScroll),
              (h = c.triggerPoint >= r.oldScroll),
              (p = !l && !h),
              !w && l && h
                ? (c.queueTrigger(r.backward), (o[c.group.id] = c.group))
                : !w && p
                ? (c.queueTrigger(r.forward), (o[c.group.id] = c.group))
                : w &&
                  r.oldScroll >= c.triggerPoint &&
                  (c.queueTrigger(r.forward), (o[c.group.id] = c.group));
          }
        }
        return (
          y.requestAnimationFrame(function () {
            for (var t in o) o[t].flushTriggers();
          }),
          this
        );
      }),
      (n.findOrCreateByElement = function (t) {
        return n.findByElement(t) || new n(t);
      }),
      (n.refreshAll = function () {
        for (var t in o) o[t].refresh();
      }),
      (n.findByElement = function (t) {
        return o[t.waypointContextKey];
      }),
      (window.onload = function () {
        t && t(), n.refreshAll();
      }),
      (y.requestAnimationFrame = function (t) {
        (
          window.requestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          e
        ).call(window, t);
      }),
      (y.Context = n);
  })(),
  (function () {
    "use strict";
    function s(t, e) {
      return t.triggerPoint - e.triggerPoint;
    }
    function a(t, e) {
      return e.triggerPoint - t.triggerPoint;
    }
    var e = { vertical: {}, horizontal: {} },
      i = window.VcWaypoint;
    function o(t) {
      (this.name = t.name),
        (this.axis = t.axis),
        (this.id = this.name + "-" + this.axis),
        (this.waypoints = []),
        this.clearTriggerQueues(),
        (e[this.axis][this.name] = this);
    }
    (o.prototype.add = function (t) {
      this.waypoints.push(t);
    }),
      (o.prototype.clearTriggerQueues = function () {
        this.triggerQueues = { up: [], down: [], left: [], right: [] };
      }),
      (o.prototype.flushTriggers = function () {
        for (var t in this.triggerQueues) {
          var e = this.triggerQueues[t],
            i = "up" === t || "left" === t;
          e.sort(i ? a : s);
          for (var o = 0, n = e.length; o < n; o += 1) {
            var r = e[o];
            (r.options.continuous || o === e.length - 1) && r.trigger([t]);
          }
        }
        this.clearTriggerQueues();
      }),
      (o.prototype.next = function (t) {
        this.waypoints.sort(s);
        var e = i.Adapter.inArray(t, this.waypoints);
        return e === this.waypoints.length - 1 ? null : this.waypoints[e + 1];
      }),
      (o.prototype.previous = function (t) {
        this.waypoints.sort(s);
        var e = i.Adapter.inArray(t, this.waypoints);
        return e ? this.waypoints[e - 1] : null;
      }),
      (o.prototype.queueTrigger = function (t, e) {
        this.triggerQueues[e].push(t);
      }),
      (o.prototype.remove = function (t) {
        var e = i.Adapter.inArray(t, this.waypoints);
        -1 < e && this.waypoints.splice(e, 1);
      }),
      (o.prototype.first = function () {
        return this.waypoints[0];
      }),
      (o.prototype.last = function () {
        return this.waypoints[this.waypoints.length - 1];
      }),
      (o.findOrCreate = function (t) {
        return e[t.axis][t.name] || new o(t);
      }),
      (i.Group = o);
  })(),
  (function () {
    "use strict";
    var i = window.jQuery,
      t = window.VcWaypoint;
    function o(t) {
      this.$element = i(t);
    }
    i.each(
      [
        "innerHeight",
        "innerWidth",
        "off",
        "offset",
        "on",
        "outerHeight",
        "outerWidth",
        "scrollLeft",
        "scrollTop",
      ],
      function (t, e) {
        o.prototype[e] = function () {
          var t = Array.prototype.slice.call(arguments);
          return this.$element[e].apply(this.$element, t);
        };
      }
    ),
      i.each(["extend", "inArray", "isEmptyObject"], function (t, e) {
        o[e] = i[e];
      }),
      t.adapters.push({ name: "jquery", Adapter: o }),
      (t.Adapter = o);
  })(),
  (function () {
    "use strict";
    var n = window.VcWaypoint;
    function t(o) {
      return function () {
        var e = [],
          i = arguments[0];
        return (
          o.isFunction(arguments[0]) &&
            ((i = o.extend({}, arguments[1])).handler = arguments[0]),
          this.each(function () {
            var t = o.extend({}, i, { element: this });
            "string" == typeof t.context &&
              (t.context = o(this).closest(t.context)[0]),
              e.push(new n(t));
          }),
          e
        );
      };
    }
    window.jQuery && (window.jQuery.fn.vcwaypoint = t(window.jQuery)),
      window.Zepto && (window.Zepto.fn.vcwaypoint = t(window.Zepto));
  })();
/*!
 * WPBakery Page Builder v6.0.0 (https://wpbakery.com)
 * Copyright 2011-2021 Michael M, WPBakery
 * License: Commercial. More details: http://go.wpbakery.com/licensing
 */
!function () {
  "use strict";
  function Chart(context) {
    function computeDimension(element, dimension) {
      return (
        element["offset" + dimension] ||
        document.defaultView
          .getComputedStyle(element)
          .getPropertyValue(dimension)
      );
    }
    return (
      (this.canvas = context.canvas),
      (this.ctx = context),
      (this.width =
        computeDimension(context.canvas, "Width") || context.canvas.width),
      (this.height =
        computeDimension(context.canvas, "Height") || context.canvas.height),
      (this.aspectRatio = this.width / this.height),
      helpers.retinaScale(this),
      this
    );
  }
  var root = this,
    previous = root.Chart;
  (Chart.defaults = {
    global: {
      animation: !0,
      animationSteps: 60,
      animationEasing: "easeOutQuart",
      showScale: !0,
      scaleOverride: !1,
      scaleSteps: null,
      scaleStepWidth: null,
      scaleStartValue: null,
      scaleLineColor: "rgba(0,0,0,.1)",
      scaleLineWidth: 1,
      scaleShowLabels: !0,
      scaleLabel: "<%=value%>",
      scaleIntegersOnly: !0,
      scaleBeginAtZero: !1,
      scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      scaleFontSize: 12,
      scaleFontStyle: "normal",
      scaleFontColor: "#666",
      responsive: !1,
      maintainAspectRatio: !0,
      showTooltips: !0,
      customTooltips: !1,
      tooltipEvents: ["mousemove", "touchstart", "touchmove", "mouseout"],
      tooltipFillColor: "rgba(0,0,0,0.8)",
      tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      tooltipFontSize: 14,
      tooltipFontStyle: "normal",
      tooltipFontColor: "#fff",
      tooltipTitleFontFamily:
        "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      tooltipTitleFontSize: 14,
      tooltipTitleFontStyle: "bold",
      tooltipTitleFontColor: "#fff",
      tooltipTitleTemplate: "<%= label%>",
      tooltipYPadding: 6,
      tooltipXPadding: 6,
      tooltipCaretSize: 8,
      tooltipCornerRadius: 6,
      tooltipXOffset: 10,
      tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",
      multiTooltipTemplate: "<%= datasetLabel %>: <%= value %>",
      multiTooltipKeyBackground: "#fff",
      segmentColorDefault: [
        "#A6CEE3",
        "#1F78B4",
        "#B2DF8A",
        "#33A02C",
        "#FB9A99",
        "#E31A1C",
        "#FDBF6F",
        "#FF7F00",
        "#CAB2D6",
        "#6A3D9A",
        "#B4B482",
        "#B15928",
      ],
      segmentHighlightColorDefaults: [
        "#CEF6FF",
        "#47A0DC",
        "#DAFFB2",
        "#5BC854",
        "#FFC2C1",
        "#FF4244",
        "#FFE797",
        "#FFA728",
        "#F2DAFE",
        "#9265C2",
        "#DCDCAA",
        "#D98150",
      ],
      onAnimationProgress: function () {},
      onAnimationComplete: function () {},
    },
  }),
    (Chart.types = {});
  var id,
    timeout,
    helpers = (Chart.helpers = {}),
    each = (helpers.each = function (loopable, callback, self) {
      var additionalArgs = Array.prototype.slice.call(arguments, 3);
      if (loopable)
        if (loopable.length === +loopable.length)
          for (var i = 0; i < loopable.length; i++)
            callback.apply(self, [loopable[i], i].concat(additionalArgs));
        else
          for (var item in loopable)
            callback.apply(self, [loopable[item], item].concat(additionalArgs));
    }),
    clone = (helpers.clone = function (obj) {
      var objClone = {};
      return (
        each(obj, function (value, key) {
          obj.hasOwnProperty(key) && (objClone[key] = value);
        }),
        objClone
      );
    }),
    extend = (helpers.extend = function (base) {
      return (
        each(
          Array.prototype.slice.call(arguments, 1),
          function (extensionObject) {
            each(extensionObject, function (value, key) {
              extensionObject.hasOwnProperty(key) && (base[key] = value);
            });
          }
        ),
        base
      );
    }),
    merge = (helpers.merge = function (base, master) {
      var args = Array.prototype.slice.call(arguments, 0);
      return args.unshift({}), extend.apply(null, args);
    }),
    indexOf = (helpers.indexOf = function (arrayToSearch, item) {
      if (Array.prototype.indexOf) return arrayToSearch.indexOf(item);
      for (var i = 0; i < arrayToSearch.length; i++)
        if (arrayToSearch[i] === item) return i;
      return -1;
    }),
    inherits =
      ((helpers.where = function (collection, filterCallback) {
        var filtered = [];
        return (
          helpers.each(collection, function (item) {
            filterCallback(item) && filtered.push(item);
          }),
          filtered
        );
      }),
      (helpers.findNextWhere = function (
        arrayToSearch,
        filterCallback,
        startIndex
      ) {
        for (
          var i = (startIndex = startIndex || -1) + 1;
          i < arrayToSearch.length;
          i++
        ) {
          var currentItem = arrayToSearch[i];
          if (filterCallback(currentItem)) return currentItem;
        }
      }),
      (helpers.findPreviousWhere = function (
        arrayToSearch,
        filterCallback,
        startIndex
      ) {
        for (
          var i = (startIndex = startIndex || arrayToSearch.length) - 1;
          0 <= i;
          i--
        ) {
          var currentItem = arrayToSearch[i];
          if (filterCallback(currentItem)) return currentItem;
        }
      }),
      (helpers.inherits = function (extensions) {
        function Surrogate() {
          this.constructor = ChartElement;
        }
        var parent = this,
          ChartElement =
            extensions && extensions.hasOwnProperty("constructor")
              ? extensions.constructor
              : function () {
                  return parent.apply(this, arguments);
                };
        return (
          (Surrogate.prototype = parent.prototype),
          (ChartElement.prototype = new Surrogate()),
          (ChartElement.extend = inherits),
          extensions && extend(ChartElement.prototype, extensions),
          (ChartElement.__super__ = parent.prototype),
          ChartElement
        );
      })),
    noop = (helpers.noop = function () {}),
    uid = (helpers.uid =
      ((id = 0),
      function () {
        return "chart-" + id++;
      })),
    warn = (helpers.warn = function (str) {
      window.console &&
        "function" == typeof window.console.warn &&
        console.warn(str);
    }),
    amd = (helpers.amd = "function" == typeof define && define.amd),
    isNumber = (helpers.isNumber = function (n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }),
    max = (helpers.max = function (array) {
      return Math.max.apply(Math, array);
    }),
    min = (helpers.min = function (array) {
      return Math.min.apply(Math, array);
    }),
    getDecimalPlaces =
      ((helpers.cap = function (valueToCap, maxValue, minValue) {
        if (isNumber(maxValue)) {
          if (maxValue < valueToCap) return maxValue;
        } else if (isNumber(minValue) && valueToCap < minValue) return minValue;
        return valueToCap;
      }),
      (helpers.getDecimalPlaces = function (parts) {
        if (parts % 1 != 0 && isNumber(parts)) {
          parts = parts.toString();
          if (parts.indexOf("e-") < 0) return parts.split(".")[1].length;
          if (parts.indexOf(".") < 0) return parseInt(parts.split("e-")[1]);
          parts = parts.split(".")[1].split("e-");
          return parts[0].length + parseInt(parts[1]);
        }
        return 0;
      })),
    toRadians = (helpers.radians = function (degrees) {
      return degrees * (Math.PI / 180);
    }),
    aliasPixel =
      ((helpers.getAngleFromPoint = function (angle, radialDistanceFromCenter) {
        var distanceFromXCenter = radialDistanceFromCenter.x - angle.x,
          distanceFromYCenter = radialDistanceFromCenter.y - angle.y,
          radialDistanceFromCenter = Math.sqrt(
            distanceFromXCenter * distanceFromXCenter +
              distanceFromYCenter * distanceFromYCenter
          ),
          angle =
            2 * Math.PI + Math.atan2(distanceFromYCenter, distanceFromXCenter);
        return (
          distanceFromXCenter < 0 &&
            distanceFromYCenter < 0 &&
            (angle += 2 * Math.PI),
          { angle: angle, distance: radialDistanceFromCenter }
        );
      }),
      (helpers.aliasPixel = function (pixelWidth) {
        return pixelWidth % 2 == 0 ? 0 : 0.5;
      })),
    calculateOrderOfMagnitude =
      ((helpers.splineCurve = function (
        FirstPoint,
        MiddlePoint,
        AfterPoint,
        t
      ) {
        var d01 = Math.sqrt(
            Math.pow(MiddlePoint.x - FirstPoint.x, 2) +
              Math.pow(MiddlePoint.y - FirstPoint.y, 2)
          ),
          fb = Math.sqrt(
            Math.pow(AfterPoint.x - MiddlePoint.x, 2) +
              Math.pow(AfterPoint.y - MiddlePoint.y, 2)
          ),
          fa = (t * d01) / (d01 + fb),
          fb = (t * fb) / (d01 + fb);
        return {
          inner: {
            x: MiddlePoint.x - fa * (AfterPoint.x - FirstPoint.x),
            y: MiddlePoint.y - fa * (AfterPoint.y - FirstPoint.y),
          },
          outer: {
            x: MiddlePoint.x + fb * (AfterPoint.x - FirstPoint.x),
            y: MiddlePoint.y + fb * (AfterPoint.y - FirstPoint.y),
          },
        };
      }),
      (helpers.calculateOrderOfMagnitude = function (val) {
        return Math.floor(Math.log(val) / Math.LN10);
      })),
    template =
      ((helpers.calculateScaleRange = function (
        valueRange,
        graphMin,
        graphMax,
        startFromZero,
        integersOnly
      ) {
        var maxSteps = Math.floor(graphMin / (1.5 * graphMax)),
          skipFitting = maxSteps <= 2,
          values = [];
        each(valueRange, function (v) {
          null == v || values.push(v);
        });
        (graphMin = min(values)), (graphMax = max(values));
        graphMax === graphMin &&
          ((graphMax += 0.5),
          0.5 <= graphMin && !startFromZero
            ? (graphMin -= 0.5)
            : (graphMax += 0.5));
        for (
          var valueRange = Math.abs(graphMax - graphMin),
            rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),
            graphMax =
              Math.ceil(graphMax / +Math.pow(10, rangeOrderOfMagnitude)) *
              Math.pow(10, rangeOrderOfMagnitude),
            graphMin = startFromZero
              ? 0
              : Math.floor(graphMin / +Math.pow(10, rangeOrderOfMagnitude)) *
                Math.pow(10, rangeOrderOfMagnitude),
            graphRange = graphMax - graphMin,
            stepValue = Math.pow(10, rangeOrderOfMagnitude),
            numberOfSteps = Math.round(graphRange / stepValue);
          (maxSteps < numberOfSteps || 2 * numberOfSteps < maxSteps) &&
          !skipFitting;

        )
          if (maxSteps < numberOfSteps)
            (stepValue *= 2),
              (numberOfSteps = Math.round(graphRange / stepValue)) % 1 != 0 &&
                (skipFitting = !0);
          else if (integersOnly && 0 <= rangeOrderOfMagnitude) {
            if ((stepValue / 2) % 1 != 0) break;
            (stepValue /= 2),
              (numberOfSteps = Math.round(graphRange / stepValue));
          } else
            (stepValue /= 2),
              (numberOfSteps = Math.round(graphRange / stepValue));
        return (
          skipFitting && (stepValue = graphRange / (numberOfSteps = 2)),
          {
            steps: numberOfSteps,
            stepValue: stepValue,
            min: graphMin,
            max: graphMin + numberOfSteps * stepValue,
          }
        );
      }),
      (helpers.template = function (templateString, valuesObject) {
        if (templateString instanceof Function)
          return templateString(valuesObject);
        var fn,
          data,
          cache = {};
        return (
          (data = valuesObject),
          (fn = /\W/.test((fn = templateString))
            ? new Function(
                "obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('" +
                  fn
                    .replace(/[\r\t\n]/g, " ")
                    .split("<%")
                    .join("\t")
                    .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                    .replace(/\t=(.*?)%>/g, "',$1,'")
                    .split("\t")
                    .join("');")
                    .split("%>")
                    .join("p.push('")
                    .split("\r")
                    .join("\\'") +
                  "');}return p.join('');"
              )
            : cache[fn]),
          data ? fn(data) : fn
        );
      })),
    easingEffects =
      ((helpers.generateLabels = function (
        templateString,
        numberOfSteps,
        graphMin,
        stepValue
      ) {
        var labelsArray = new Array(numberOfSteps);
        return (
          templateString &&
            each(labelsArray, function (val, index) {
              labelsArray[index] = template(templateString, {
                value: graphMin + stepValue * (index + 1),
              });
            }),
          labelsArray
        );
      }),
      (helpers.easingEffects = {
        linear: function (t) {
          return t;
        },
        easeInQuad: function (t) {
          return t * t;
        },
        easeOutQuad: function (t) {
          return -1 * t * (t - 2);
        },
        easeInOutQuad: function (t) {
          return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1);
        },
        easeInCubic: function (t) {
          return t * t * t;
        },
        easeOutCubic: function (t) {
          return (t = +t - 1) * t * t + 1;
        },
        easeInOutCubic: function (t) {
          return (t /= 0.5) < 1
            ? 0.5 * t * t * t
            : 0.5 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function (t) {
          return t * t * t * t;
        },
        easeOutQuart: function (t) {
          return -1 * ((t = +t - 1) * t * t * t - 1);
        },
        easeInOutQuart: function (t) {
          return (t /= 0.5) < 1
            ? 0.5 * t * t * t * t
            : -0.5 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function (t) {
          return (t /= 1) * t * t * t * t;
        },
        easeOutQuint: function (t) {
          return (t = +t - 1) * t * t * t * t + 1;
        },
        easeInOutQuint: function (t) {
          return (t /= 0.5) < 1
            ? 0.5 * t * t * t * t * t
            : 0.5 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function (t) {
          return -1 * Math.cos(+t * (Math.PI / 2)) + 1;
        },
        easeOutSine: function (t) {
          return +Math.sin(+t * (Math.PI / 2));
        },
        easeInOutSine: function (t) {
          return -0.5 * (Math.cos(Math.PI * t) - 1);
        },
        easeInExpo: function (t) {
          return 0 === t ? 1 : +Math.pow(2, 10 * (+t - 1));
        },
        easeOutExpo: function (t) {
          return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
        },
        easeInOutExpo: function (t) {
          return 0 === t
            ? 0
            : 1 === t
            ? 1
            : (t /= 0.5) < 1
            ? 0.5 * Math.pow(2, 10 * (t - 1))
            : 0.5 * (2 - Math.pow(2, -10 * --t));
        },
        easeInCirc: function (t) {
          return 1 <= t ? t : -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
        },
        easeOutCirc: function (t) {
          return +Math.sqrt(1 - (t = +t - 1) * t);
        },
        easeInOutCirc: function (t) {
          return (t /= 0.5) < 1
            ? -0.5 * (Math.sqrt(1 - t * t) - 1)
            : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function (t) {
          var s = 1.70158,
            p = 0,
            a = 1;
          return 0 === t
            ? 0
            : 1 == (t /= 1)
            ? 1
            : ((p = p || 0.3),
              (s =
                a < Math.abs(1)
                  ? ((a = 1), p / 4)
                  : (p / (2 * Math.PI)) * Math.asin(1 / a)),
              -(
                a *
                Math.pow(2, 10 * --t) *
                Math.sin(((+t - s) * (2 * Math.PI)) / p)
              ));
        },
        easeOutElastic: function (t) {
          var s = 1.70158,
            p = 0,
            a = 1;
          return 0 === t
            ? 0
            : 1 == (t /= 1)
            ? 1
            : ((p = p || 0.3),
              (s =
                a < Math.abs(1)
                  ? ((a = 1), p / 4)
                  : (p / (2 * Math.PI)) * Math.asin(1 / a)),
              a *
                Math.pow(2, -10 * t) *
                Math.sin(((+t - s) * (2 * Math.PI)) / p) +
                1);
        },
        easeInOutElastic: function (t) {
          var s = 1.70158,
            p = 0,
            a = 1;
          return 0 === t
            ? 0
            : 2 == (t /= 0.5)
            ? 1
            : ((p = p || 0.3 * 1.5 * 1),
              (s =
                a < Math.abs(1)
                  ? ((a = 1), p / 4)
                  : (p / (2 * Math.PI)) * Math.asin(1 / a)),
              t < 1
                ? a *
                  Math.pow(2, 10 * --t) *
                  Math.sin(((+t - s) * (2 * Math.PI)) / p) *
                  -0.5
                : a *
                    Math.pow(2, -10 * --t) *
                    Math.sin(((+t - s) * (2 * Math.PI)) / p) *
                    0.5 +
                  1);
        },
        easeInBack: function (t) {
          var s = 1.70158;
          return (t /= 1) * t * ((1 + s) * t - s);
        },
        easeOutBack: function (t) {
          var s = 1.70158;
          return (t = +t - 1) * t * ((1 + s) * t + s) + 1;
        },
        easeInOutBack: function (t) {
          var s = 1.70158;
          return (t /= 0.5) < 1
            ? t * t * ((1 + (s *= 1.525)) * t - s) * 0.5
            : 0.5 * ((t -= 2) * t * ((1 + (s *= 1.525)) * t + s) + 2);
        },
        easeInBounce: function (t) {
          return 1 - easingEffects.easeOutBounce(1 - t);
        },
        easeOutBounce: function (t) {
          return (t /= 1) < 1 / 2.75
            ? 7.5625 * t * t * 1
            : t < 2 / 2.75
            ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
            : t < 2.5 / 2.75
            ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
            : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
        },
        easeInOutBounce: function (t) {
          return t < 0.5
            ? 0.5 * easingEffects.easeInBounce(2 * t)
            : 0.5 * easingEffects.easeOutBounce(2 * t - 1) + 0.5;
        },
      })),
    requestAnimFrame = (helpers.requestAnimFrame =
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.oRequestAnimationFrame ||
      window.msRequestAnimationFrame ||
      function (callback) {
        return window.setTimeout(callback, 1e3 / 60);
      }),
    addEvent =
      ((helpers.cancelAnimFrame =
        window.cancelAnimationFrame ||
        window.webkitCancelAnimationFrame ||
        window.mozCancelAnimationFrame ||
        window.oCancelAnimationFrame ||
        window.msCancelAnimationFrame ||
        function (callback) {
          return window.clearTimeout(callback, 1e3 / 60);
        }),
      (helpers.animationLoop = function (
        callback,
        totalSteps,
        easingString,
        onProgress,
        onComplete,
        chartInstance
      ) {
        var currentStep = 0,
          easingFunction = easingEffects[easingString] || easingEffects.linear,
          animationFrame = function () {
            var stepDecimal = ++currentStep / totalSteps,
              easeDecimal = easingFunction(stepDecimal);
            callback.call(chartInstance, easeDecimal, stepDecimal, currentStep),
              onProgress.call(chartInstance, easeDecimal, stepDecimal),
              currentStep < totalSteps
                ? (chartInstance.animationFrame =
                    requestAnimFrame(animationFrame))
                : onComplete.apply(chartInstance);
          };
        requestAnimFrame(animationFrame);
      }),
      (helpers.getRelativePosition = function (mouseY) {
        var mouseX,
          e = mouseY.originalEvent || mouseY,
          mouseY = (
            mouseY.currentTarget || mouseY.srcElement
          ).getBoundingClientRect(),
          mouseY = e.touches
            ? ((mouseX = e.touches[0].clientX - mouseY.left),
              e.touches[0].clientY - mouseY.top)
            : ((mouseX = e.clientX - mouseY.left), e.clientY - mouseY.top);
        return { x: mouseX, y: mouseY };
      }),
      (helpers.addEvent = function (node, eventType, method) {
        node.addEventListener
          ? node.addEventListener(eventType, method)
          : node.attachEvent
          ? node.attachEvent("on" + eventType, method)
          : (node["on" + eventType] = method);
      })),
    removeEvent = (helpers.removeEvent = function (node, eventType, handler) {
      node.removeEventListener
        ? node.removeEventListener(eventType, handler, !1)
        : node.detachEvent
        ? node.detachEvent("on" + eventType, handler)
        : (node["on" + eventType] = noop);
    }),
    unbindEvents =
      ((helpers.bindEvents = function (chartInstance, arrayOfEvents, handler) {
        chartInstance.events || (chartInstance.events = {}),
          each(arrayOfEvents, function (eventName) {
            (chartInstance.events[eventName] = function () {
              handler.apply(chartInstance, arguments);
            }),
              addEvent(
                chartInstance.chart.canvas,
                eventName,
                chartInstance.events[eventName]
              );
          });
      }),
      (helpers.unbindEvents = function (chartInstance, arrayOfEvents) {
        each(arrayOfEvents, function (handler, eventName) {
          removeEvent(chartInstance.chart.canvas, eventName, handler);
        });
      })),
    getMaximumWidth = (helpers.getMaximumWidth = function (padding) {
      var container = padding.parentNode,
        padding =
          parseInt(getStyle(container, "padding-left")) +
          parseInt(getStyle(container, "padding-right"));
      return container ? container.clientWidth - padding : 0;
    }),
    getMaximumHeight = (helpers.getMaximumHeight = function (padding) {
      var container = padding.parentNode,
        padding =
          parseInt(getStyle(container, "padding-bottom")) +
          parseInt(getStyle(container, "padding-top"));
      return container ? container.clientHeight - padding : 0;
    }),
    getStyle = (helpers.getStyle = function (el, property) {
      return el.currentStyle
        ? el.currentStyle[property]
        : document.defaultView
            .getComputedStyle(el, null)
            .getPropertyValue(property);
    }),
    retinaScale =
      ((helpers.getMaximumSize = helpers.getMaximumWidth),
      (helpers.retinaScale = function (height) {
        var ctx = height.ctx,
          width = height.canvas.width,
          height = height.canvas.height;
        window.devicePixelRatio &&
          ((ctx.canvas.style.width = width + "px"),
          (ctx.canvas.style.height = height + "px"),
          (ctx.canvas.height = height * window.devicePixelRatio),
          (ctx.canvas.width = width * window.devicePixelRatio),
          ctx.scale(window.devicePixelRatio, window.devicePixelRatio));
      })),
    clear = (helpers.clear = function (chart) {
      chart.ctx.clearRect(0, 0, chart.width, chart.height);
    }),
    fontString = (helpers.fontString = function (
      pixelSize,
      fontStyle,
      fontFamily
    ) {
      return fontStyle + " " + pixelSize + "px " + fontFamily;
    }),
    longestText = (helpers.longestText = function (ctx, font, arrayOfStrings) {
      ctx.font = font;
      var longest = 0;
      return (
        each(arrayOfStrings, function (textWidth) {
          textWidth = ctx.measureText(textWidth).width;
          longest = longest < textWidth ? textWidth : longest;
        }),
        longest
      );
    }),
    drawRoundedRectangle = (helpers.drawRoundedRectangle = function (
      ctx,
      x,
      y,
      width,
      height,
      radius
    ) {
      ctx.beginPath(),
        ctx.moveTo(x + radius, y),
        ctx.lineTo(x + width - radius, y),
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius),
        ctx.lineTo(x + width, y + height - radius),
        ctx.quadraticCurveTo(
          x + width,
          y + height,
          x + width - radius,
          y + height
        ),
        ctx.lineTo(x + radius, y + height),
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius),
        ctx.lineTo(x, y + radius),
        ctx.quadraticCurveTo(x, y, x + radius, y),
        ctx.closePath();
    });
  (Chart.instances = {}),
    extend(
      (Chart.Type = function (data, options, chart) {
        (this.options = options),
          (this.chart = chart),
          (this.id = uid()),
          (Chart.instances[this.id] = this),
          options.responsive && this.resize(),
          this.initialize.call(this, data);
      }).prototype,
      {
        initialize: function () {
          return this;
        },
        clear: function () {
          return clear(this.chart), this;
        },
        stop: function () {
          return Chart.animationService.cancelAnimation(this), this;
        },
        resize: function (callback) {
          this.stop();
          var canvas = this.chart.canvas,
            newWidth = getMaximumWidth(this.chart.canvas),
            newHeight = this.options.maintainAspectRatio
              ? newWidth / this.chart.aspectRatio
              : getMaximumHeight(this.chart.canvas);
          return (
            (canvas.width = this.chart.width = newWidth),
            (canvas.height = this.chart.height = newHeight),
            retinaScale(this.chart),
            "function" == typeof callback &&
              callback.apply(this, Array.prototype.slice.call(arguments, 1)),
            this
          );
        },
        reflow: noop,
        render: function (animation) {
          return (
            animation && this.reflow(),
            this.options.animation && !animation
              ? (((animation = new Chart.Animation()).numSteps =
                  this.options.animationSteps),
                (animation.easing = this.options.animationEasing),
                (animation.render = function (chartInstance, animationObject) {
                  var easeDecimal =
                      helpers.easingEffects[animationObject.easing],
                    stepDecimal =
                      animationObject.currentStep / animationObject.numSteps,
                    easeDecimal = easeDecimal(stepDecimal);
                  chartInstance.draw(
                    easeDecimal,
                    stepDecimal,
                    animationObject.currentStep
                  );
                }),
                (animation.onAnimationProgress =
                  this.options.onAnimationProgress),
                (animation.onAnimationComplete =
                  this.options.onAnimationComplete),
                Chart.animationService.addAnimation(this, animation))
              : (this.draw(), this.options.onAnimationComplete.call(this)),
            this
          );
        },
        generateLegend: function () {
          return helpers.template(this.options.legendTemplate, this);
        },
        destroy: function () {
          this.stop(), this.clear(), unbindEvents(this, this.events);
          var canvas = this.chart.canvas;
          (canvas.width = this.chart.width),
            (canvas.height = this.chart.height),
            canvas.style.removeProperty
              ? (canvas.style.removeProperty("width"),
                canvas.style.removeProperty("height"))
              : (canvas.style.removeAttribute("width"),
                canvas.style.removeAttribute("height")),
            delete Chart.instances[this.id];
        },
        showTooltip: function (ChartElements, medianPosition) {
          if (
            (void 0 === this.activeElements && (this.activeElements = []),
            function (Elements) {
              var changed = !1;
              return Elements.length !== this.activeElements.length
                ? (changed = !0)
                : (each(
                    Elements,
                    function (element, index) {
                      element !== this.activeElements[index] && (changed = !0);
                    },
                    this
                  ),
                  changed);
            }.call(this, ChartElements) || medianPosition)
          ) {
            if (
              ((this.activeElements = ChartElements),
              this.draw(),
              this.options.customTooltips && this.options.customTooltips(!1),
              0 < ChartElements.length)
            )
              if (this.datasets && 1 < this.datasets.length) {
                for (
                  var dataArray, dataIndex, i = this.datasets.length - 1;
                  0 <= i &&
                  ((dataArray =
                    this.datasets[i].points ||
                    this.datasets[i].bars ||
                    this.datasets[i].segments),
                  -1 === (dataIndex = indexOf(dataArray, ChartElements[0])));
                  i--
                );
                var tooltipLabels = [],
                  tooltipColors = [],
                  medianPosition = function (index) {
                    var dataCollection,
                      xMax,
                      yMax,
                      xMin,
                      yMin,
                      Elements = [],
                      xPositions = [],
                      yPositions = [];
                    return (
                      helpers.each(this.datasets, function (dataset) {
                        (dataCollection =
                          dataset.points || dataset.bars || dataset.segments)[
                          dataIndex
                        ] &&
                          dataCollection[dataIndex].hasValue() &&
                          Elements.push(dataCollection[dataIndex]);
                      }),
                      helpers.each(
                        Elements,
                        function (element) {
                          xPositions.push(element.x),
                            yPositions.push(element.y),
                            tooltipLabels.push(
                              helpers.template(
                                this.options.multiTooltipTemplate,
                                element
                              )
                            ),
                            tooltipColors.push({
                              fill:
                                element._saved.fillColor || element.fillColor,
                              stroke:
                                element._saved.strokeColor ||
                                element.strokeColor,
                            });
                        },
                        this
                      ),
                      (yMin = min(yPositions)),
                      (yMax = max(yPositions)),
                      (xMin = min(xPositions)),
                      (xMax = max(xPositions)),
                      {
                        x: xMin > this.chart.width / 2 ? xMin : xMax,
                        y: (yMin + yMax) / 2,
                      }
                    );
                  }.call(this, dataIndex);
                new Chart.MultiTooltip({
                  x: medianPosition.x,
                  y: medianPosition.y,
                  xPadding: this.options.tooltipXPadding,
                  yPadding: this.options.tooltipYPadding,
                  xOffset: this.options.tooltipXOffset,
                  fillColor: this.options.tooltipFillColor,
                  textColor: this.options.tooltipFontColor,
                  fontFamily: this.options.tooltipFontFamily,
                  fontStyle: this.options.tooltipFontStyle,
                  fontSize: this.options.tooltipFontSize,
                  titleTextColor: this.options.tooltipTitleFontColor,
                  titleFontFamily: this.options.tooltipTitleFontFamily,
                  titleFontStyle: this.options.tooltipTitleFontStyle,
                  titleFontSize: this.options.tooltipTitleFontSize,
                  cornerRadius: this.options.tooltipCornerRadius,
                  labels: tooltipLabels,
                  legendColors: tooltipColors,
                  legendColorBackground: this.options.multiTooltipKeyBackground,
                  title: template(
                    this.options.tooltipTitleTemplate,
                    ChartElements[0]
                  ),
                  chart: this.chart,
                  ctx: this.chart.ctx,
                  custom: this.options.customTooltips,
                }).draw();
              } else
                each(
                  ChartElements,
                  function (Element) {
                    var tooltipPosition = Element.tooltipPosition();
                    new Chart.Tooltip({
                      x: Math.round(tooltipPosition.x),
                      y: Math.round(tooltipPosition.y),
                      xPadding: this.options.tooltipXPadding,
                      yPadding: this.options.tooltipYPadding,
                      fillColor: this.options.tooltipFillColor,
                      textColor: this.options.tooltipFontColor,
                      fontFamily: this.options.tooltipFontFamily,
                      fontStyle: this.options.tooltipFontStyle,
                      fontSize: this.options.tooltipFontSize,
                      caretHeight: this.options.tooltipCaretSize,
                      cornerRadius: this.options.tooltipCornerRadius,
                      text: template(this.options.tooltipTemplate, Element),
                      chart: this.chart,
                      custom: this.options.customTooltips,
                    }).draw();
                  },
                  this
                );
            return this;
          }
        },
        toBase64Image: function () {
          return this.chart.canvas.toDataURL.apply(
            this.chart.canvas,
            arguments
          );
        },
      }
    ),
    (Chart.Type.extend = function (extensions) {
      function ChartType() {
        return parent.apply(this, arguments);
      }
      var chartName,
        baseDefaults,
        parent = this;
      return (
        (ChartType.prototype = clone(parent.prototype)),
        extend(ChartType.prototype, extensions),
        (ChartType.extend = Chart.Type.extend),
        extensions.name || parent.prototype.name
          ? ((chartName = extensions.name || parent.prototype.name),
            (baseDefaults = Chart.defaults[parent.prototype.name]
              ? clone(Chart.defaults[parent.prototype.name])
              : {}),
            (Chart.defaults[chartName] = extend(
              baseDefaults,
              extensions.defaults
            )),
            (Chart.types[chartName] = ChartType),
            (Chart.prototype[chartName] = function (data, config) {
              config = merge(
                Chart.defaults.global,
                Chart.defaults[chartName],
                config || {}
              );
              return new ChartType(data, config, this);
            }))
          : warn(
              "Name not provided for this chart, so it hasn't been registered"
            ),
        parent
      );
    }),
    (Chart.Element = function (configuration) {
      extend(this, configuration),
        this.initialize.apply(this, arguments),
        this.save();
    }),
    extend(Chart.Element.prototype, {
      initialize: function () {},
      restore: function (props) {
        return (
          props
            ? each(
                props,
                function (key) {
                  this[key] = this._saved[key];
                },
                this
              )
            : extend(this, this._saved),
          this
        );
      },
      save: function () {
        return (this._saved = clone(this)), delete this._saved._saved, this;
      },
      update: function (newProps) {
        return (
          each(
            newProps,
            function (value, key) {
              (this._saved[key] = this[key]), (this[key] = value);
            },
            this
          ),
          this
        );
      },
      transition: function (props, ease) {
        return (
          each(
            props,
            function (value, key) {
              this[key] = (value - this._saved[key]) * ease + this._saved[key];
            },
            this
          ),
          this
        );
      },
      tooltipPosition: function () {
        return { x: this.x, y: this.y };
      },
      hasValue: function () {
        return isNumber(this.value);
      },
    }),
    (Chart.Element.extend = inherits),
    (Chart.Point = Chart.Element.extend({
      display: !0,
      inRange: function (chartX, chartY) {
        var hitDetectionRange = this.hitDetectionRadius + this.radius;
        return (
          Math.pow(chartX - this.x, 2) + Math.pow(chartY - this.y, 2) <
          Math.pow(hitDetectionRange, 2)
        );
      },
      draw: function () {
        var ctx;
        this.display &&
          ((ctx = this.ctx).beginPath(),
          ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI),
          ctx.closePath(),
          (ctx.strokeStyle = this.strokeColor),
          (ctx.lineWidth = this.strokeWidth),
          (ctx.fillStyle = this.fillColor),
          ctx.fill(),
          ctx.stroke());
      },
    })),
    (Chart.Arc = Chart.Element.extend({
      inRange: function (startAngle, betweenAngles) {
        var withinRadius = helpers.getAngleFromPoint(this, {
            x: startAngle,
            y: betweenAngles,
          }),
          pointRelativeAngle = withinRadius.angle % (2 * Math.PI),
          startAngle = (2 * Math.PI + this.startAngle) % (2 * Math.PI),
          betweenAngles = (2 * Math.PI + this.endAngle) % (2 * Math.PI) || 360,
          betweenAngles =
            betweenAngles < startAngle
              ? pointRelativeAngle <= betweenAngles ||
                startAngle <= pointRelativeAngle
              : startAngle <= pointRelativeAngle &&
                pointRelativeAngle <= betweenAngles,
          withinRadius =
            withinRadius.distance >= this.innerRadius &&
            withinRadius.distance <= this.outerRadius;
        return betweenAngles && withinRadius;
      },
      tooltipPosition: function () {
        var centreAngle =
            this.startAngle + (this.endAngle - this.startAngle) / 2,
          rangeFromCentre =
            (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;
        return {
          x: this.x + Math.cos(centreAngle) * rangeFromCentre,
          y: this.y + Math.sin(centreAngle) * rangeFromCentre,
        };
      },
      draw: function (ctx) {
        ctx = this.ctx;
        ctx.beginPath(),
          ctx.arc(
            this.x,
            this.y,
            this.outerRadius < 0 ? 0 : this.outerRadius,
            this.startAngle,
            this.endAngle
          ),
          ctx.arc(
            this.x,
            this.y,
            this.innerRadius < 0 ? 0 : this.innerRadius,
            this.endAngle,
            this.startAngle,
            !0
          ),
          ctx.closePath(),
          (ctx.strokeStyle = this.strokeColor),
          (ctx.lineWidth = this.strokeWidth),
          (ctx.fillStyle = this.fillColor),
          ctx.fill(),
          (ctx.lineJoin = "bevel"),
          this.showStroke && ctx.stroke();
      },
    })),
    (Chart.Rectangle = Chart.Element.extend({
      draw: function () {
        var ctx = this.ctx,
          halfStroke = this.width / 2,
          leftX = this.x - halfStroke,
          rightX = this.x + halfStroke,
          top = this.base - (this.base - this.y),
          halfStroke = this.strokeWidth / 2;
        this.showStroke &&
          ((leftX += halfStroke), (rightX -= halfStroke), (top += halfStroke)),
          ctx.beginPath(),
          (ctx.fillStyle = this.fillColor),
          (ctx.strokeStyle = this.strokeColor),
          (ctx.lineWidth = this.strokeWidth),
          ctx.moveTo(leftX, this.base),
          ctx.lineTo(leftX, top),
          ctx.lineTo(rightX, top),
          ctx.lineTo(rightX, this.base),
          ctx.fill(),
          this.showStroke && ctx.stroke();
      },
      height: function () {
        return this.base - this.y;
      },
      inRange: function (chartX, chartY) {
        return (
          chartX >= this.x - this.width / 2 &&
          chartX <= this.x + this.width / 2 &&
          chartY >= this.y &&
          chartY <= this.base
        );
      },
    })),
    (Chart.Animation = Chart.Element.extend({
      currentStep: null,
      numSteps: 60,
      easing: "",
      render: null,
      onAnimationProgress: null,
      onAnimationComplete: null,
    })),
    (Chart.Tooltip = Chart.Element.extend({
      draw: function () {
        var ctx = this.chart.ctx;
        (ctx.font = fontString(this.fontSize, this.fontStyle, this.fontFamily)),
          (this.xAlign = "center"),
          (this.yAlign = "above");
        this.caretPadding = 2;
        var tooltipWidth = ctx.measureText(this.text).width + 2 * this.xPadding,
          tooltipRectHeight = this.fontSize + 2 * this.yPadding,
          tooltipHeight = tooltipRectHeight + this.caretHeight + 2;
        this.x + tooltipWidth / 2 > this.chart.width
          ? (this.xAlign = "left")
          : this.x - tooltipWidth / 2 < 0 && (this.xAlign = "right"),
          this.y - tooltipHeight < 0 && (this.yAlign = "below");
        var tooltipX = this.x - tooltipWidth / 2,
          tooltipY = this.y - tooltipHeight;
        if (((ctx.fillStyle = this.fillColor), this.custom)) this.custom(this);
        else {
          switch (this.yAlign) {
            case "above":
              ctx.beginPath(),
                ctx.moveTo(this.x, this.y - 2),
                ctx.lineTo(
                  this.x + this.caretHeight,
                  this.y - (2 + this.caretHeight)
                ),
                ctx.lineTo(
                  this.x - this.caretHeight,
                  this.y - (2 + this.caretHeight)
                ),
                ctx.closePath(),
                ctx.fill();
              break;
            case "below":
              (tooltipY = this.y + 2 + this.caretHeight),
                ctx.beginPath(),
                ctx.moveTo(this.x, this.y + 2),
                ctx.lineTo(
                  this.x + this.caretHeight,
                  this.y + 2 + this.caretHeight
                ),
                ctx.lineTo(
                  this.x - this.caretHeight,
                  this.y + 2 + this.caretHeight
                ),
                ctx.closePath(),
                ctx.fill();
          }
          switch (this.xAlign) {
            case "left":
              tooltipX =
                this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);
              break;
            case "right":
              tooltipX = this.x - (this.cornerRadius + this.caretHeight);
          }
          drawRoundedRectangle(
            ctx,
            tooltipX,
            tooltipY,
            tooltipWidth,
            tooltipRectHeight,
            this.cornerRadius
          ),
            ctx.fill(),
            (ctx.fillStyle = this.textColor),
            (ctx.textAlign = "center"),
            (ctx.textBaseline = "middle"),
            ctx.fillText(
              this.text,
              tooltipX + tooltipWidth / 2,
              tooltipY + tooltipRectHeight / 2
            );
        }
      },
    })),
    (Chart.MultiTooltip = Chart.Element.extend({
      initialize: function () {
        (this.font = fontString(
          this.fontSize,
          this.fontStyle,
          this.fontFamily
        )),
          (this.titleFont = fontString(
            this.titleFontSize,
            this.titleFontStyle,
            this.titleFontFamily
          )),
          (this.titleHeight = this.title ? 1.5 * this.titleFontSize : 0),
          (this.height =
            this.labels.length * this.fontSize +
            (this.labels.length - 1) * (this.fontSize / 2) +
            2 * this.yPadding +
            this.titleHeight),
          (this.ctx.font = this.titleFont);
        var halfHeight = this.ctx.measureText(this.title).width,
          labelWidth =
            longestText(this.ctx, this.font, this.labels) + this.fontSize + 3,
          halfHeight = max([labelWidth, halfHeight]);
        this.width = halfHeight + 2 * this.xPadding;
        halfHeight = this.height / 2;
        this.y - halfHeight < 0
          ? (this.y = halfHeight)
          : this.y + halfHeight > this.chart.height &&
            (this.y = this.chart.height - halfHeight),
          this.x > this.chart.width / 2
            ? (this.x -= this.xOffset + this.width)
            : (this.x += this.xOffset);
      },
      getLineHeight: function (index) {
        var baseLineHeight = this.y - this.height / 2 + this.yPadding,
          afterTitleIndex = index - 1;
        return 0 === index
          ? baseLineHeight + this.titleHeight / 3
          : baseLineHeight +
              (1.5 * this.fontSize * afterTitleIndex + this.fontSize / 2) +
              this.titleHeight;
      },
      draw: function () {
        var ctx;
        this.custom
          ? this.custom(this)
          : (drawRoundedRectangle(
              this.ctx,
              this.x,
              this.y - this.height / 2,
              this.width,
              this.height,
              this.cornerRadius
            ),
            ((ctx = this.ctx).fillStyle = this.fillColor),
            ctx.fill(),
            ctx.closePath(),
            (ctx.textAlign = "left"),
            (ctx.textBaseline = "middle"),
            (ctx.fillStyle = this.titleTextColor),
            (ctx.font = this.titleFont),
            ctx.fillText(
              this.title,
              this.x + this.xPadding,
              this.getLineHeight(0)
            ),
            (ctx.font = this.font),
            helpers.each(
              this.labels,
              function (label, index) {
                (ctx.fillStyle = this.textColor),
                  ctx.fillText(
                    label,
                    this.x + this.xPadding + this.fontSize + 3,
                    this.getLineHeight(index + 1)
                  ),
                  (ctx.fillStyle = this.legendColorBackground),
                  ctx.fillRect(
                    this.x + this.xPadding,
                    this.getLineHeight(index + 1) - this.fontSize / 2,
                    this.fontSize,
                    this.fontSize
                  ),
                  (ctx.fillStyle = this.legendColors[index].fill),
                  ctx.fillRect(
                    this.x + this.xPadding,
                    this.getLineHeight(index + 1) - this.fontSize / 2,
                    this.fontSize,
                    this.fontSize
                  );
              },
              this
            ));
      },
    })),
    (Chart.Scale = Chart.Element.extend({
      initialize: function () {
        this.fit();
      },
      buildYLabels: function () {
        this.yLabels = [];
        for (
          var stepDecimalPlaces = getDecimalPlaces(this.stepValue), i = 0;
          i <= this.steps;
          i++
        )
          this.yLabels.push(
            template(this.templateString, {
              value: (this.min + i * this.stepValue).toFixed(stepDecimalPlaces),
            })
          );
        this.yLabelWidth =
          this.display && this.showLabels
            ? longestText(this.ctx, this.font, this.yLabels) + 10
            : 0;
      },
      addXLabel: function (label) {
        this.xLabels.push(label), this.valuesCount++, this.fit();
      },
      removeXLabel: function () {
        this.xLabels.shift(), this.valuesCount--, this.fit();
      },
      fit: function () {
        (this.startPoint = this.display ? this.fontSize : 0),
          (this.endPoint = this.display
            ? this.height - 1.5 * this.fontSize - 5
            : this.height),
          (this.startPoint += this.padding),
          (this.endPoint -= this.padding);
        var cachedYLabelWidth,
          cachedEndPoint = this.endPoint,
          cachedHeight = this.endPoint - this.startPoint;
        for (
          this.calculateYRange(cachedHeight),
            this.buildYLabels(),
            this.calculateXLabelRotation();
          cachedHeight > this.endPoint - this.startPoint;

        )
          (cachedHeight = this.endPoint - this.startPoint),
            (cachedYLabelWidth = this.yLabelWidth),
            this.calculateYRange(cachedHeight),
            this.buildYLabels(),
            cachedYLabelWidth < this.yLabelWidth &&
              ((this.endPoint = cachedEndPoint),
              this.calculateXLabelRotation());
      },
      calculateXLabelRotation: function () {
        this.ctx.font = this.font;
        var firstRotated,
          firstWidth = this.ctx.measureText(this.xLabels[0]).width,
          lastWidth = this.ctx.measureText(
            this.xLabels[this.xLabels.length - 1]
          ).width;
        if (
          ((this.xScalePaddingRight = lastWidth / 2 + 3),
          (this.xScalePaddingLeft =
            firstWidth / 2 > this.yLabelWidth
              ? firstWidth / 2
              : this.yLabelWidth),
          (this.xLabelRotation = 0),
          this.display)
        ) {
          var cosRotation,
            originalLabelWidth = longestText(this.ctx, this.font, this.xLabels);
          this.xLabelWidth = originalLabelWidth;
          for (
            var xGridWidth =
              Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;
            (this.xLabelWidth > xGridWidth && 0 === this.xLabelRotation) ||
            (this.xLabelWidth > xGridWidth &&
              this.xLabelRotation <= 90 &&
              0 < this.xLabelRotation);

          )
            (cosRotation = Math.cos(toRadians(this.xLabelRotation))),
              (firstRotated = cosRotation * firstWidth) + this.fontSize / 2 >
                this.yLabelWidth &&
                (this.xScalePaddingLeft = firstRotated + this.fontSize / 2),
              (this.xScalePaddingRight = this.fontSize / 2),
              this.xLabelRotation++,
              (this.xLabelWidth = cosRotation * originalLabelWidth);
          0 < this.xLabelRotation &&
            (this.endPoint -=
              Math.sin(toRadians(this.xLabelRotation)) * originalLabelWidth +
              3);
        } else
          (this.xLabelWidth = 0),
            (this.xScalePaddingRight = this.padding),
            (this.xScalePaddingLeft = this.padding);
      },
      calculateYRange: noop,
      drawingArea: function () {
        return this.startPoint - this.endPoint;
      },
      calculateY: function (value) {
        var scalingFactor = this.drawingArea() / (this.min - this.max);
        return this.endPoint - scalingFactor * (value - this.min);
      },
      calculateX: function (valueOffset) {
        this.xLabelRotation;
        var valueWidth =
            (this.width - (this.xScalePaddingLeft + this.xScalePaddingRight)) /
            Math.max(this.valuesCount - (this.offsetGridLines ? 0 : 1), 1),
          valueOffset = valueWidth * valueOffset + this.xScalePaddingLeft;
        return (
          this.offsetGridLines && (valueOffset += valueWidth / 2),
          Math.round(valueOffset)
        );
      },
      update: function (newProps) {
        helpers.extend(this, newProps), this.fit();
      },
      draw: function () {
        var ctx = this.ctx,
          yLabelGap = (this.endPoint - this.startPoint) / this.steps,
          xStart = Math.round(this.xScalePaddingLeft);
        this.display &&
          ((ctx.fillStyle = this.textColor),
          (ctx.font = this.font),
          each(
            this.yLabels,
            function (labelString, index) {
              var yLabelCenter = this.endPoint - yLabelGap * index,
                linePositionY = Math.round(yLabelCenter),
                drawHorizontalLine = this.showHorizontalLines;
              (ctx.textAlign = "right"),
                (ctx.textBaseline = "middle"),
                this.showLabels &&
                  ctx.fillText(labelString, xStart - 10, yLabelCenter),
                (drawHorizontalLine =
                  0 === index && !drawHorizontalLine
                    ? !0
                    : drawHorizontalLine) && ctx.beginPath(),
                0 < index
                  ? ((ctx.lineWidth = this.gridLineWidth),
                    (ctx.strokeStyle = this.gridLineColor))
                  : ((ctx.lineWidth = this.lineWidth),
                    (ctx.strokeStyle = this.lineColor)),
                (linePositionY += helpers.aliasPixel(ctx.lineWidth)),
                drawHorizontalLine &&
                  (ctx.moveTo(xStart, linePositionY),
                  ctx.lineTo(this.width, linePositionY),
                  ctx.stroke(),
                  ctx.closePath()),
                (ctx.lineWidth = this.lineWidth),
                (ctx.strokeStyle = this.lineColor),
                ctx.beginPath(),
                ctx.moveTo(xStart - 5, linePositionY),
                ctx.lineTo(xStart, linePositionY),
                ctx.stroke(),
                ctx.closePath();
            },
            this
          ),
          each(
            this.xLabels,
            function (label, index) {
              var xPos = this.calculateX(index) + aliasPixel(this.lineWidth),
                linePos =
                  this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) +
                  aliasPixel(this.lineWidth),
                isRotated = 0 < this.xLabelRotation,
                drawVerticalLine = this.showVerticalLines;
              (drawVerticalLine =
                0 === index && !drawVerticalLine ? !0 : drawVerticalLine) &&
                ctx.beginPath(),
                0 < index
                  ? ((ctx.lineWidth = this.gridLineWidth),
                    (ctx.strokeStyle = this.gridLineColor))
                  : ((ctx.lineWidth = this.lineWidth),
                    (ctx.strokeStyle = this.lineColor)),
                drawVerticalLine &&
                  (ctx.moveTo(linePos, this.endPoint),
                  ctx.lineTo(linePos, this.startPoint - 3),
                  ctx.stroke(),
                  ctx.closePath()),
                (ctx.lineWidth = this.lineWidth),
                (ctx.strokeStyle = this.lineColor),
                ctx.beginPath(),
                ctx.moveTo(linePos, this.endPoint),
                ctx.lineTo(linePos, this.endPoint + 5),
                ctx.stroke(),
                ctx.closePath(),
                ctx.save(),
                ctx.translate(
                  xPos,
                  isRotated ? this.endPoint + 12 : this.endPoint + 8
                ),
                ctx.rotate(-1 * toRadians(this.xLabelRotation)),
                (ctx.font = this.font),
                (ctx.textAlign = isRotated ? "right" : "center"),
                (ctx.textBaseline = isRotated ? "middle" : "top"),
                ctx.fillText(label, 0, 0),
                ctx.restore();
            },
            this
          ));
      },
    })),
    (Chart.RadialScale = Chart.Element.extend({
      initialize: function () {
        (this.size = min([this.height, this.width])),
          (this.drawingArea = this.display
            ? this.size / 2 - (this.fontSize / 2 + this.backdropPaddingY)
            : this.size / 2);
      },
      calculateCenterOffset: function (value) {
        var scalingFactor = this.drawingArea / (this.max - this.min);
        return (value - this.min) * scalingFactor;
      },
      update: function () {
        this.lineArc
          ? (this.drawingArea = this.display
              ? this.size / 2 - (this.fontSize / 2 + this.backdropPaddingY)
              : this.size / 2)
          : this.setScaleSize(),
          this.buildYLabels();
      },
      buildYLabels: function () {
        this.yLabels = [];
        for (
          var stepDecimalPlaces = getDecimalPlaces(this.stepValue), i = 0;
          i <= this.steps;
          i++
        )
          this.yLabels.push(
            template(this.templateString, {
              value: (this.min + i * this.stepValue).toFixed(stepDecimalPlaces),
            })
          );
      },
      getCircumference: function () {
        return (2 * Math.PI) / this.valuesCount;
      },
      setScaleSize: function () {
        var pointPosition,
          i,
          textWidth,
          halfTextWidth,
          furthestRightIndex,
          furthestLeftIndex,
          xProtrusionLeft,
          xProtrusionRight,
          radiusReductionRight,
          radiusReductionLeft,
          largestPossibleRadius = min([
            this.height / 2 - this.pointLabelFontSize - 5,
            this.width / 2,
          ]),
          furthestRight = this.width,
          furthestLeft = 0;
        for (
          this.ctx.font = fontString(
            this.pointLabelFontSize,
            this.pointLabelFontStyle,
            this.pointLabelFontFamily
          ),
            i = 0;
          i < this.valuesCount;
          i++
        )
          (pointPosition = this.getPointPosition(i, largestPossibleRadius)),
            (textWidth =
              this.ctx.measureText(
                template(this.templateString, { value: this.labels[i] })
              ).width + 5),
            0 === i || i === this.valuesCount / 2
              ? ((halfTextWidth = textWidth / 2),
                pointPosition.x + halfTextWidth > furthestRight &&
                  ((furthestRight = pointPosition.x + halfTextWidth),
                  (furthestRightIndex = i)),
                pointPosition.x - halfTextWidth < furthestLeft &&
                  ((furthestLeft = pointPosition.x - halfTextWidth),
                  (furthestLeftIndex = i)))
              : i < this.valuesCount / 2
              ? pointPosition.x + textWidth > furthestRight &&
                ((furthestRight = pointPosition.x + textWidth),
                (furthestRightIndex = i))
              : i > this.valuesCount / 2 &&
                pointPosition.x - textWidth < furthestLeft &&
                ((furthestLeft = pointPosition.x - textWidth),
                (furthestLeftIndex = i));
        (xProtrusionLeft = furthestLeft),
          (xProtrusionRight = Math.ceil(furthestRight - this.width)),
          (radiusReductionRight = this.getIndexAngle(furthestRightIndex)),
          (radiusReductionLeft = this.getIndexAngle(furthestLeftIndex)),
          (radiusReductionRight =
            xProtrusionRight / Math.sin(radiusReductionRight + Math.PI / 2)),
          (radiusReductionLeft =
            xProtrusionLeft / Math.sin(radiusReductionLeft + Math.PI / 2)),
          (radiusReductionRight = isNumber(radiusReductionRight)
            ? radiusReductionRight
            : 0),
          (radiusReductionLeft = isNumber(radiusReductionLeft)
            ? radiusReductionLeft
            : 0),
          (this.drawingArea =
            largestPossibleRadius -
            (radiusReductionLeft + radiusReductionRight) / 2),
          this.setCenterPoint(radiusReductionLeft, radiusReductionRight);
      },
      setCenterPoint: function (maxLeft, maxRight) {
        (maxRight = this.width - maxRight - this.drawingArea),
          (maxLeft += this.drawingArea);
        (this.xCenter = (maxLeft + maxRight) / 2),
          (this.yCenter = this.height / 2);
      },
      getIndexAngle: function (index) {
        return index * ((2 * Math.PI) / this.valuesCount) - Math.PI / 2;
      },
      getPointPosition: function (thisAngle, distanceFromCenter) {
        thisAngle = this.getIndexAngle(thisAngle);
        return {
          x: Math.cos(thisAngle) * distanceFromCenter + this.xCenter,
          y: Math.sin(thisAngle) * distanceFromCenter + this.yCenter,
        };
      },
      draw: function () {
        if (this.display) {
          var ctx = this.ctx;
          if (
            (each(
              this.yLabels,
              function (label, index) {
                if (0 < index) {
                  var pointPosition,
                    labelWidth = index * (this.drawingArea / this.steps),
                    yHeight = this.yCenter - labelWidth;
                  if (0 < this.lineWidth)
                    if (
                      ((ctx.strokeStyle = this.lineColor),
                      (ctx.lineWidth = this.lineWidth),
                      this.lineArc)
                    )
                      ctx.beginPath(),
                        ctx.arc(
                          this.xCenter,
                          this.yCenter,
                          labelWidth,
                          0,
                          2 * Math.PI
                        ),
                        ctx.closePath(),
                        ctx.stroke();
                    else {
                      ctx.beginPath();
                      for (var i = 0; i < this.valuesCount; i++)
                        (pointPosition = this.getPointPosition(
                          i,
                          this.calculateCenterOffset(
                            this.min + index * this.stepValue
                          )
                        )),
                          0 === i
                            ? ctx.moveTo(pointPosition.x, pointPosition.y)
                            : ctx.lineTo(pointPosition.x, pointPosition.y);
                      ctx.closePath(), ctx.stroke();
                    }
                  this.showLabels &&
                    ((ctx.font = fontString(
                      this.fontSize,
                      this.fontStyle,
                      this.fontFamily
                    )),
                    this.showLabelBackdrop &&
                      ((labelWidth = ctx.measureText(label).width),
                      (ctx.fillStyle = this.backdropColor),
                      ctx.fillRect(
                        this.xCenter - labelWidth / 2 - this.backdropPaddingX,
                        yHeight - this.fontSize / 2 - this.backdropPaddingY,
                        labelWidth + 2 * this.backdropPaddingX,
                        this.fontSize + 2 * this.backdropPaddingY
                      )),
                    (ctx.textAlign = "center"),
                    (ctx.textBaseline = "middle"),
                    (ctx.fillStyle = this.fontColor),
                    ctx.fillText(label, this.xCenter, yHeight));
                }
              },
              this
            ),
            !this.lineArc)
          ) {
            (ctx.lineWidth = this.angleLineWidth),
              (ctx.strokeStyle = this.angleLineColor);
            for (var i = this.valuesCount - 1; 0 <= i; i--) {
              var centerOffset = null,
                exactQuarter = null;
              0 < this.angleLineWidth &&
                i % this.angleLineInterval == 0 &&
                ((centerOffset = this.calculateCenterOffset(this.max)),
                (exactQuarter = this.getPointPosition(i, centerOffset)),
                ctx.beginPath(),
                ctx.moveTo(this.xCenter, this.yCenter),
                ctx.lineTo(exactQuarter.x, exactQuarter.y),
                ctx.stroke(),
                ctx.closePath()),
                this.backgroundColors &&
                  this.backgroundColors.length == this.valuesCount &&
                  (null == centerOffset &&
                    (centerOffset = this.calculateCenterOffset(this.max)),
                  null == exactQuarter &&
                    (exactQuarter = this.getPointPosition(i, centerOffset)),
                  (pointLabelPosition = this.getPointPosition(
                    0 === i ? this.valuesCount - 1 : i - 1,
                    centerOffset
                  )),
                  (labelsCount = this.getPointPosition(
                    i === this.valuesCount - 1 ? 0 : i + 1,
                    centerOffset
                  )),
                  (halfLabelsCount = {
                    x: (pointLabelPosition.x + exactQuarter.x) / 2,
                    y: (pointLabelPosition.y + exactQuarter.y) / 2,
                  }),
                  (upperHalf = {
                    x: (exactQuarter.x + labelsCount.x) / 2,
                    y: (exactQuarter.y + labelsCount.y) / 2,
                  }),
                  ctx.beginPath(),
                  ctx.moveTo(this.xCenter, this.yCenter),
                  ctx.lineTo(halfLabelsCount.x, halfLabelsCount.y),
                  ctx.lineTo(exactQuarter.x, exactQuarter.y),
                  ctx.lineTo(upperHalf.x, upperHalf.y),
                  (ctx.fillStyle = this.backgroundColors[i]),
                  ctx.fill(),
                  ctx.closePath());
              var pointLabelPosition = this.getPointPosition(
                i,
                this.calculateCenterOffset(this.max) + 5
              );
              (ctx.font = fontString(
                this.pointLabelFontSize,
                this.pointLabelFontStyle,
                this.pointLabelFontFamily
              )),
                (ctx.fillStyle = this.pointLabelFontColor);
              var labelsCount = this.labels.length,
                halfLabelsCount = this.labels.length / 2,
                exactQuarter = halfLabelsCount / 2,
                upperHalf = i < exactQuarter || labelsCount - exactQuarter < i,
                exactQuarter =
                  i === exactQuarter || i === labelsCount - exactQuarter;
              (ctx.textAlign =
                0 === i || i === halfLabelsCount
                  ? "center"
                  : i < halfLabelsCount
                  ? "left"
                  : "right"),
                (ctx.textBaseline = exactQuarter
                  ? "middle"
                  : upperHalf
                  ? "bottom"
                  : "top"),
                ctx.fillText(
                  this.labels[i],
                  pointLabelPosition.x,
                  pointLabelPosition.y
                );
            }
          }
        }
      },
    })),
    (Chart.animationService = {
      frameDuration: 17,
      animations: [],
      dropFrames: 0,
      addAnimation: function (chartInstance, animationObject) {
        for (var index = 0; index < this.animations.length; ++index)
          if (this.animations[index].chartInstance === chartInstance)
            return void (this.animations[index].animationObject =
              animationObject);
        this.animations.push({
          chartInstance: chartInstance,
          animationObject: animationObject,
        }),
          1 == this.animations.length &&
            helpers.requestAnimFrame.call(window, this.digestWrapper);
      },
      cancelAnimation: function (chartInstance) {
        var index = helpers.findNextWhere(
          this.animations,
          function (animationWrapper) {
            return animationWrapper.chartInstance === chartInstance;
          }
        );
        index && this.animations.splice(index, 1);
      },
      digestWrapper: function () {
        Chart.animationService.startDigest.call(Chart.animationService);
      },
      startDigest: function () {
        var frameDelay = Date.now(),
          framesToDrop = 0;
        1 < this.dropFrames &&
          ((framesToDrop = Math.floor(this.dropFrames)),
          (this.dropFrames -= framesToDrop));
        for (var i = 0; i < this.animations.length; i++)
          null === this.animations[i].animationObject.currentStep &&
            (this.animations[i].animationObject.currentStep = 0),
            (this.animations[i].animationObject.currentStep +=
              1 + framesToDrop),
            this.animations[i].animationObject.currentStep >
              this.animations[i].animationObject.numSteps &&
              (this.animations[i].animationObject.currentStep =
                this.animations[i].animationObject.numSteps),
            this.animations[i].animationObject.render(
              this.animations[i].chartInstance,
              this.animations[i].animationObject
            ),
            this.animations[i].animationObject.currentStep ==
              this.animations[i].animationObject.numSteps &&
              (this.animations[i].animationObject.onAnimationComplete.call(
                this.animations[i].chartInstance
              ),
              this.animations.splice(i, 1),
              i--);
        frameDelay =
          (Date.now() - frameDelay - this.frameDuration) / this.frameDuration;
        1 < frameDelay && (this.dropFrames += frameDelay),
          0 < this.animations.length &&
            helpers.requestAnimFrame.call(window, this.digestWrapper);
      },
    }),
    helpers.addEvent(window, "resize", function () {
      clearTimeout(timeout),
        (timeout = setTimeout(function () {
          each(Chart.instances, function (instance) {
            instance.options.responsive && instance.resize(instance.render, !0);
          });
        }, 50));
    }),
    amd
      ? define("Chart", [], function () {
          return Chart;
        })
      : "object" == typeof module && module.exports && (module.exports = Chart),
    ((root.Chart = Chart).noConflict = function () {
      return (root.Chart = previous), Chart;
    });
}.call(this),
  function () {
    "use strict";
    var Chart = this.Chart,
      helpers = Chart.helpers;
    Chart.Type.extend({
      name: "Bar",
      defaults: {
        scaleBeginAtZero: !0,
        scaleShowGridLines: !0,
        scaleGridLineColor: "rgba(0,0,0,.05)",
        scaleGridLineWidth: 1,
        scaleShowHorizontalLines: !0,
        scaleShowVerticalLines: !0,
        barShowStroke: !0,
        barStrokeWidth: 2,
        barValueSpacing: 5,
        barDatasetSpacing: 1,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=datasets[i].fillColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>',
      },
      initialize: function (data) {
        var options = this.options;
        (this.ScaleClass = Chart.Scale.extend({
          offsetGridLines: !0,
          calculateBarX: function (barWidth, datasetIndex, barIndex) {
            var xAbsolute = this.calculateBaseWidth(),
              xAbsolute = this.calculateX(barIndex) - xAbsolute / 2,
              barWidth = this.calculateBarWidth(barWidth);
            return (
              xAbsolute +
              barWidth * datasetIndex +
              datasetIndex * options.barDatasetSpacing +
              barWidth / 2
            );
          },
          calculateBaseWidth: function () {
            return (
              this.calculateX(1) -
              this.calculateX(0) -
              2 * options.barValueSpacing
            );
          },
          calculateBarWidth: function (datasetCount) {
            return (
              (this.calculateBaseWidth() -
                (datasetCount - 1) * options.barDatasetSpacing) /
              datasetCount
            );
          },
        })),
          (this.datasets = []),
          this.options.showTooltips &&
            helpers.bindEvents(
              this,
              this.options.tooltipEvents,
              function (activeBars) {
                activeBars =
                  "mouseout" !== activeBars.type
                    ? this.getBarsAtEvent(activeBars)
                    : [];
                this.eachBars(function (bar) {
                  bar.restore(["fillColor", "strokeColor"]);
                }),
                  helpers.each(activeBars, function (activeBar) {
                    activeBar &&
                      ((activeBar.fillColor = activeBar.highlightFill),
                      (activeBar.strokeColor = activeBar.highlightStroke));
                  }),
                  this.showTooltip(activeBars);
              }
            ),
          (this.BarClass = Chart.Rectangle.extend({
            strokeWidth: this.options.barStrokeWidth,
            showStroke: this.options.barShowStroke,
            ctx: this.chart.ctx,
          })),
          helpers.each(
            data.datasets,
            function (dataset, datasetIndex) {
              var datasetObject = {
                label: dataset.label || null,
                fillColor: dataset.fillColor,
                strokeColor: dataset.strokeColor,
                bars: [],
              };
              this.datasets.push(datasetObject),
                helpers.each(
                  dataset.data,
                  function (dataPoint, index) {
                    datasetObject.bars.push(
                      new this.BarClass({
                        value: dataPoint,
                        label: data.labels[index],
                        datasetLabel: dataset.label,
                        strokeColor:
                          "object" == typeof dataset.strokeColor
                            ? dataset.strokeColor[index]
                            : dataset.strokeColor,
                        fillColor:
                          "object" == typeof dataset.fillColor
                            ? dataset.fillColor[index]
                            : dataset.fillColor,
                        highlightFill: dataset.highlightFill
                          ? "object" == typeof dataset.highlightFill
                            ? dataset.highlightFill[index]
                            : dataset.highlightFill
                          : "object" == typeof dataset.fillColor
                          ? dataset.fillColor[index]
                          : dataset.fillColor,
                        highlightStroke: dataset.highlightStroke
                          ? "object" == typeof dataset.highlightStroke
                            ? dataset.highlightStroke[index]
                            : dataset.highlightStroke
                          : "object" == typeof dataset.strokeColor
                          ? dataset.strokeColor[index]
                          : dataset.strokeColor,
                      })
                    );
                  },
                  this
                );
            },
            this
          ),
          this.buildScale(data.labels),
          (this.BarClass.prototype.base = this.scale.endPoint),
          this.eachBars(function (bar, index, datasetIndex) {
            helpers.extend(bar, {
              width: this.scale.calculateBarWidth(this.datasets.length),
              x: this.scale.calculateBarX(
                this.datasets.length,
                datasetIndex,
                index
              ),
              y: this.scale.endPoint,
            }),
              bar.save();
          }, this),
          this.render();
      },
      update: function () {
        this.scale.update(),
          helpers.each(this.activeElements, function (activeElement) {
            activeElement.restore(["fillColor", "strokeColor"]);
          }),
          this.eachBars(function (bar) {
            bar.save();
          }),
          this.render();
      },
      eachBars: function (callback) {
        helpers.each(
          this.datasets,
          function (dataset, datasetIndex) {
            helpers.each(dataset.bars, callback, this, datasetIndex);
          },
          this
        );
      },
      getBarsAtEvent: function (e) {
        for (
          var barIndex,
            barsArray = [],
            eventPosition = helpers.getRelativePosition(e),
            datasetIterator = function (dataset) {
              barsArray.push(dataset.bars[barIndex]);
            },
            datasetIndex = 0;
          datasetIndex < this.datasets.length;
          datasetIndex++
        )
          for (
            barIndex = 0;
            barIndex < this.datasets[datasetIndex].bars.length;
            barIndex++
          )
            if (
              this.datasets[datasetIndex].bars[barIndex].inRange(
                eventPosition.x,
                eventPosition.y
              )
            )
              return helpers.each(this.datasets, datasetIterator), barsArray;
        return barsArray;
      },
      buildScale: function (scaleOptions) {
        var self = this,
          scaleOptions = {
            templateString: this.options.scaleLabel,
            height: this.chart.height,
            width: this.chart.width,
            ctx: this.chart.ctx,
            textColor: this.options.scaleFontColor,
            fontSize: this.options.scaleFontSize,
            fontStyle: this.options.scaleFontStyle,
            fontFamily: this.options.scaleFontFamily,
            valuesCount: scaleOptions.length,
            beginAtZero: this.options.scaleBeginAtZero,
            integersOnly: this.options.scaleIntegersOnly,
            calculateYRange: function (updatedRanges) {
              var values,
                updatedRanges = helpers.calculateScaleRange(
                  ((values = []),
                  self.eachBars(function (bar) {
                    values.push(bar.value);
                  }),
                  values),
                  updatedRanges,
                  this.fontSize,
                  this.beginAtZero,
                  this.integersOnly
                );
              helpers.extend(this, updatedRanges);
            },
            xLabels: scaleOptions,
            font: helpers.fontString(
              this.options.scaleFontSize,
              this.options.scaleFontStyle,
              this.options.scaleFontFamily
            ),
            lineWidth: this.options.scaleLineWidth,
            lineColor: this.options.scaleLineColor,
            showHorizontalLines: this.options.scaleShowHorizontalLines,
            showVerticalLines: this.options.scaleShowVerticalLines,
            gridLineWidth: this.options.scaleShowGridLines
              ? this.options.scaleGridLineWidth
              : 0,
            gridLineColor: this.options.scaleShowGridLines
              ? this.options.scaleGridLineColor
              : "rgba(0,0,0,0)",
            padding:
              !this.options.showScale && this.options.barShowStroke
                ? this.options.barStrokeWidth
                : 0,
            showLabels: this.options.scaleShowLabels,
            display: this.options.showScale,
          };
        this.options.scaleOverride &&
          helpers.extend(scaleOptions, {
            calculateYRange: helpers.noop,
            steps: this.options.scaleSteps,
            stepValue: this.options.scaleStepWidth,
            min: this.options.scaleStartValue,
            max:
              this.options.scaleStartValue +
              this.options.scaleSteps * this.options.scaleStepWidth,
          }),
          (this.scale = new this.ScaleClass(scaleOptions));
      },
      addData: function (valuesArray, label) {
        helpers.each(
          valuesArray,
          function (value, datasetIndex) {
            this.datasets[datasetIndex].bars.push(
              new this.BarClass({
                value: value,
                label: label,
                datasetLabel: this.datasets[datasetIndex].label,
                x: this.scale.calculateBarX(
                  this.datasets.length,
                  datasetIndex,
                  this.scale.valuesCount + 1
                ),
                y: this.scale.endPoint,
                width: this.scale.calculateBarWidth(this.datasets.length),
                base: this.scale.endPoint,
                strokeColor: this.datasets[datasetIndex].strokeColor,
                fillColor: this.datasets[datasetIndex].fillColor,
              })
            );
          },
          this
        ),
          this.scale.addXLabel(label),
          this.update();
      },
      removeData: function () {
        this.scale.removeXLabel(),
          helpers.each(
            this.datasets,
            function (dataset) {
              dataset.bars.shift();
            },
            this
          ),
          this.update();
      },
      reflow: function () {
        helpers.extend(this.BarClass.prototype, {
          y: this.scale.endPoint,
          base: this.scale.endPoint,
        });
        var newScaleProps = helpers.extend({
          height: this.chart.height,
          width: this.chart.width,
        });
        this.scale.update(newScaleProps);
      },
      draw: function (ease) {
        var easingDecimal = ease || 1;
        this.clear();
        this.chart.ctx;
        this.scale.draw(easingDecimal),
          helpers.each(
            this.datasets,
            function (dataset, datasetIndex) {
              helpers.each(
                dataset.bars,
                function (bar, index) {
                  bar.hasValue() &&
                    ((bar.base = this.scale.endPoint),
                    bar
                      .transition(
                        {
                          x: this.scale.calculateBarX(
                            this.datasets.length,
                            datasetIndex,
                            index
                          ),
                          y: this.scale.calculateY(bar.value),
                          width: this.scale.calculateBarWidth(
                            this.datasets.length
                          ),
                        },
                        easingDecimal
                      )
                      .draw());
                },
                this
              );
            },
            this
          );
      },
    });
  }.call(this),
  function () {
    "use strict";
    var Chart = this.Chart,
      helpers = Chart.helpers,
      defaultConfig = {
        segmentShowStroke: !0,
        segmentStrokeColor: "#fff",
        segmentStrokeWidth: 2,
        percentageInnerCutout: 50,
        animationSteps: 100,
        animationEasing: "easeOutBounce",
        animateRotate: !0,
        animateScale: !1,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=segments[i].fillColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>',
      };
    Chart.Type.extend({
      name: "Doughnut",
      defaults: defaultConfig,
      initialize: function (data) {
        (this.segments = []),
          (this.outerRadius =
            (helpers.min([this.chart.width, this.chart.height]) -
              this.options.segmentStrokeWidth / 2) /
            2),
          (this.SegmentArc = Chart.Arc.extend({
            ctx: this.chart.ctx,
            x: this.chart.width / 2,
            y: this.chart.height / 2,
          })),
          this.options.showTooltips &&
            helpers.bindEvents(
              this,
              this.options.tooltipEvents,
              function (activeSegments) {
                activeSegments =
                  "mouseout" !== activeSegments.type
                    ? this.getSegmentsAtEvent(activeSegments)
                    : [];
                helpers.each(this.segments, function (segment) {
                  segment.restore(["fillColor"]);
                }),
                  helpers.each(activeSegments, function (activeSegment) {
                    activeSegment.fillColor = activeSegment.highlightColor;
                  }),
                  this.showTooltip(activeSegments);
              }
            ),
          this.calculateTotal(data),
          helpers.each(
            data,
            function (datapoint, index) {
              datapoint.color ||
                (datapoint.color =
                  "hsl(" + (360 * index) / data.length + ", 100%, 50%)"),
                this.addData(datapoint, index, !0);
            },
            this
          ),
          this.render();
      },
      getSegmentsAtEvent: function (e) {
        var segmentsArray = [],
          location = helpers.getRelativePosition(e);
        return (
          helpers.each(
            this.segments,
            function (segment) {
              segment.inRange(location.x, location.y) &&
                segmentsArray.push(segment);
            },
            this
          ),
          segmentsArray
        );
      },
      addData: function (segment, index, silent) {
        index = void 0 !== index ? index : this.segments.length;
        void 0 === segment.color &&
          ((segment.color =
            Chart.defaults.global.segmentColorDefault[
              index % Chart.defaults.global.segmentColorDefault.length
            ]),
          (segment.highlight =
            Chart.defaults.global.segmentHighlightColorDefaults[
              index % Chart.defaults.global.segmentHighlightColorDefaults.length
            ])),
          this.segments.splice(
            index,
            0,
            new this.SegmentArc({
              value: segment.value,
              outerRadius: this.options.animateScale ? 0 : this.outerRadius,
              innerRadius: this.options.animateScale
                ? 0
                : (this.outerRadius / 100) * this.options.percentageInnerCutout,
              fillColor: segment.color,
              highlightColor: segment.highlight || segment.color,
              showStroke: this.options.segmentShowStroke,
              strokeWidth: this.options.segmentStrokeWidth,
              strokeColor: this.options.segmentStrokeColor,
              startAngle: 1.5 * Math.PI,
              circumference: this.options.animateRotate
                ? 0
                : this.calculateCircumference(segment.value),
              label: segment.label,
            })
          ),
          silent || (this.reflow(), this.update());
      },
      calculateCircumference: function (value) {
        return 0 < this.total ? 2 * Math.PI * (value / this.total) : 0;
      },
      calculateTotal: function (data) {
        (this.total = 0),
          helpers.each(
            data,
            function (segment) {
              this.total += Math.abs(segment.value);
            },
            this
          );
      },
      update: function () {
        this.calculateTotal(this.segments),
          helpers.each(this.activeElements, function (activeElement) {
            activeElement.restore(["fillColor"]);
          }),
          helpers.each(this.segments, function (segment) {
            segment.save();
          }),
          this.render();
      },
      removeData: function (indexToDelete) {
        indexToDelete = helpers.isNumber(indexToDelete)
          ? indexToDelete
          : this.segments.length - 1;
        this.segments.splice(indexToDelete, 1), this.reflow(), this.update();
      },
      reflow: function () {
        helpers.extend(this.SegmentArc.prototype, {
          x: this.chart.width / 2,
          y: this.chart.height / 2,
        }),
          (this.outerRadius =
            (helpers.min([this.chart.width, this.chart.height]) -
              this.options.segmentStrokeWidth / 2) /
            2),
          helpers.each(
            this.segments,
            function (segment) {
              segment.update({
                outerRadius: this.outerRadius,
                innerRadius:
                  (this.outerRadius / 100) * this.options.percentageInnerCutout,
              });
            },
            this
          );
      },
      draw: function (easeDecimal) {
        var animDecimal = easeDecimal || 1;
        this.clear(),
          helpers.each(
            this.segments,
            function (segment, index) {
              segment.transition(
                {
                  circumference: this.calculateCircumference(segment.value),
                  outerRadius: this.outerRadius,
                  innerRadius:
                    (this.outerRadius / 100) *
                    this.options.percentageInnerCutout,
                },
                animDecimal
              ),
                (segment.endAngle = segment.startAngle + segment.circumference),
                segment.draw(),
                0 === index && (segment.startAngle = 1.5 * Math.PI),
                index < this.segments.length - 1 &&
                  (this.segments[index + 1].startAngle = segment.endAngle);
            },
            this
          );
      },
    }),
      Chart.types.Doughnut.extend({
        name: "Pie",
        defaults: helpers.merge(defaultConfig, { percentageInnerCutout: 0 }),
      });
  }.call(this),
  function () {
    "use strict";
    var Chart = this.Chart,
      helpers = Chart.helpers;
    Chart.Type.extend({
      name: "Line",
      defaults: {
        scaleShowGridLines: !0,
        scaleGridLineColor: "rgba(0,0,0,.05)",
        scaleGridLineWidth: 1,
        scaleShowHorizontalLines: !0,
        scaleShowVerticalLines: !0,
        bezierCurve: !0,
        bezierCurveTension: 0.4,
        pointDot: !0,
        pointDotRadius: 4,
        pointDotStrokeWidth: 1,
        pointHitDetectionRadius: 20,
        datasetStroke: !0,
        datasetStrokeWidth: 2,
        datasetFill: !0,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=datasets[i].strokeColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>',
        offsetGridLines: !1,
      },
      initialize: function (data) {
        (this.PointClass = Chart.Point.extend({
          offsetGridLines: this.options.offsetGridLines,
          strokeWidth: this.options.pointDotStrokeWidth,
          radius: this.options.pointDotRadius,
          display: this.options.pointDot,
          hitDetectionRadius: this.options.pointHitDetectionRadius,
          ctx: this.chart.ctx,
          inRange: function (mouseX) {
            return (
              Math.pow(mouseX - this.x, 2) <
              Math.pow(this.radius + this.hitDetectionRadius, 2)
            );
          },
        })),
          (this.datasets = []),
          this.options.showTooltips &&
            helpers.bindEvents(
              this,
              this.options.tooltipEvents,
              function (activePoints) {
                activePoints =
                  "mouseout" !== activePoints.type
                    ? this.getPointsAtEvent(activePoints)
                    : [];
                this.eachPoints(function (point) {
                  point.restore(["fillColor", "strokeColor"]);
                }),
                  helpers.each(activePoints, function (activePoint) {
                    (activePoint.fillColor = activePoint.highlightFill),
                      (activePoint.strokeColor = activePoint.highlightStroke);
                  }),
                  this.showTooltip(activePoints);
              }
            ),
          helpers.each(
            data.datasets,
            function (dataset) {
              var datasetObject = {
                label: dataset.label || null,
                fillColor: dataset.fillColor,
                strokeColor: dataset.strokeColor,
                pointColor: dataset.pointColor,
                pointStrokeColor: dataset.pointStrokeColor,
                points: [],
              };
              this.datasets.push(datasetObject),
                helpers.each(
                  dataset.data,
                  function (dataPoint, index) {
                    datasetObject.points.push(
                      new this.PointClass({
                        value: dataPoint,
                        label: data.labels[index],
                        datasetLabel: dataset.label,
                        strokeColor: dataset.pointStrokeColor,
                        fillColor: dataset.pointColor,
                        highlightFill:
                          dataset.pointHighlightFill || dataset.pointColor,
                        highlightStroke:
                          dataset.pointHighlightStroke ||
                          dataset.pointStrokeColor,
                      })
                    );
                  },
                  this
                ),
                this.buildScale(data.labels),
                this.eachPoints(function (point, index) {
                  helpers.extend(point, {
                    x: this.scale.calculateX(index),
                    y: this.scale.endPoint,
                  }),
                    point.save();
                }, this);
            },
            this
          ),
          this.render();
      },
      update: function () {
        this.scale.update(),
          helpers.each(this.activeElements, function (activeElement) {
            activeElement.restore(["fillColor", "strokeColor"]);
          }),
          this.eachPoints(function (point) {
            point.save();
          }),
          this.render();
      },
      eachPoints: function (callback) {
        helpers.each(
          this.datasets,
          function (dataset) {
            helpers.each(dataset.points, callback, this);
          },
          this
        );
      },
      getPointsAtEvent: function (e) {
        var pointsArray = [],
          eventPosition = helpers.getRelativePosition(e);
        return (
          helpers.each(
            this.datasets,
            function (dataset) {
              helpers.each(dataset.points, function (point) {
                point.inRange(eventPosition.x, eventPosition.y) &&
                  pointsArray.push(point);
              });
            },
            this
          ),
          pointsArray
        );
      },
      buildScale: function (scaleOptions) {
        var self = this,
          scaleOptions = {
            templateString: this.options.scaleLabel,
            height: this.chart.height,
            width: this.chart.width,
            ctx: this.chart.ctx,
            textColor: this.options.scaleFontColor,
            offsetGridLines: this.options.offsetGridLines,
            fontSize: this.options.scaleFontSize,
            fontStyle: this.options.scaleFontStyle,
            fontFamily: this.options.scaleFontFamily,
            valuesCount: scaleOptions.length,
            beginAtZero: this.options.scaleBeginAtZero,
            integersOnly: this.options.scaleIntegersOnly,
            calculateYRange: function (updatedRanges) {
              var values,
                updatedRanges = helpers.calculateScaleRange(
                  ((values = []),
                  self.eachPoints(function (point) {
                    values.push(point.value);
                  }),
                  values),
                  updatedRanges,
                  this.fontSize,
                  this.beginAtZero,
                  this.integersOnly
                );
              helpers.extend(this, updatedRanges);
            },
            xLabels: scaleOptions,
            font: helpers.fontString(
              this.options.scaleFontSize,
              this.options.scaleFontStyle,
              this.options.scaleFontFamily
            ),
            lineWidth: this.options.scaleLineWidth,
            lineColor: this.options.scaleLineColor,
            showHorizontalLines: this.options.scaleShowHorizontalLines,
            showVerticalLines: this.options.scaleShowVerticalLines,
            gridLineWidth: this.options.scaleShowGridLines
              ? this.options.scaleGridLineWidth
              : 0,
            gridLineColor: this.options.scaleShowGridLines
              ? this.options.scaleGridLineColor
              : "rgba(0,0,0,0)",
            padding: this.options.showScale
              ? 0
              : this.options.pointDotRadius + this.options.pointDotStrokeWidth,
            showLabels: this.options.scaleShowLabels,
            display: this.options.showScale,
          };
        this.options.scaleOverride &&
          helpers.extend(scaleOptions, {
            calculateYRange: helpers.noop,
            steps: this.options.scaleSteps,
            stepValue: this.options.scaleStepWidth,
            min: this.options.scaleStartValue,
            max:
              this.options.scaleStartValue +
              this.options.scaleSteps * this.options.scaleStepWidth,
          }),
          (this.scale = new Chart.Scale(scaleOptions));
      },
      addData: function (valuesArray, label) {
        helpers.each(
          valuesArray,
          function (value, datasetIndex) {
            this.datasets[datasetIndex].points.push(
              new this.PointClass({
                value: value,
                label: label,
                datasetLabel: this.datasets[datasetIndex].label,
                x: this.scale.calculateX(this.scale.valuesCount + 1),
                y: this.scale.endPoint,
                strokeColor: this.datasets[datasetIndex].pointStrokeColor,
                fillColor: this.datasets[datasetIndex].pointColor,
              })
            );
          },
          this
        ),
          this.scale.addXLabel(label),
          this.update();
      },
      removeData: function () {
        this.scale.removeXLabel(),
          helpers.each(
            this.datasets,
            function (dataset) {
              dataset.points.shift();
            },
            this
          ),
          this.update();
      },
      reflow: function () {
        var newScaleProps = helpers.extend({
          height: this.chart.height,
          width: this.chart.width,
        });
        this.scale.update(newScaleProps);
      },
      draw: function (ease) {
        var easingDecimal = ease || 1;
        this.clear();
        function hasValue(item) {
          return null !== item.value;
        }
        function previousPoint(point, collection, index) {
          return (
            helpers.findPreviousWhere(collection, hasValue, index) || point
          );
        }
        var ctx = this.chart.ctx;
        this.scale &&
          (this.scale.draw(easingDecimal),
          helpers.each(
            this.datasets,
            function (dataset) {
              var pointsWithValues = helpers.where(dataset.points, hasValue);
              helpers.each(
                dataset.points,
                function (point, index) {
                  point.hasValue() &&
                    point.transition(
                      {
                        y: this.scale.calculateY(point.value),
                        x: this.scale.calculateX(index),
                      },
                      easingDecimal
                    );
                },
                this
              ),
                this.options.bezierCurve &&
                  helpers.each(
                    pointsWithValues,
                    function (point, index) {
                      var tension =
                        0 < index && index < pointsWithValues.length - 1
                          ? this.options.bezierCurveTension
                          : 0;
                      (point.controlPoints = helpers.splineCurve(
                        previousPoint(point, pointsWithValues, index),
                        point,
                        (function (point, collection, index) {
                          return (
                            helpers.findNextWhere(
                              collection,
                              hasValue,
                              index
                            ) || point
                          );
                        })(point, pointsWithValues, index),
                        tension
                      )),
                        point.controlPoints.outer.y > this.scale.endPoint
                          ? (point.controlPoints.outer.y = this.scale.endPoint)
                          : point.controlPoints.outer.y <
                              this.scale.startPoint &&
                            (point.controlPoints.outer.y =
                              this.scale.startPoint),
                        point.controlPoints.inner.y > this.scale.endPoint
                          ? (point.controlPoints.inner.y = this.scale.endPoint)
                          : point.controlPoints.inner.y <
                              this.scale.startPoint &&
                            (point.controlPoints.inner.y =
                              this.scale.startPoint);
                    },
                    this
                  ),
                (ctx.lineWidth = this.options.datasetStrokeWidth),
                (ctx.strokeStyle = dataset.strokeColor),
                ctx.beginPath(),
                helpers.each(
                  pointsWithValues,
                  function (point, previous) {
                    0 === previous
                      ? ctx.moveTo(point.x, point.y)
                      : this.options.bezierCurve
                      ? ((previous = previousPoint(
                          point,
                          pointsWithValues,
                          previous
                        )),
                        ctx.bezierCurveTo(
                          previous.controlPoints.outer.x,
                          previous.controlPoints.outer.y,
                          point.controlPoints.inner.x,
                          point.controlPoints.inner.y,
                          point.x,
                          point.y
                        ))
                      : ctx.lineTo(point.x, point.y);
                  },
                  this
                ),
                this.options.datasetStroke && ctx.stroke(),
                this.options.datasetFill &&
                  0 < pointsWithValues.length &&
                  (ctx.lineTo(
                    pointsWithValues[pointsWithValues.length - 1].x,
                    this.scale.endPoint
                  ),
                  ctx.lineTo(pointsWithValues[0].x, this.scale.endPoint),
                  (ctx.fillStyle = dataset.fillColor),
                  ctx.closePath(),
                  ctx.fill()),
                helpers.each(pointsWithValues, function (point) {
                  point.draw();
                });
            },
            this
          ));
      },
    });
  }.call(this),
  function () {
    "use strict";
    var Chart = this.Chart,
      helpers = Chart.helpers;
    Chart.Type.extend({
      name: "PolarArea",
      defaults: {
        scaleShowLabelBackdrop: !0,
        scaleBackdropColor: "rgba(255,255,255,0.75)",
        scaleBeginAtZero: !0,
        scaleBackdropPaddingY: 2,
        scaleBackdropPaddingX: 2,
        scaleShowLine: !0,
        segmentShowStroke: !0,
        segmentStrokeColor: "#fff",
        segmentStrokeWidth: 2,
        animationSteps: 100,
        animationEasing: "easeOutBounce",
        animateRotate: !0,
        animateScale: !1,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=segments[i].fillColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(segments[i].label){%><%=segments[i].label%><%}%></span></li><%}%></ul>',
      },
      initialize: function (data) {
        (this.segments = []),
          (this.SegmentArc = Chart.Arc.extend({
            showStroke: this.options.segmentShowStroke,
            strokeWidth: this.options.segmentStrokeWidth,
            strokeColor: this.options.segmentStrokeColor,
            ctx: this.chart.ctx,
            innerRadius: 0,
            x: this.chart.width / 2,
            y: this.chart.height / 2,
          })),
          (this.scale = new Chart.RadialScale({
            display: this.options.showScale,
            fontStyle: this.options.scaleFontStyle,
            fontSize: this.options.scaleFontSize,
            fontFamily: this.options.scaleFontFamily,
            fontColor: this.options.scaleFontColor,
            showLabels: this.options.scaleShowLabels,
            showLabelBackdrop: this.options.scaleShowLabelBackdrop,
            backdropColor: this.options.scaleBackdropColor,
            backdropPaddingY: this.options.scaleBackdropPaddingY,
            backdropPaddingX: this.options.scaleBackdropPaddingX,
            lineWidth: this.options.scaleShowLine
              ? this.options.scaleLineWidth
              : 0,
            lineColor: this.options.scaleLineColor,
            lineArc: !0,
            width: this.chart.width,
            height: this.chart.height,
            xCenter: this.chart.width / 2,
            yCenter: this.chart.height / 2,
            ctx: this.chart.ctx,
            templateString: this.options.scaleLabel,
            valuesCount: data.length,
          })),
          this.updateScaleRange(data),
          this.scale.update(),
          helpers.each(
            data,
            function (segment, index) {
              this.addData(segment, index, !0);
            },
            this
          ),
          this.options.showTooltips &&
            helpers.bindEvents(
              this,
              this.options.tooltipEvents,
              function (activeSegments) {
                activeSegments =
                  "mouseout" !== activeSegments.type
                    ? this.getSegmentsAtEvent(activeSegments)
                    : [];
                helpers.each(this.segments, function (segment) {
                  segment.restore(["fillColor"]);
                }),
                  helpers.each(activeSegments, function (activeSegment) {
                    activeSegment.fillColor = activeSegment.highlightColor;
                  }),
                  this.showTooltip(activeSegments);
              }
            ),
          this.render();
      },
      getSegmentsAtEvent: function (e) {
        var segmentsArray = [],
          location = helpers.getRelativePosition(e);
        return (
          helpers.each(
            this.segments,
            function (segment) {
              segment.inRange(location.x, location.y) &&
                segmentsArray.push(segment);
            },
            this
          ),
          segmentsArray
        );
      },
      addData: function (segment, index, silent) {
        index = index || this.segments.length;
        this.segments.splice(
          index,
          0,
          new this.SegmentArc({
            fillColor: segment.color,
            highlightColor: segment.highlight || segment.color,
            label: segment.label,
            value: segment.value,
            outerRadius: this.options.animateScale
              ? 0
              : this.scale.calculateCenterOffset(segment.value),
            circumference: this.options.animateRotate
              ? 0
              : this.scale.getCircumference(),
            startAngle: 1.5 * Math.PI,
          })
        ),
          silent || (this.reflow(), this.update());
      },
      removeData: function (indexToDelete) {
        indexToDelete = helpers.isNumber(indexToDelete)
          ? indexToDelete
          : this.segments.length - 1;
        this.segments.splice(indexToDelete, 1), this.reflow(), this.update();
      },
      calculateTotal: function (data) {
        (this.total = 0),
          helpers.each(
            data,
            function (segment) {
              this.total += segment.value;
            },
            this
          ),
          (this.scale.valuesCount = this.segments.length);
      },
      updateScaleRange: function (scaleSizes) {
        var valuesArray = [];
        helpers.each(scaleSizes, function (segment) {
          valuesArray.push(segment.value);
        });
        scaleSizes = this.options.scaleOverride
          ? {
              steps: this.options.scaleSteps,
              stepValue: this.options.scaleStepWidth,
              min: this.options.scaleStartValue,
              max:
                this.options.scaleStartValue +
                this.options.scaleSteps * this.options.scaleStepWidth,
            }
          : helpers.calculateScaleRange(
              valuesArray,
              helpers.min([this.chart.width, this.chart.height]) / 2,
              this.options.scaleFontSize,
              this.options.scaleBeginAtZero,
              this.options.scaleIntegersOnly
            );
        helpers.extend(this.scale, scaleSizes, {
          size: helpers.min([this.chart.width, this.chart.height]),
          xCenter: this.chart.width / 2,
          yCenter: this.chart.height / 2,
        });
      },
      update: function () {
        this.calculateTotal(this.segments),
          helpers.each(this.segments, function (segment) {
            segment.save();
          }),
          this.reflow(),
          this.render();
      },
      reflow: function () {
        helpers.extend(this.SegmentArc.prototype, {
          x: this.chart.width / 2,
          y: this.chart.height / 2,
        }),
          this.updateScaleRange(this.segments),
          this.scale.update(),
          helpers.extend(this.scale, {
            xCenter: this.chart.width / 2,
            yCenter: this.chart.height / 2,
          }),
          helpers.each(
            this.segments,
            function (segment) {
              segment.update({
                outerRadius: this.scale.calculateCenterOffset(segment.value),
              });
            },
            this
          );
      },
      draw: function (ease) {
        var easingDecimal = ease || 1;
        this.clear(),
          helpers.each(
            this.segments,
            function (segment, index) {
              segment.transition(
                {
                  circumference: this.scale.getCircumference(),
                  outerRadius: this.scale.calculateCenterOffset(segment.value),
                },
                easingDecimal
              ),
                (segment.endAngle = segment.startAngle + segment.circumference),
                0 === index && (segment.startAngle = 1.5 * Math.PI),
                index < this.segments.length - 1 &&
                  (this.segments[index + 1].startAngle = segment.endAngle),
                segment.draw();
            },
            this
          ),
          this.scale.draw();
      },
    });
  }.call(this),
  function () {
    "use strict";
    var Chart = this.Chart,
      helpers = Chart.helpers;
    Chart.Type.extend({
      name: "Radar",
      defaults: {
        scaleShowLine: !0,
        angleShowLineOut: !0,
        scaleShowLabels: !1,
        scaleBeginAtZero: !0,
        angleLineColor: "rgba(0,0,0,.1)",
        angleLineWidth: 1,
        angleLineInterval: 1,
        pointLabelFontFamily: "'Arial'",
        pointLabelFontStyle: "normal",
        pointLabelFontSize: 10,
        pointLabelFontColor: "#666",
        pointDot: !0,
        pointDotRadius: 3,
        pointDotStrokeWidth: 1,
        pointHitDetectionRadius: 20,
        datasetStroke: !0,
        datasetStrokeWidth: 2,
        datasetFill: !0,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span class="<%=name.toLowerCase()%>-legend-icon" style="background-color:<%=datasets[i].strokeColor%>"></span><span class="<%=name.toLowerCase()%>-legend-text"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>',
      },
      initialize: function (data) {
        (this.PointClass = Chart.Point.extend({
          strokeWidth: this.options.pointDotStrokeWidth,
          radius: this.options.pointDotRadius,
          display: this.options.pointDot,
          hitDetectionRadius: this.options.pointHitDetectionRadius,
          ctx: this.chart.ctx,
        })),
          (this.datasets = []),
          this.buildScale(data),
          this.options.showTooltips &&
            helpers.bindEvents(
              this,
              this.options.tooltipEvents,
              function (activePointsCollection) {
                activePointsCollection =
                  "mouseout" !== activePointsCollection.type
                    ? this.getPointsAtEvent(activePointsCollection)
                    : [];
                this.eachPoints(function (point) {
                  point.restore(["fillColor", "strokeColor"]);
                }),
                  helpers.each(activePointsCollection, function (activePoint) {
                    (activePoint.fillColor = activePoint.highlightFill),
                      (activePoint.strokeColor = activePoint.highlightStroke);
                  }),
                  this.showTooltip(activePointsCollection);
              }
            ),
          helpers.each(
            data.datasets,
            function (dataset) {
              var datasetObject = {
                label: dataset.label || null,
                fillColor: dataset.fillColor,
                strokeColor: dataset.strokeColor,
                pointColor: dataset.pointColor,
                pointStrokeColor: dataset.pointStrokeColor,
                points: [],
              };
              this.datasets.push(datasetObject),
                helpers.each(
                  dataset.data,
                  function (dataPoint, index) {
                    var pointPosition;
                    this.scale.animation ||
                      (pointPosition = this.scale.getPointPosition(
                        index,
                        this.scale.calculateCenterOffset(dataPoint)
                      )),
                      datasetObject.points.push(
                        new this.PointClass({
                          value: dataPoint,
                          label: data.labels[index],
                          datasetLabel: dataset.label,
                          x: this.options.animation
                            ? this.scale.xCenter
                            : pointPosition.x,
                          y: this.options.animation
                            ? this.scale.yCenter
                            : pointPosition.y,
                          strokeColor: dataset.pointStrokeColor,
                          fillColor: dataset.pointColor,
                          highlightFill:
                            dataset.pointHighlightFill || dataset.pointColor,
                          highlightStroke:
                            dataset.pointHighlightStroke ||
                            dataset.pointStrokeColor,
                        })
                      );
                  },
                  this
                );
            },
            this
          ),
          this.render();
      },
      eachPoints: function (callback) {
        helpers.each(
          this.datasets,
          function (dataset) {
            helpers.each(dataset.points, callback, this);
          },
          this
        );
      },
      getPointsAtEvent: function (fromCenter) {
        var anglePerIndex = helpers.getRelativePosition(fromCenter),
          fromCenter = helpers.getAngleFromPoint(
            { x: this.scale.xCenter, y: this.scale.yCenter },
            anglePerIndex
          ),
          anglePerIndex = (2 * Math.PI) / this.scale.valuesCount,
          pointIndex = Math.round(
            (fromCenter.angle - 1.5 * Math.PI) / anglePerIndex
          ),
          activePointsCollection = [];
        return (
          (pointIndex >= this.scale.valuesCount || pointIndex < 0) &&
            (pointIndex = 0),
          fromCenter.distance <= this.scale.drawingArea &&
            helpers.each(this.datasets, function (dataset) {
              activePointsCollection.push(dataset.points[pointIndex]);
            }),
          activePointsCollection
        );
      },
      buildScale: function (data) {
        (this.scale = new Chart.RadialScale({
          display: this.options.showScale,
          fontStyle: this.options.scaleFontStyle,
          fontSize: this.options.scaleFontSize,
          fontFamily: this.options.scaleFontFamily,
          fontColor: this.options.scaleFontColor,
          showLabels: this.options.scaleShowLabels,
          showLabelBackdrop: this.options.scaleShowLabelBackdrop,
          backdropColor: this.options.scaleBackdropColor,
          backgroundColors: this.options.scaleBackgroundColors,
          backdropPaddingY: this.options.scaleBackdropPaddingY,
          backdropPaddingX: this.options.scaleBackdropPaddingX,
          lineWidth: this.options.scaleShowLine
            ? this.options.scaleLineWidth
            : 0,
          lineColor: this.options.scaleLineColor,
          angleLineColor: this.options.angleLineColor,
          angleLineWidth: this.options.angleShowLineOut
            ? this.options.angleLineWidth
            : 0,
          angleLineInterval: this.options.angleLineInterval || 1,
          pointLabelFontColor: this.options.pointLabelFontColor,
          pointLabelFontSize: this.options.pointLabelFontSize,
          pointLabelFontFamily: this.options.pointLabelFontFamily,
          pointLabelFontStyle: this.options.pointLabelFontStyle,
          height: this.chart.height,
          width: this.chart.width,
          xCenter: this.chart.width / 2,
          yCenter: this.chart.height / 2,
          ctx: this.chart.ctx,
          templateString: this.options.scaleLabel,
          labels: data.labels,
          valuesCount: data.datasets[0].data.length,
        })),
          this.scale.setScaleSize(),
          this.updateScaleRange(data.datasets),
          this.scale.buildYLabels();
      },
      updateScaleRange: function (scaleSizes) {
        var totalDataArray,
          scaleSizes =
            ((totalDataArray = []),
            helpers.each(scaleSizes, function (dataset) {
              dataset.data
                ? (totalDataArray = totalDataArray.concat(dataset.data))
                : helpers.each(dataset.points, function (point) {
                    totalDataArray.push(point.value);
                  });
            }),
            totalDataArray),
          scaleSizes = this.options.scaleOverride
            ? {
                steps: this.options.scaleSteps,
                stepValue: this.options.scaleStepWidth,
                min: this.options.scaleStartValue,
                max:
                  this.options.scaleStartValue +
                  this.options.scaleSteps * this.options.scaleStepWidth,
              }
            : helpers.calculateScaleRange(
                scaleSizes,
                helpers.min([this.chart.width, this.chart.height]) / 2,
                this.options.scaleFontSize,
                this.options.scaleBeginAtZero,
                this.options.scaleIntegersOnly
              );
        helpers.extend(this.scale, scaleSizes);
      },
      addData: function (valuesArray, label) {
        this.scale.valuesCount++,
          helpers.each(
            valuesArray,
            function (value, datasetIndex) {
              var pointPosition = this.scale.getPointPosition(
                this.scale.valuesCount,
                this.scale.calculateCenterOffset(value)
              );
              this.datasets[datasetIndex].points.push(
                new this.PointClass({
                  value: value,
                  label: label,
                  datasetLabel: this.datasets[datasetIndex].label,
                  x: pointPosition.x,
                  y: pointPosition.y,
                  strokeColor: this.datasets[datasetIndex].pointStrokeColor,
                  fillColor: this.datasets[datasetIndex].pointColor,
                })
              );
            },
            this
          ),
          this.scale.labels.push(label),
          this.reflow(),
          this.update();
      },
      removeData: function () {
        this.scale.valuesCount--,
          this.scale.labels.shift(),
          helpers.each(
            this.datasets,
            function (dataset) {
              dataset.points.shift();
            },
            this
          ),
          this.reflow(),
          this.update();
      },
      update: function () {
        this.eachPoints(function (point) {
          point.save();
        }),
          this.reflow(),
          this.render();
      },
      reflow: function () {
        helpers.extend(this.scale, {
          width: this.chart.width,
          height: this.chart.height,
          size: helpers.min([this.chart.width, this.chart.height]),
          xCenter: this.chart.width / 2,
          yCenter: this.chart.height / 2,
        }),
          this.updateScaleRange(this.datasets),
          this.scale.setScaleSize(),
          this.scale.buildYLabels();
      },
      draw: function (ease) {
        var easeDecimal = ease || 1,
          ctx = this.chart.ctx;
        this.clear(),
          this.scale.draw(),
          helpers.each(
            this.datasets,
            function (dataset) {
              helpers.each(
                dataset.points,
                function (point, index) {
                  point.hasValue() &&
                    point.transition(
                      this.scale.getPointPosition(
                        index,
                        this.scale.calculateCenterOffset(point.value)
                      ),
                      easeDecimal
                    );
                },
                this
              ),
                (ctx.lineWidth = this.options.datasetStrokeWidth),
                (ctx.strokeStyle = dataset.strokeColor),
                ctx.beginPath(),
                helpers.each(
                  dataset.points,
                  function (point, index) {
                    0 === index
                      ? ctx.moveTo(point.x, point.y)
                      : ctx.lineTo(point.x, point.y);
                  },
                  this
                ),
                ctx.closePath(),
                ctx.stroke(),
                (ctx.fillStyle = dataset.fillColor),
                this.options.datasetFill && ctx.fill(),
                helpers.each(dataset.points, function (point) {
                  point.hasValue() && point.draw();
                });
            },
            this
          );
      },
    });
  }.call(this);
/*!
 * WPBakery Page Builder v6.0.0 (https://wpbakery.com)
 * Copyright 2011-2021 Michael M, WPBakery
 * License: Commercial. More details: http://go.wpbakery.com/licensing
 */
!(function ($) {
  "use strict";
  ($.fn.vcRoundChart = function () {
    var vcwaypoint = void 0 !== $.fn.vcwaypoint;
    return (
      this.each(function () {
        var data,
          gradient,
          chart,
          i,
          j,
          $this = $(this),
          ctx = $this.find("canvas")[0].getContext("2d"),
          stroke_width = $this.data("vcStrokeWidth")
            ? parseInt($this.data("vcStrokeWidth"), 10)
            : 0,
          options = {
            showTooltips: $this.data("vcTooltips"),
            animationEasing: $this.data("vcAnimation"),
            segmentStrokeColor: $this.data("vcStrokeColor"),
            segmentShowStroke: 0 !== stroke_width,
            segmentStrokeWidth: stroke_width,
            responsive: !0,
          },
          color_keys = ["color", "highlight"];
        for (
          $this.data("chart") &&
            ($this.data("chart").destroy(), $this.removeData("animated")),
            data = $this.data("vcValues"),
            ctx.canvas.width = $this.width(),
            ctx.canvas.height = $this.width(),
            i = data.length - 1;
          0 <= i;
          i--
        )
          for (j = color_keys.length - 1; 0 <= j; j--)
            "object" == typeof data[i][color_keys[j]] &&
              2 === data[i][color_keys[j]].length &&
              ((gradient = ctx.createLinearGradient(
                0,
                0,
                0,
                ctx.canvas.height
              )).addColorStop(0, data[i][color_keys[j]][0]),
              gradient.addColorStop(1, data[i][color_keys[j]][1]),
              (data[i][color_keys[j]] = gradient));
        function addchart() {
          $this.data("animated") ||
            ((chart =
              "doughnut" === $this.data("vcType")
                ? new Chart(ctx).Doughnut(data, options)
                : new Chart(ctx).Pie(data, options)),
            $this.data("vcChartId", chart.id),
            $this.data("chart", chart),
            $this.data("animated", !0));
        }
        vcwaypoint
          ? $this.vcwaypoint($.proxy(addchart, $this), { offset: "85%" })
          : addchart();
      }),
      this
    );
  }),
    "function" != typeof window.vc_round_charts &&
      (window.vc_round_charts = function (model_id) {
        var selector = ".vc_round-chart";
        $(
          (selector =
            void 0 !== model_id
              ? '[data-model-id="' + model_id + '"] ' + selector
              : selector)
        ).vcRoundChart();
      }),
    $(document).ready(function () {
      window.vc_iframe || vc_round_charts();
    });
})(jQuery);
